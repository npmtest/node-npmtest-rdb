{"/home/travis/build/npmtest/node-npmtest-rdb/test.js":"/* istanbul instrument in package npmtest_rdb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rdb/lib.npmtest_rdb.js":"/* istanbul instrument in package npmtest_rdb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_rdb = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_rdb = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-rdb/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-rdb && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_rdb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_rdb\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_rdb.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_rdb.rollup.js'] =\n            local.assetsDict['/assets.npmtest_rdb.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_rdb.__dirname + '/lib.npmtest_rdb.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/index.js":"var newPg = require('./pg/newDatabase');\n\nvar connectViaPool = function(connectionString, poolOptions) {\n\tif (connectionString.indexOf && connectionString.indexOf('mysql') === 0)\n\t\treturn connectViaPool.mySql.apply(null, arguments);\n\treturn newPg.apply(null, arguments);\n};\n\nconnectViaPool.pg = newPg;\nconnectViaPool.mySql = require('./mySql/newDatabase');\nconnectViaPool.sqlite = require('./sqlite/newDatabase');\nconnectViaPool.table = require('./table');\nconnectViaPool.filter = require('./emptyFilter');\nconnectViaPool.commit = require('./table/commit');\nconnectViaPool.rollback = require('./table/rollback');\nconnectViaPool.end = require('./pools').end;\nconnectViaPool.log = require('./table/log').registerLogger;\nconnectViaPool.query = require('./query');\nconnectViaPool.lock = require('./lock');\nmodule.exports = connectViaPool;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/newDatabase.js":"var createDomain = require('../createDomain');\nvar newTransaction = require('./newTransaction');\nvar promise = require('../table/promise');\nvar begin = require('../table/begin');\nvar commit = require('../table/commit');\nvar rollback = require('../table/rollback');\nvar newPool = require('./newPool');\nvar lock = require('../lock');\n\nfunction newDatabase(connectionString, poolOptions) {\n    var pool = newPool(connectionString, poolOptions);\n    var c = {};\n\n    c.transaction = function() {\n        var domain = createDomain();\n\n        return domain.run(onRun);\n\n        function onRun() {\n            var transaction = newTransaction(domain, pool);\n            var p = promise(transaction).then(begin);\n            return p;\n        }\n    };\n\n    c.rollback = rollback;\n    c.commit = commit;\n    c.lock = lock;\n\n    c.end = function() {\n        return pool.end();\n    };\n\n    c.accept = function(caller) {\n        caller.visitPg();\n    };\n\n    return c;\n}\n\nmodule.exports = newDatabase;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/createDomain.js":"var Domain = require('domain');\nvar negotiateForwardProperty = require('./createDomain/negotiateForwardProperty');\n\nfunction createDomain() {\n\tvar oldDomain = Domain.active || {};\n\tvar domain = Domain.create();\n\tvar ownProperties = Object.getOwnPropertyNames(oldDomain);\n\townProperties.forEach(function(propName) {\n\t\tnegotiateForwardProperty(oldDomain, domain, propName);\n\t});\n\treturn domain;\n}\n\nmodule.exports = createDomain;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/createDomain/negotiateForwardProperty.js":"function negotiateForwardProperty(oldDomain, newDomain, propertyName) {\n\tif(newDomain[propertyName]) return;\n\tif (propertyName === 'rdb') return;\n\tObject.defineProperty(newDomain, propertyName, {\n\t\tenumerable: true,\n\t\tget: createGetter(oldDomain, propertyName),\n\t\tset: createSetter(oldDomain, propertyName)\n\t});\n}\n\nfunction createGetter(oldDomain, propName) {\n\treturn function() {\n\t\treturn oldDomain[propName];\n\t};\n}\n\nfunction createSetter(oldDomain, propName) {\n\treturn function(value) {\n\t\toldDomain[propName] = value;\n\t};\n}\n\nmodule.exports = negotiateForwardProperty;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/newTransaction.js":"var wrapQuery = require('./wrapQuery');\nvar wrapQueryStream = require('./wrapQueryStream');\nvar encodeDate = require('./encodeDate');\nvar encodeBoolean = require('./encodeBoolean');\nvar deleteFromSql = require('./deleteFromSql');\nvar selectForUpdateSql = require('./selectForUpdateSql');\n\nfunction newResolveTransaction(domain, pool) {\n\n    return function(onSuccess, onError) {\n        pool.connect(onConnected);\n\n        function onConnected(err, client, done) {\n            if (err) {\n                onError(err);\n                return;\n            }\n            var rdb = {};\n            client.executeQuery = wrapQuery(client);            \n            client.streamQuery = wrapQueryStream(client);            \n            rdb.dbClient = client;\n            rdb.dbClientDone = done;\n            rdb.encodeBoolean = encodeBoolean;\n            rdb.encodeDate = encodeDate;\n            rdb.deleteFromSql = deleteFromSql;\n            rdb.selectForUpdateSql = selectForUpdateSql;\n            rdb.multipleStatements = true;\n            domain.rdb = rdb;    \n            onSuccess();\n        }\n    };\n}\n\nmodule.exports = newResolveTransaction;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/wrapQuery.js":"var log = require('../table/log');\nvar replaceParamChar = require('./replaceParamChar');\n\nfunction wrapQuery(connection) {\n\tvar runOriginalQuery = connection.query;\n\treturn runQuery;\n\n\tfunction runQuery(query, onCompleted) {\n\t\tvar params = query.parameters;\n\t\tvar sql = replaceParamChar(query, params);\n\t\tlog(sql);\n\t\tlog('parameters: ' + params);\n\n\t\trunOriginalQuery.call(connection, sql, params, onInnerCompleted);\n\n\t\tfunction onInnerCompleted(err, result) {\n\t\t\tif (err) \n\t\t\t\tonCompleted(err);\n\t\t\telse\n\t\t\t\tonCompleted(null, result.rows);\n\t\t}\n\t}\n\n}\n\nmodule.exports = wrapQuery;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/log.js":"var logger = function() {\n};\n\nfunction log() {\n\tlogger.apply(null, arguments);\n}\n\nlog.registerLogger = function(cb) {\n\tlogger = cb;\n};\n\nmodule.exports = log;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/replaceParamChar.js":"function replaceParamChar(query, params) {\n    if (params.length === 0)\n        return query.sql();\n    var splitted = query.sql().split('?');\n    var sql = '';\n    var lastIndex = splitted.length - 1;\n    for (var i = 0; i < lastIndex; i++) {\n        sql += splitted[i] + '$' + (i + 1);\n    }\n    sql += splitted[lastIndex];\n    return sql;\n}\n\nmodule.exports = replaceParamChar;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/wrapQueryStream.js":"var log = require('../table/log');\nvar replaceParamChar = require('./replaceParamChar');\nvar newStreamableQuery = require('./newStreamableQuery');\n\nfunction wrapQueryStream(connection) {\n\tvar runOriginalQuery = connection.query;\n\treturn runQuery;\n\n\tfunction runQuery(query, options) {\n\t\tvar params = query.parameters;\n\t\tvar sql = replaceParamChar(query, params);\n\t\tlog(sql);\n\t\tlog('parameters: ' + params);\n\t\tquery = newStreamableQuery(sql, params, options);\n\n\t\treturn runOriginalQuery.call(connection, query);\n\t}\n\n}\n\nmodule.exports = wrapQueryStream;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/newStreamableQuery.js":"var QueryStream = require('pg-query-stream');\n\nmodule.exports = function (sql, params) {\n\treturn new QueryStream(sql, params);\n}","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/encodeDate.js":"function encodeDate (date) {\n\tif (date.toISOString)\n\t\treturn  \"'\" + date.toISOString() + \"'\";\n\treturn \"'\" + date + \"'\";\n}\n\nmodule.exports = encodeDate;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/encodeBoolean.js":"function encodeBoolean(bool) {\n\treturn bool.toString();\n}\n\nmodule.exports = encodeBoolean;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/deleteFromSql.js":"var format = 'delete from %s %s%s';\nvar util = require('util');\n\nfunction deleteFromSql(table, alias, whereSql) {\n    var name = table._dbName;\n    return util.format(format, name, alias, whereSql);\n}\nmodule.exports = deleteFromSql;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/selectForUpdateSql.js":"module.exports = function(alias) {\n\treturn ' FOR UPDATE OF ' + alias;\n}","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/promise.js":"var promise = require('promise/domains');\nvar deferred = require('deferred');\nvar objectToCallback = require('./objectToCallback');\n\nfunction newPromise(func) {\n\tif (!func)\n\t\treturn deferred.resolve();\n\treturn new promise(func);\n}\n\nnewPromise.all = promise.all;\nnewPromise.denodeify = promise.denodeify;\nmodule.exports = newPromise;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/objectToCallback.js":"module.exports = function(object) {\n\treturn invoke;\n\n\tfunction invoke(resolve) {\n\t\tresolve(object);\n\t}\n};","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/begin.js":"var beginCommand = require('./commands/beginCommand');\nvar executeQuery = require('./executeQueries/executeQuery');\nvar setSessionSingleton = require('./setSessionSingleton');\n\nfunction begin() {\n\tsetSessionSingleton('changes', []);\n\treturn executeQuery(beginCommand);\n}\n\nmodule.exports = begin;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/beginCommand.js":"var newParameterized = require('../query/newParameterized');\n\nvar command = newParameterized('BEGIN');\nfunction empty() {}\n\ncommand.endEdit = empty;\ncommand.matches = empty;\n\nmodule.exports = command;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/newParameterized.js":"var extractSql = require('./extractSql');\nvar extractParameters = require('./parameterized/extractParameters');\n\nvar nextParameterized = function(text, params) {\n    nextParameterized = require('../query/newParameterized');\n    return nextParameterized(text, params);\n}\n\nfunction Parameterized(text, parameters) {\n    this._text = text;\n    this.parameters = parameters;\n}\n\nParameterized.prototype.sql = function() {\n    return this._text;\n};\n\nParameterized.prototype.prepend = function(other) {\n    if (other.sql) {\n        var params = other.parameters.concat(this.parameters);\n        return nextParameterized(other.sql() + this._text, params);\n    } else\n        return nextParameterized(other + this._text, this.parameters);\n};\n\nParameterized.prototype.append = function(other) {\n    if (other.sql) {        \n        var params = this.parameters.concat(other.parameters);\n        return nextParameterized(this._text + other.sql(), params);\n    } else\n        return nextParameterized(this._text + other, this.parameters);\n};\n\nmodule.exports = function(text, parameters) {\n    text = extractSql(text);\n    parameters = extractParameters(parameters);\n    return new Parameterized(text, parameters);\n};\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/extractSql.js":"function extract(sql) {\n\tif (sql)\n\t\treturn sql;\n\treturn '';\n}\n\nmodule.exports = extract;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/parameterized/extractParameters.js":"function extract(parameters) {\t\n\tif (parameters) {\n\t\treturn parameters.slice(0);\t\n\t}\n\treturn [];\n}\n\nmodule.exports = extract;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/executeQueries/executeQuery.js":"var newResolver = require('./resolveExecuteQuery');\nvar newPromise = require('../promise');\n\nfunction executeQuery(query) {\n\tvar resolver = newResolver(query);\n\treturn newPromise(resolver);\n}\n\nmodule.exports = executeQuery;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/executeQueries/resolveExecuteQuery.js":"var getSessionSingleton = require('../getSessionSingleton');\n\nfunction resolveExecuteQuery(query) {\n    return resolve;\n\n    function resolve(success, failed) {\n        var domain = process.domain;\n        if (domain) {\n            success = process.domain.bind(success);\n            failed = process.domain.bind(failed);\n        }\n\n        var client = getSessionSingleton('dbClient');\n\n        client.executeQuery(query, onCompleted);\n\n        function onCompleted(err, rows) {\n            if (!err) {\n                var lastIndex = rows.length - 1;\n                if (!Array.isArray(rows[0]) && Array.isArray(rows[lastIndex]))\n                    rows = rows[lastIndex];\n                Object.defineProperty(rows, 'queryContext', {\n                    value: query.queryContext,\n                    enumerable: false\n                });\n                success(rows);\n            } else\n                failed(err);\n        }\n    }\n\n}\n\nmodule.exports = resolveExecuteQuery;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/getSessionSingleton.js":"var getSessionContext = require('./getSessionContext');\n\nmodule.exports = function(name) {\n\treturn getSessionContext()[name];\n};","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/getSessionContext.js":"module.exports = function() {\n\treturn process.domain.rdb;\t\n};","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/setSessionSingleton.js":"var getSessionContext = require('./getSessionContext');\n\nmodule.exports = function(name, value) {\n\tgetSessionContext()[name] = value;\n};","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commit.js":"var commitCommand = require('./commands/commitCommand');\nvar pushCommand = require('./commands/pushCommand');\nvar executeChanges = require('./executeQueries/executeChanges');\nvar releaseDbClient = require('./releaseDbClient');\nvar popChanges = require('./popChanges');\n\nfunction commit() {\n\tpushCommand(commitCommand);\n\tvar changes = popChanges();\n\treturn executeChanges(changes).then(releaseDbClient);\n}\n\nmodule.exports = commit;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/commitCommand.js":"var newParameterized = require('../query/newParameterized');\n\nvar command = newParameterized('COMMIT');\nfunction empty() {}\n\ncommand.endEdit = empty;\ncommand.matches = empty;\n\nmodule.exports = command;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/pushCommand.js":"var getChangeSet = require('./getChangeSet');\nvar notifyDirty = require('../notifyDirty');\nvar negotiateEndEdit = require('./negotiateEndEdit');\n\nfunction pushCommand(command) {\n\tnotifyDirty();\n\tvar changes = getChangeSet();\n\tnegotiateEndEdit(changes);\n\tchanges.push(command);\n}\n\nmodule.exports = pushCommand;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/getChangeSet.js":"var getSessionSingleton = require('../getSessionSingleton');\nfunction getChangeSet() {\n\treturn getSessionSingleton('changes');\n}\n\nmodule.exports = getChangeSet;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/notifyDirty.js":"var setSessionSingleton = require('./setSessionSingleton');\nmodule.exports = setSessionSingleton.bind(null, 'isDirty', true);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/negotiateEndEdit.js":"function negotiateEndEdit(changes) {\n\tvar last = changes[changes.length - 1];\n\tif (last && last.endEdit) \n\t\tlast.endEdit();\n}\t\n\nmodule.exports = negotiateEndEdit;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/executeQueries/executeChanges.js":"var executeQuery = require('./executeQuery');\nvar newPromise = require('../promise');\n\nfunction executeChanges(queries) {\n\tif (queries.length === 0)\n\t\treturn newPromise();\n\tvar i = -1;\n\treturn execute();\n\n\n\tfunction execute() {\n\t\ti++;\n\t\tif (i+1 == queries.length )\n\t\t\treturn executeQuery(queries[i]);\n\t\telse {\n\t\t\treturn executeQuery(queries[i]).then(execute);\n\t\t}\n\t\t\t\n\t}\n\t\n}\n\nmodule.exports = executeChanges;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/releaseDbClient.js":"var getSessionSingleton = require('./getSessionSingleton');\nvar deleteSessionContext = require('./deleteSessionContext')\n\nfunction release() {\n\tvar done = getSessionSingleton('dbClientDone');\n\tdeleteSessionContext();\n\tif (done)\n\t\tdone();\n}\n\nmodule.exports = release;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/deleteSessionContext.js":"function deleteContext() {\n\tdelete process.domain.rdb;\n}\n\nmodule.exports = deleteContext;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/popChanges.js":"var getChangeSet = require('./commands/getChangeSet');\nvar compressChanges = require('./commands/compressChanges');\n\nfunction popChanges() {\t\n\tvar changeSet = getChangeSet();\n\tvar length = changeSet.length;\n\tif (length > 0) {\n\t\tvar lastCmd = changeSet[length-1];\n\t\tif (lastCmd.endEdit)\n\t\t\tlastCmd.endEdit();\n\t\tvar compressed = compressChanges(changeSet);\n\t\tchangeSet.length = 0;\n\t\treturn compressed;\n\t}\n\treturn changeSet;\n\n}\n\nmodule.exports = popChanges;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/compressChanges.js":"var newParameterized = require('../query/newParameterized');\nvar getSessionSingleton = require('../getSessionSingleton');\n\nfunction compress(queries) {\n\tvar multipleStatements = getSessionSingleton('multipleStatements');\n\tvar compressed = [];\n\tvar queryCount = queries.length;\n\tvar lastIndex = queryCount-1;\n\t\n\tfor (var i = 0; i < queryCount; i++) {\n\t\tvar current = queries[i];\n\t\tif (multipleStatements && current.parameters.length === 0) {\n\t\t\tfor (var i2 = i+1; i2 < queryCount; i2++) {\n\t\t\t\tvar next = queries[i2];\n\t\t\t\tif (next.parameters.length > 0)\n\t\t\t\t\tbreak;\n\t\t\t\tcurrent = newParameterized(current.sql() + ';' + next.sql());\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\tcompressed.push(current);\n\t}\n\treturn compressed;\n}\n\nmodule.exports = compress;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/rollback.js":"var rollbackCommand = require('./commands/rollbackCommand');\nvar executeQuery = require('./executeQueries/executeQuery');\nvar releaseDbClient = require('./releaseDbClient');\nvar popChanges = require('./popChanges');\nvar newThrow = require('./newThrow');\nvar resultToPromise = require('./resultToPromise');\n\nfunction rollback(e) {\n    var executeRollback = executeQuery.bind(null, rollbackCommand);\n    var chain = resultToPromise()\n        \t\t\t.then(popChanges)\n        \t\t\t.then(executeRollback)\n        \t\t\t.then(releaseDbClient);\n\n    if (e)\n        return newThrow(e, chain);\n    return chain;\n}\n\nmodule.exports = rollback;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/rollbackCommand.js":"var newParameterized = require('../query/newParameterized');\n\nvar command = newParameterized('ROLLBACK');\nfunction empty() {}\n\ncommand.endEdit = empty;\ncommand.matches = empty;\n\nmodule.exports = command;\n\n\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newThrow.js":"var tryReleaseDbClient = require('./tryReleaseDbClient');\n\nfunction newThrow(e, previousPromise) {\n\treturn previousPromise.then(throwError, throwError);\n\tfunction throwError() {\n\t\ttryReleaseDbClient();\n\t\tthrow e;\n\t}\n}\n\nmodule.exports = newThrow;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/tryReleaseDbClient.js":"var release = require('./releaseDbClient');\n\nfunction tryReleaseDbClient() {\n    try {\n        release();\n    } \n    catch (e) {\n\n    }\n\n}\n\nmodule.exports = tryReleaseDbClient;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/resultToPromise.js":"\nvar deferred = require('deferred');\n\nfunction resultToPromise(result) {\n\treturn deferred.resolve(result);\n}\n\nmodule.exports = resultToPromise;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/newPool.js":"var pools = require('../pools');\nvar promise = require('../table/promise');\nvar end = require('./pool/end');\nvar newPgPool = require('./pool/newPgPool');\nvar newId = require('../newId');\n\nfunction newPool(connectionString, poolOptions) {\n\tvar pool = newPgPool(connectionString, poolOptions);\n\tvar id = newId();\n\tvar boundEnd = end.bind(null, pool, id);\n\tvar c = {};\n\n\tc.connect = pool.connect;\n\tc.end = promise.denodeify(boundEnd);\n\tpools[id] = c;\n\treturn c;\n}\n\nmodule.exports = newPool;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pools.js":"var promise = require('./table/promise');\nvar pools = require('./newObject')();\n\nObject.defineProperty(pools, 'end', {\n    enumerable: false,\n    value: end\n});\n\nfunction end() {\n    var all = [];\n    for (var poolId in pools) {\n    \tvar endPool = pools[poolId].end();\n    \tall.push(endPool);\n    }\n    return promise.all(all);\n}\n\nmodule.exports = pools;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/newObject.js":"function newObject() {\n\treturn {};\n}\n\nmodule.exports = newObject;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/pool/end.js":"var pools = require('../../pools');\n\nfunction endPool(pgPool, id, done) {\t\n    pgPool.drain(onDrained);\n\n    function onDrained() {\n        pgPool.destroyAllNow();\n        delete pools[id];\n        done();\n    }\n}\n\nmodule.exports = endPool;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/pool/newPgPool.js":"//slightly modified code from github.com/brianc/node-postgres\nvar EventEmitter = require('events').EventEmitter;\n\nvar defaults = require('./defaults');\nvar genericPool = require('generic-pool');\nvar pg = require('pg');\n\nfunction newPgPool(connectionString, poolOptions) {\n    poolOptions = poolOptions || {};\n    var pool = genericPool.Pool({\n      max: poolOptions.size || poolOptions.poolSize || defaults.poolSize,\n      idleTimeoutMillis: poolOptions.idleTimeout || defaults.poolIdleTimeout,\n      reapIntervalMillis: poolOptions.reapIntervalMillis || defaults.reapIntervalMillis,\n      log: poolOptions.log || defaults.poolLog,\n      create: function(cb) {\n        var client = new pg.Client(connectionString);\n        client.connect(function(err) {\n          if(err) return cb(err, null);\n\n          //handle connected client background errors by emitting event\n          //via the pg object and then removing errored client from the pool\n          client.on('error', function(e) {\n            pool.emit('error', e, client);\n\n            // If the client is already being destroyed, the error\n            // occurred during stream ending. Do not attempt to destroy\n            // the client again.\n            if (!client._destroying) {\n              pool.destroy(client);\n            }\n          });\n\n          // Remove connection from pool on disconnect\n          client.on('end', function(e) {\n            // Do not enter infinite loop between pool.destroy\n            // and client 'end' event...\n            if ( ! client._destroying ) {\n              pool.destroy(client);\n            }\n          });\n          client.poolCount = 0;\n          return cb(null, client);\n        });\n      },\n      destroy: function(client) {\n        client._destroying = true;\n        client.poolCount = undefined;\n        client.end();\n      }\n    });\n    //mixin EventEmitter to pool\n    EventEmitter.call(pool);\n    for(var key in EventEmitter.prototype) {\n      if(EventEmitter.prototype.hasOwnProperty(key)) {\n        pool[key] = EventEmitter.prototype[key];\n      }\n    }\n    //monkey-patch with connect method\n    pool.connect = function(cb) {\n      var domain = process.domain;\n      pool.acquire(function(err, client) {\n        if(domain) {\n          cb = domain.bind(cb);\n        }\n        if(err)  return cb(err, null, function() {/*NOOP*/});\n        client.poolCount++;\n        cb(null, client, function(err) {\n          if(err) {\n            pool.destroy(client);\n          } else {\n            pool.release(client);\n          }\n        });\n      });\n    };\n    return pool;\n}\n\nmodule.exports = newPgPool;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/pool/defaults.js":"var defaults = module.exports = {\n  // database host defaults to localhost\n  host: 'localhost',\n\n  //database user's name\n  user: process.platform === 'win32' ? process.env.USERNAME : process.env.USER,\n\n  //name of database to connect\n  database: process.platform === 'win32' ? process.env.USERNAME : process.env.USER,\n\n  //database user's password\n  password: null,\n\n  //database port\n  port: 5432,\n\n  //number of rows to return at a time from a prepared statement's\n  //portal. 0 will return all rows at once\n  rows: 0,\n\n  // binary result mode\n  binary: false,\n\n  //Connection pool options - see https://github.com/coopernurse/node-pool\n  //number of connections to use in connection pool\n  //0 will disable connection pooling\n  poolSize: 10,\n\n  //max milliseconds a client can go unused before it is removed\n  //from the pool and destroyed\n  poolIdleTimeout: 30000,\n\n  //frequeny to check for idle clients within the client pool\n  reapIntervalMillis: 1000,\n\n  //pool log function / boolean\n  poolLog: false,\n\n  client_encoding: \"\",\n\n  ssl: false,\n\n  application_name : undefined,\n  fallback_application_name: undefined\n};","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/newId.js":"module.exports = require('uuid').v4;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/lock.js":"var query = require('./query');\nvar toIntKey = require('./lock/toIntKey');\n\nfunction lock(key) {\n    key = toIntKey(key);\n    var sql = 'SELECT pg_advisory_xact_lock(' + key + ')';\n    return query(sql);\n}\n\nmodule.exports = lock;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/query.js":"var executeQueries = require('./table/executeQueries');\nvar wrapQuery = require('./query/wrapQuery');\n\nfunction doQuery(query) {\n\tvar wrappedQuery = wrapQuery(query);\n\treturn executeQueries([wrappedQuery]).then(unwrapResult);\n}\n\nfunction unwrapResult(results) {\n\treturn results[0];\n}\n\nmodule.exports = doQuery;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/executeQueries.js":"var executeChanges = require('./executeQueries/executeChanges');\nvar popChanges = require('./popChanges');\nvar executeQueriesCore = require('./executeQueries/executeQueriesCore');\nvar newParameterized = require('./query/newParameterized');\nvar getSessionSingleton = require('./getSessionSingleton');\n\nfunction executeQueries(queries) {\n\tvar changes = popChanges();\n\tvar lastChange = changes[changes.length-1];\n\tvar query = queries[0];\n\tvar multipleStatements = getSessionSingleton('multipleStatements');\n\tif (multipleStatements && lastChange && lastChange.parameters.length===0  && query.parameters.length===0) {\n\t\tchanges.pop();\n\t\tqueries[0] = newParameterized( lastChange.sql() +  ';' + query.sql(), []);\n\t}\n\n\treturn executeChanges(changes).then(onDoneChanges); \n\n\tfunction onDoneChanges() {\n\t\treturn executeQueriesCore(queries);\n\t}\n}\n\nmodule.exports = executeQueries;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/executeQueries/executeQueriesCore.js":"var executeQuery = require('./executeQuery');\n\nfunction executeQueriesCore(queries) {\n\tvar promises = [];\n\tfor (var i = 0; i < queries.length; i++) {\n\t\tvar q = executeQuery(queries[i]);\n\t\tpromises.push(q);\n\t}\n\treturn promises;\n}\n\nmodule.exports = executeQueriesCore;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/query/wrapQuery.js":"var negotiateSql = require('./negotiateSql');\nvar negotiateParameters = require('./negotiateParameters');\n\nfunction wrapQuery(query) {\n\tvar safeSql = negotiateSql(query);\n\tvar safeParameters = negotiateParameters(query.parameters);\n\treturn {\n\t\tsql: safeSql,\n\t\tparameters: safeParameters\n\t};\n}\n\nmodule.exports = wrapQuery;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/query/negotiateSql.js":"function negotiateSql(query) {\n\tif(typeof(query) === 'string')\n\t\treturn function() { return query; };\n\n\tvar sql = query.sql;\n\tif(typeof(sql) === 'function')\n\t\treturn sql;\n\telse if(typeof(sql) === 'string')\n\t\treturn function() { return sql; };\n\telse\n\t\tthrow new Error('Query lacks sql property string or function');\n}\n\nmodule.exports = negotiateSql;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/query/negotiateParameters.js":"function negotiateParameters(parameters) {\n\tif(parameters === undefined)\n\t\treturn [];\n\telse if(parameters.length !== undefined)\n\t\treturn parameters;\n\telse\n\t\tthrow new Error('Query has invalid parameters property. Must be undefined or array');\n}\n\nmodule.exports = negotiateParameters;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/lock/toIntKey.js":"function toIntKey(key) {\n    if (isInteger())\n        return key;\n    if (isIntegerString())\n        return trim(key);\n    var intKey = '';\n    for (var i = 0; i < key.length; ++i) {\n        var value = key[i].toUpperCase();\n        value = parseInt(value, 16);\n        if (!isNaN(value))\n            intKey += value;\n    }\n\n    return trim(intKey);\n\n    function isIntegerString() {\n        var pattern = /^-?\\d+\\.?\\d*$/\n        var reg = new RegExp(pattern);\n        return (typeof key == 'string' && reg.test(key));\n    }\n\n    function isInteger() {\n        return (typeof key == 'number') && (Math.floor(key) === key);\n    }\n\n    function trim(value) {\n        var maxBigInt = '9223372036854775807';\n        value = value.substring(0, 19);\n        if (value > maxBigInt) \n            return value.substring(0,18);\n        return value;\n    }\n}\n\nmodule.exports = toIntKey;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/newDatabase.js":"var createDomain = require('../createDomain');\nvar newTransaction = require('./newTransaction');\nvar newPromise = require('../table/promise');\nvar begin = require('../table/begin');\nvar newPool = require('./newPool');\nvar commit = require('../table/commit');\nvar rollback = require('../table/rollback');\nvar lock = require('../lock');\n\nfunction newDatabase(connectionString, poolOptions) {\n    var c = {};\n    var pool = newPool(connectionString, poolOptions);\n\n    c.transaction = function() {\n        var domain = createDomain();\n        return domain.run(onRun);\n\n        function onRun() {\n            var transaction = newTransaction(domain, pool);\n            return newPromise(transaction).then(begin);\n        }\n    };\n\n    c.commit = commit;\n    c.rollback = rollback;\n    c.lock = lock;\n    \n    c.end = function() {\n        return pool.end();\n    };\n\n    c.accept = function(caller) {\n        caller.visitMySql();\n    };\n\n    return c;\n}\n\nmodule.exports = newDatabase;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/newTransaction.js":"var wrapQuery = require('./wrapQuery');\nvar wrapQueryStream = require('./wrapQueryStream');\nvar deleteFromSql = require('./deleteFromSql');\nvar selectForUpdateSql = require('./selectForUpdateSql');\nvar encodeDate = require('./encodeDate');\n\nfunction newResolveTransaction(domain, pool) {\n\n    return function(onSuccess, onError) {\n        pool.connect(onConnected);\n\n        function onConnected(err, connection) {\n            if (err) {\n                onError(err);\n                return;\n            }\n            var rdb = {};\n            connection.executeQuery = wrapQuery(connection);\n            connection.streamQuery = wrapQueryStream(connection);\n\n            rdb.dbClient = connection;\n            rdb.dbClientDone = connection.release.bind(connection);\n            rdb.encodeBoolean = connection.escape.bind(connection);\n            rdb.encodeDate = encodeDate;\n            rdb.deleteFromSql = deleteFromSql;\n            rdb.selectForUpdateSql = selectForUpdateSql;\n            rdb.multipleStatements = true;\n            domain.rdb = rdb;    \n            onSuccess();\n        }\n    };\n}\n\nmodule.exports = newResolveTransaction;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/wrapQuery.js":"var log = require('../table/log');\n\nfunction wrapQuery(connection) {\n\tvar runOriginalQuery = connection.query;\n\treturn runQuery;\n\n\tfunction runQuery(query, onCompleted) {\n\t\tvar params = query.parameters;\n\t\tvar sql = query.sql();\n\t\tlog(sql);\n\t\tlog('parameters: ' + params);\n\t\treturn runOriginalQuery.call(connection, sql, params, onCompleted);\n\t}\n\n}\n\nmodule.exports = wrapQuery;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/wrapQueryStream.js":"var log = require('../table/log');\n\nfunction wrapQueryStream(connection) {\n\tvar runOriginalQuery = connection.query;\n\treturn runQuery;\n\n\tfunction runQuery(query, options) {\n\t\treturn connection.executeQuery(query).stream(options);\t\n\t}\n}\n\nmodule.exports = wrapQueryStream;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/deleteFromSql.js":"var format = 'delete %s from %s as %s%s';\nvar util = require('util');\n\nfunction deleteFromSql(table, alias, whereSql) {\n    var name = table._dbName;\n    return util.format(format, alias, name, alias, whereSql);\n}\nmodule.exports = deleteFromSql;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/selectForUpdateSql.js":"module.exports = function(alias) {\n\treturn ' FOR UPDATE';\n}","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/encodeDate.js":"function encodeDate (date) {\n\tif (date.toISOString)\n\t\treturn truncate(date.toISOString());\n\treturn truncate(date);\n}\nfunction truncate(date) {\n\treturn \"'\" + date.substring(0,23) + \"'\"\n}\n\nmodule.exports = encodeDate;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/newPool.js":"var pools = require('../pools');\nvar promise = require('../table/promise');\nvar end = require('./pool/end');\nvar mysql = require('mysql');\nvar newId = require('../newId');\nvar negotiatePoolOptions = require('./pool/negotiatePoolOptions');\n\nfunction newPool(connectionString, poolOptions) {\n\tvar pool = mysql.createPool(connectionString);\n\tnegotiatePoolOptions(pool, poolOptions);\n\tvar id = newId();\n\tvar boundEnd = end.bind(null, pool, id);\n\tvar c = {};\n\n\tc.connect = pool.getConnection.bind(pool);\n\tc.end = promise.denodeify(boundEnd);\n\tpools[id] = c;\n\treturn c;\n}\n\nmodule.exports = newPool;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/pool/end.js":"var pools = require('../../pools');\n\nfunction endPool(mysqlPool, id, done) {\t\n    mysqlPool.end(onEnd);\n\n    function onEnd() {\n        delete pools[id];\n        done.apply(null, arguments);\n    }\n}\n\nmodule.exports = endPool;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/pool/negotiatePoolOptions.js":"function negotiatePoolOptions(pool, options) {\n\tvar config = pool.config;\n\tfor(var name in options) {\n\t\tvar value = options[name];\n\t\tif (name === 'size')\n\t\t\tconfig.connectionLimit = value;\n\t\telse\n\t\t\tconfig[name] = value;\n\t}\n}\n\nmodule.exports = negotiatePoolOptions;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/sqlite/newDatabase.js":"var createDomain = require('../createDomain');\nvar newTransaction = require('./newTransaction');\nvar promise = require('../table/promise');\nvar begin = require('../table/begin');\nvar commit = require('../table/commit');\nvar rollback = require('../table/rollback');\nvar newPool = require('./newPool');\n\nfunction newDatabase(connectionString, poolOptions) {\n    var pool = newPool(connectionString, poolOptions);\n    var c = {};\n\n    c.transaction = function() {\n        var domain = createDomain();\n\n        return domain.run(onRun);\n\n        function onRun() {\n            var transaction = newTransaction(domain, pool);\n            var p = promise(transaction).then(begin);\n            return p;\n        }\n    };\n\n    c.rollback = rollback;\n    c.commit = commit;\n\n    c.end = function() {\n        return pool.end();\n    };\n\n    c.accept = function(caller) {\n        caller.visitSqlite();\n    };\n\n\n    return c;\n}\n\nmodule.exports = newDatabase;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/sqlite/newTransaction.js":"var wrapQuery = require('./wrapQuery');\nvar wrapQueryStream = require('./wrapQueryStream');\nvar encodeBoolean = require('./encodeBoolean');\nvar encodeDate = require('./encodeDate');\nvar deleteFromSql = require('./deleteFromSql');\nvar selectForUpdateSql = require('./selectForUpdateSql');\n\nfunction newResolveTransaction(domain, pool) {\n\n    return function(onSuccess, onError) {\n        pool.connect(onConnected);\n\n        function onConnected(err, client, done) {\n            if (err) {\n                onError(err);\n                return;\n            }\n            var rdb = {};\n            client.executeQuery = wrapQuery(client);            \n            client.streamQuery = wrapQueryStream(client);            \n            rdb.dbClient = client;\n            rdb.dbClientDone = done;\n            rdb.encodeBoolean = encodeBoolean;\n            rdb.encodeDate = encodeDate;\n            rdb.deleteFromSql = deleteFromSql;\n            rdb.selectForUpdateSql = selectForUpdateSql;\n            rdb.multipleStatements = false;\n            domain.rdb = rdb;    \n            onSuccess();\n        }\n    };\n}\n\nmodule.exports = newResolveTransaction;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/sqlite/wrapQuery.js":"var log = require('../table/log');\n\nfunction wrapQuery(connection) {\n\tvar runOriginalQuery = connection.all;\n\treturn runQuery;\n\n\tfunction runQuery(query, onCompleted) {\n\t\tvar params = query.parameters;\n\t\tvar sql = query.sql();\n\t\tlog(sql);\n\t\tlog('parameters: ' + params);\n\n\t\trunOriginalQuery.call(connection, sql, params, onInnerCompleted);\n\n\t\tfunction onInnerCompleted(err, rows) {\n\t\t\tif (err) \n\t\t\t\tonCompleted(err);\n\t\t\telse\n\t\t\t\tonCompleted(null, rows);\n\t\t}\n\t}\n\n}\n\nmodule.exports = wrapQuery;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/sqlite/wrapQueryStream.js":"var log = require('../table/log');\nvar newStreamableQuery = require('./newStreamableQuery');\n\nfunction wrapQueryStream(connection) {\n\tvar runOriginalQuery = connection.query;\n\treturn runQuery;\n\n\tfunction runQuery(query, options) {\n\t\tvar params = query.parameters;\n\t\tvar sql = query.sql();\n\t\tlog(sql);\n\t\tlog('parameters: ' + params);\n\t\tquery = newStreamableQuery(sql, params, options);\n\n\t\treturn runOriginalQuery.call(connection, query);\n\t}\n\n}\n\nmodule.exports = wrapQueryStream;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/sqlite/newStreamableQuery.js":"var QueryStream = require('pg-query-stream');\n\nmodule.exports = function (sql, params) {\n\treturn new QueryStream(sql, params);\n}","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/sqlite/encodeBoolean.js":"function encodeBoolean(bool) {\n\tif (bool)\n\t\treturn 1;\n\treturn 0;\n}\n\nmodule.exports = encodeBoolean;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/sqlite/encodeDate.js":"function encodeDate (date) {\n\tif (date.toISOString)\n\t\treturn  \"'\" + date.toISOString() + \"'\";\n\treturn \"'\" + date + \"'\";\n}\n\nmodule.exports = encodeDate;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/sqlite/deleteFromSql.js":"var format = 'delete from %s where %s.rowId in (SELECT %s.rowId FROM %s %s%s)'; \nvar util = require('util');\n\nfunction deleteFromSql(table, alias, whereSql) {\n    var name = table._dbName;\n    return util.format(format, name, name, alias, name, alias, whereSql);\n}\nmodule.exports = deleteFromSql;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/sqlite/selectForUpdateSql.js":"module.exports = function(alias) {\n\treturn ' FOR UPDATE OF ' + alias;\n}","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/sqlite/newPool.js":"var pools = require('../pools');\nvar promise = require('../table/promise');\nvar end = require('./pool/end');\nvar newGenericPool = require('./pool/newGenericPool');\nvar newId = require('../newId');\n\nfunction newPool(connectionString, poolOptions) {\n\tvar pool = newGenericPool(connectionString, poolOptions);\n\tvar id = newId();\n\tvar boundEnd = end.bind(null, pool, id);\n\tvar c = {};\n\n\tc.connect = pool.connect;\n\tc.end = promise.denodeify(boundEnd);\n\tpools[id] = c;\n\treturn c;\n}\n\nmodule.exports = newPool;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/sqlite/pool/end.js":"var pools = require('../../pools');\n\nfunction endPool(genericPool, id, done) {\t\n    genericPool.drain(onDrained);\n\n    function onDrained() {\n        genericPool.destroyAllNow();\n        delete pools[id];\n        done();\n    }\n}\n\nmodule.exports = endPool;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/sqlite/pool/newGenericPool.js":"var EventEmitter = require('events').EventEmitter;\n\nvar defaults = require('./defaults');\nvar genericPool = require('generic-pool');\nvar sqlite = require('sqlite3');\n\nfunction newGenericPool(connectionString, poolOptions) {\n    poolOptions = poolOptions || {};\n    var pool = genericPool.Pool({\n      max: poolOptions.size || poolOptions.poolSize || defaults.poolSize,\n      idleTimeoutMillis: poolOptions.idleTimeout || defaults.poolIdleTimeout,\n      reapIntervalMillis: poolOptions.reapIntervalMillis || defaults.reapIntervalMillis,\n      log: poolOptions.log || defaults.poolLog,\n      create: function(cb) {\n        var client = new sqlite.Database(connectionString, onConnected);\n\n        function onConnected(err) {\n          if(err) \n            return cb(err, null);\n          client.poolCount = 0;\n          return cb(null, client);\n        }\n      },\n\n      destroy: function(client) {\n        client.poolCount = undefined;\n        client.close();\n      }\n    });\n    //mixin EventEmitter to pool\n    EventEmitter.call(pool);\n    for(var key in EventEmitter.prototype) {\n      if(EventEmitter.prototype.hasOwnProperty(key)) {\n        pool[key] = EventEmitter.prototype[key];\n      }\n    }\n    //monkey-patch with connect method\n    pool.connect = function(cb) {\n      var domain = process.domain;\n      pool.acquire(function(err, client) {\n        if(domain) {\n          cb = domain.bind(cb);\n        }\n        if(err)  return cb(err, null, function() {/*NOOP*/});\n        client.poolCount++;\n        cb(null, client, function(err) {\n          if(err) {\n            pool.destroy(client);\n          } else {\n            pool.release(client);\n          }\n        });\n      });\n    };\n    return pool;\n}\n\nmodule.exports = newGenericPool;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/sqlite/pool/defaults.js":"var defaults = module.exports = {\n  // database host defaults to localhost\n  host: 'localhost',\n\n  //database user's name\n  user: process.platform === 'win32' ? process.env.USERNAME : process.env.USER,\n\n  //name of database to connect\n  database: process.platform === 'win32' ? process.env.USERNAME : process.env.USER,\n\n  //database user's password\n  password: null,\n\n  //database port\n  port: 5432,\n\n  //number of rows to return at a time from a prepared statement's\n  //portal. 0 will return all rows at once\n  rows: 0,\n\n  // binary result mode\n  binary: false,\n\n  //Connection pool options - see https://github.com/coopernurse/node-pool\n  //number of connections to use in connection pool\n  //0 will disable connection pooling\n  poolSize: 10,\n\n  //max milliseconds a client can go unused before it is removed\n  //from the pool and destroyed\n  poolIdleTimeout: 30000,\n\n  //frequeny to check for idle clients within the client pool\n  reapIntervalMillis: 1000,\n\n  //pool log function / boolean\n  poolLog: false,\n\n  client_encoding: \"\",\n\n  ssl: false,\n\n  application_name : undefined,\n  fallback_application_name: undefined\n};","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emitEvent.js":"function emitEvent() {\n\tvar callbacks = [];\n\tvar emit = function() {\n\t\t\n\t\tvar copy = callbacks.slice(0, callbacks.length);\n\t\tfor (var i = 0; i < copy.length; i++) {\n\t\t\tvar callback = copy[i];\n\t\t\tcallback.apply(null,arguments);\n\t\t}\n\t};\n\n\temit.add = function(callback) {\n\t\tcallbacks.push(callback);\n\t};\n\n\temit.tryAdd = function(callback) {\n\t\tif (callback)\n\t\t\temit.add(callback);\n\t};\t\n\n\temit.remove = function(callback) {\n\t\tfor (var i = 0; i < callbacks.length; i++) {\t\t\t\n\t\t\tif(callbacks[i] == callback){\n\t\t\t\tcallbacks.splice(i,1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t};\n\n\temit.tryRemove = function(callback) {\n\t\tif(callback)\n\t\t\temit.remove(callback);\n\t};\n\n\temit.clear = function() {\n\t\tcallbacks = [];\n\t};\n\n\treturn emit;\n}\n\nmodule.exports = emitEvent;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emptyFilter.js":"var negotiateRawSqlFilter = require('./table/column/negotiateRawSqlFilter');\nvar parameterized = require('./table/query/newParameterized')('');\nfunction emptyFilter() {\n    return emptyFilter.and.apply(null, arguments);\n}\n\nemptyFilter.sql = parameterized.sql;\nemptyFilter.parameters = parameterized.parameters;\n\nemptyFilter.and = function(other) {\n    other = negotiateRawSqlFilter(other);\n    for (var i = 1; i < arguments.length; i++) {\n        other = other.and(arguments[i]);\n    }\n    return other;\n};\n\nemptyFilter.or = function(other) {\n    other = negotiateRawSqlFilter(other);\n    for (var i = 1; i < arguments.length; i++) {\n        other = other.or(arguments[i]);\n    }\n    return other;\n};\n\nemptyFilter.not = function() {\n    return emptyFilter;\n};\n\nmodule.exports = emptyFilter;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/negotiateRawSqlFilter.js":"var newParameterized = function() {\n    newParameterized = require('../query/newParameterized');\n    return newParameterized.apply(null, arguments);\n};\n\nvar newBoolean = function() {\n    newBoolean = require('./newBoolean');\n    return newBoolean.apply(null, arguments);\n};\n\nfunction negotiateRawSqlFilter(filter) {\n    var params = [];\n    if (filter) {\n        if (filter.and)\n            return filter;\n        if (filter.sql) {\n            var sql = filter.sql;\n            if (typeof filter.sql == 'function') {                \n                sql = filter.sql();\n            }\n            params.push(sql, filter.parameters);\n        }\n        else\n            params = [filter];\n    } else {\n        params = [filter];\n    }\n\n    var parameterized = newParameterized.apply(null, params);\n    return newBoolean(parameterized);\n}\n\nmodule.exports = negotiateRawSqlFilter;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/newArray.js":"module.exports = function() {\n\treturn [];\n};","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/newCollection.js":"function newCollection() {\n    var c = {};\n    var initialArgs = [];\n    for (var i = 0; i < arguments.length; i++) {\n        initialArgs.push(arguments[i]);\n    }\n    var ranges = [initialArgs];\n\n    c.addRange = function(otherCollection) {\n        ranges.push(otherCollection);\n    };\n\n    c.add = function(element) {\n        c.addRange([element]);\n    };\n\n    c.toArray = function(element) {\n        var result = [];\n        c.forEach(onEach);\n        return result;\n\n        function onEach(element) {\n            result.push(element);\n        }\n    };\n\n    c.forEach = function(callback) {\n        var index = 0;\n        for (var i = 0; i < ranges.length; i++) {\n            ranges[i].forEach(onEach);\n        }\n\n        function onEach(element) {\n            callback(element, index);\n            index++;\n        }\n\n    };\n\n    Object.defineProperty(c, 'length', {\n        enumerable: false,\n        get: function() {\n        \tvar result = 0;\n        \tfor (var i = 0; i < ranges.length; i++) {\n        \t\tresult += ranges[i].length;\n        \t}\n            return result;\n        },\n    });\n\n\n    return c;\n}\n\nmodule.exports = newCollection;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/newImmutable.js":"function newImmutable(fn) {\n\tvar result;\n\tvar _run = runFirst;\n\treturn run;\n\n\tfunction run() {\t\n\t\tvar args = [].slice.call(arguments);\t\n\t\treturn _run(args);\n\t}\n\n\tfunction runFirst(args) {\n\t\tresult =  fn.apply(null, args);\n\t\t_run = runNIgnoreArgs;\n\t\treturn result;\n\t}\n\n\tfunction runNIgnoreArgs() {\n\t\treturn result;\n\t}\n}\n\nmodule.exports = newImmutable;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table.js":"var newColumn = require('./table/column/newColumn');\nvar column = require('./table/column');\nvar join = require('./table/join');\nvar hasMany = require('./table/hasMany');\nvar hasOne = require('./table/hasOne');\nvar getMany = require('./table/getMany');\nvar getById = require('./table/getById');\nvar tryGetById = require('./table/tryGetById');\nvar tryGetFirst = require('./table/tryGetFirstFromDb');\nvar newCache = require('./table/newRowCache');\nvar newContext = require('./newObject');\nvar insert = require('./table/insert');\nvar _delete = require('./table/delete');\nvar cascadeDelete = require('./table/cascadeDelete');\nvar createReadStream = require('./table/createReadStream');\nvar createJSONReadStream = require('./table/createJSONReadStream');\n\nfunction _new(tableName) {\n    var table = newContext();\n    table._dbName = tableName;\n    table._primaryColumns = [];\n    table._columns = [];\n    table._columnDiscriminators = [];\n    table._formulaDiscriminators = [];\n    table._relations = {};\n    table._cache = newCache(table);\n\n    table.primaryColumn = function(columnName) {\n        var columnDef = newColumn(table, columnName);\n        table._primaryColumns.push(columnDef);\n        return column(columnDef, table);\n    };\n\n    table.column = function(columnName) {\n        var columnDef = newColumn(table, columnName);\n        return column(columnDef, table);\n    };\n\n    table.join = function(relatedTable) {\n        return join(table, relatedTable);\n    };\n\n    table.hasMany = function(joinRelation) {\n        return hasMany(joinRelation);\n    };\n\n    table.hasOne = function(joinRelation) {\n        return hasOne(joinRelation);\n    };\n\n    table.getMany = function(filter, strategy) {\n        return getMany(table, filter, strategy);\n    };\n\n    table.getMany.exclusive = function(filter, strategy) {\n        return getMany.exclusive(table, filter, strategy);\n    };\n\n    table.tryGetFirst = function() {\n        return call(tryGetFirst, arguments);\n    };\n    table.tryGetFirst.exclusive = function() {\n        return call(tryGetFirst.exclusive, arguments);\n    };\n\n    function call(func, args) {\n        var mergedArgs = [table];\n        for (var i = 0; i < args.length; i++) {\n            mergedArgs.push(args[i]);\n        }\n        return func.apply(null, mergedArgs);\n    }\n\n    table.getById = function() {\n        return call(getById, arguments);\n    };\n    table.getById.exclusive = function() {\n        return call(getById.exclusive, arguments);\n    };\n\n\n    table.tryGetById = function() {\n        return call(tryGetById, arguments);\n    };\n\n    table.tryGetById.exclusive = function() {\n        return call(tryGetById.exclusive, arguments);\n    };\n\n    table.columnDiscriminators = function() {\n        for (var i = 0; i < arguments.length; i++) {\n            table._columnDiscriminators.push(arguments[i]);\n        }\n        return table;\n    };\n\n    table.formulaDiscriminators = function() {\n        for (var i = 0; i < arguments.length; i++) {\n            table._formulaDiscriminators.push(arguments[i]);\n        }\n        return table;\n    };\n\n    table.insert = function() {\n        return call(insert, arguments);\n    };\n\n    table.delete = _delete.bind(null, table);\n    table.cascadeDelete = cascadeDelete.bind(null, table);\n\n    table.createReadStream = createReadStream.bind(null, table);\n    table.createJSONReadStream = createJSONReadStream.bind(null, table);\n    table.exclusive = function() {\n        table._exclusive = true;\n        return table;\n    };\n    return table;\n}\n\nmodule.exports = _new;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/newColumn.js":"var equal = require('./equal');\nvar notEqual = require('./notEqual');\nvar lessThan = require('./lessThan');\nvar lessThanOrEqual = require('./lessThanOrEqual');\nvar greaterThan = require('./greaterThan');\nvar greaterThanOrEqual = require('./greaterThanOrEqual');\nvar _in = require('./in');\nvar _extractAlias = require('./extractAlias');\n\nmodule.exports = function(table,name) {\t\n\tvar c = {};\n\tvar extractAlias = _extractAlias.bind(null,table);\n\tc._dbName = name;\n\tc.alias = name;\t\n\tc.dbNull = null;\t\n\ttable._columns.push(c);\n\ttable[name] = c;\n\t\n\tc.equal = function(arg,alias) {\n\t\talias = extractAlias(alias);\n\t\treturn equal(c,arg, alias);\n\t};\n\n\tc.notEqual = function(arg,alias) {\n\t\talias = extractAlias(alias);\n\t\treturn notEqual(c,arg,alias);\n\t};\n\n\tc.lessThan = function(arg,alias) {\n\t\talias = extractAlias(alias);\n\t\treturn lessThan(c,arg,alias);\n\t};\n\n\tc.lessThanOrEqual = function(arg,alias) {\n\t\talias = extractAlias(alias);\n\t\treturn lessThanOrEqual(c,arg,alias);\n\t};\n\n\tc.greaterThan = function(arg,alias) {\n\t\talias = extractAlias(alias);\n\t\treturn greaterThan(c,arg,alias);\n\t};\n\n\tc.greaterThanOrEqual = function(arg,alias) {\n\t\talias = extractAlias(alias);\n\t\treturn greaterThanOrEqual(c,arg,alias);\n\t};\n\n\tc.between = function(from,to,alias) {\n\t\talias = extractAlias(alias);\n\t\tfrom = c.greaterThanOrEqual(from,alias);\n\t\tto = c.lessThanOrEqual(to,alias);\n\t\treturn from.and(to);\n\t};\n\n\tc.in = function(arg,alias) {\n\t\talias = extractAlias(alias);\n\t\treturn _in(c,arg,alias);\n\t};\n\n\tc.eq = c.equal;\n\tc.EQ = c.eq;\n\tc.ne = c.notEqual;\n\tc.NE = c.ne;\n\tc.gt = c.greaterThan;\n\tc.GT = c.gt;\n\tc.ge = c.greaterThanOrEqual;\n\tc.GE = c.ge;\n\tc.lt = c.lessThan;\n\tc.LT = c.lt;\n\tc.le = c.lessThanOrEqual;\n\tc.LE = c.le;\n\treturn c;\n};","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/equal.js":"var newBoolean = require('./newBoolean');\r\nvar nullOperator = ' is ';\r\nvar encodeFilterArg = require('./encodeFilterArg');\r\n\r\nfunction equal(column,arg,alias) {\t\r\n\tvar operator = '=';\r\n\tvar encoded = encodeFilterArg(column, arg);\r\n\tif (encoded.sql() == 'null') \r\n\t\toperator = nullOperator;\r\n\tvar firstPart = alias + '.' + column._dbName + operator;\r\n\tvar filter =  encoded.prepend(firstPart);\t\t\r\n\treturn newBoolean(filter);\r\n}\r\n\r\nmodule.exports = equal;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/newBoolean.js":"var nextNewBoolean = _nextNewBoolean;\nvar negotiateRawSqlFilter = require('./negotiateRawSqlFilter');\nvar negotiateNextAndFilter = require('./negotiateNextAndFilter');\nvar negotiateNextOrFilter = require('./negotiateNextOrFilter');\n\nfunction newBoolean(filter) {\n    var c = {};\n    c.sql = filter.sql.bind(filter);\n    c.parameters = filter.parameters;\n\n    c.append = function(other) {\n        var nextFilter = filter.append(other);\n        return nextNewBoolean(nextFilter);\n    };\n\n    c.prepend = function(other) {\n        var nextFilter = filter.prepend(other);\n        return nextNewBoolean(nextFilter);\n    };\n\n    c.and = function(other) {\n        other = negotiateRawSqlFilter(other);\n        var nextFilter = negotiateNextAndFilter(filter, other);\n        var next = nextNewBoolean(nextFilter);\n        for (var i = 1; i < arguments.length; i++) {\n            next = next.and(arguments[i]);\n        }\n        return next;\n    };\n\n    c.or = function(other) {\n        other = negotiateRawSqlFilter(other);\n        var nextFilter = negotiateNextOrFilter(filter, other);\n        var next = nextNewBoolean(nextFilter);\n        for (var i = 1; i < arguments.length; i++) {\n            next = next.or(arguments[i]);\n        }\n        return next;\n    };\n\n    c.not = function() {\n        var nextFilter = filter.prepend('NOT (').append(')');\n        return nextNewBoolean(nextFilter);\n    };\n\n    return c;\n}\n\nfunction _nextNewBoolean(filter) {\n    nextNewBoolean = require('./newBoolean');\n    return nextNewBoolean(filter);\n}\n\nmodule.exports = newBoolean;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/negotiateNextAndFilter.js":"function negotiateNextAndFilter(filter, other) {\t\t\n\tif (!other.sql())\n\t\treturn filter;\n\treturn filter.append(' AND ').append(other);\n}\n\nmodule.exports = negotiateNextAndFilter;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/negotiateNextOrFilter.js":"function negotiateNextOrFilter(filter, other) {\n\tif (!other.sql())\n\t\treturn filter;\n\treturn filter.prepend('(').append(' OR ').append(other).append(')');\n}\n\nmodule.exports = negotiateNextOrFilter;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/encodeFilterArg.js":"function encodeFilterArg (column, arg) {\n\tif (column.encode.safe)\n\t\treturn column.encode.safe(arg);\n\telse\n\t\treturn column.encode(arg);\n}\n\nmodule.exports = encodeFilterArg;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/notEqual.js":"var newBoolean = require('./newBoolean');\r\nvar encodeFilterArg = require('./encodeFilterArg');\r\nvar nullOperator = ' is not ';\r\n\r\nfunction notEqual(column,arg,alias) {\t\r\n\tvar operator = '<>';\r\n\tvar encoded = encodeFilterArg(column, arg);\r\n\tif (encoded.sql() == 'null') \r\n\t\toperator = nullOperator;\r\n\tvar firstPart = alias + '.' + column._dbName + operator;\r\n\tvar filter =  encoded.prepend(firstPart);\t\t\r\n\treturn newBoolean(filter);\r\n}\r\n\r\nmodule.exports = notEqual;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/lessThan.js":"var newBoolean = require('./newBoolean');\r\nvar encodeFilterArg = require('./encodeFilterArg');\r\n\r\nfunction lessThanOrEqual(column,arg,alias) {\t\r\n\tvar operator = '<';\r\n\tvar encoded = encodeFilterArg(column, arg);\r\n\tvar firstPart = alias + '.' + column._dbName + operator;\r\n\tvar filter = encoded.prepend(firstPart);\t\t\r\n\treturn newBoolean(filter);\r\n}\r\n\r\nmodule.exports = lessThanOrEqual;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/lessThanOrEqual.js":"var newBoolean = require('./newBoolean');\r\nvar encodeFilterArg = require('./encodeFilterArg');\r\n\r\nfunction lessThanOrEqual(column,arg,alias) {\t\r\n\tvar operator = '<=';\r\n\tvar encoded = encodeFilterArg(column, arg);\r\n\tvar firstPart = alias + '.' + column._dbName + operator;\r\n\tvar filter = encoded.prepend(firstPart);\t\t\r\n\treturn newBoolean(filter);\r\n}\r\n\r\nmodule.exports = lessThanOrEqual;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/greaterThan.js":"var newBoolean = require('./newBoolean');\r\nvar encodeFilterArg = require('./encodeFilterArg');\r\n\r\nfunction greaterThan(column,arg,alias) {\t\r\n\tvar operator = '>';\r\n\tvar encoded = encodeFilterArg(column, arg);\r\n\tvar firstPart = alias + '.' + column._dbName + operator;\t\r\n\tvar filter =  encoded.prepend(firstPart);\t\t\r\n\treturn newBoolean(filter);\r\n}\r\n\r\nmodule.exports = greaterThan;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/greaterThanOrEqual.js":"var newBoolean = require('./newBoolean');\r\nvar encodeFilterArg = require('./encodeFilterArg');\r\n\r\nfunction greaterThanOrEqual(column,arg,alias) {\t\r\n\tvar operator = '>=';\r\n\tvar encoded = encodeFilterArg(column, arg);\r\n\tvar firstPart = alias + '.' + column._dbName + operator;\r\n\tvar filter =  encoded.prepend(firstPart);\t\t\r\n\treturn newBoolean(filter);\r\n}\r\n\r\nmodule.exports = greaterThanOrEqual;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/in.js":"var newParameterized = require('../query/newParameterized');\r\nvar newBoolean = require('./newBoolean');\r\nvar encodeFilterArg = require('./encodeFilterArg');\r\n\r\nfunction _in(column,values,alias) {\r\n\tvar filter;\r\n\tif (values.length === 0) {\r\n\t\tfilter =  newParameterized('1=2');\r\n\t\treturn newBoolean(filter);\r\n\t}\r\n\tvar firstPart = alias + '.' + column._dbName + ' in '; \r\n\tvar parameterized = newParameterized(firstPart);\t\r\n\tvar separator = '(';\r\n\r\n\tfor (var i = 0; i < values.length; i++) {\r\n\t\tvar encoded = encodeFilterArg(column, values[i]);\r\n\t\tparameterized = parameterized.append(separator).append(encoded);\r\n\t\tseparator = ',';\t\t\r\n\t}\r\n\tfilter =  parameterized.append(')');\r\n\treturn newBoolean(filter);\r\n}\r\n\r\nmodule.exports = _in;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/extractAlias.js":"function extract(table, optionalAlias) {\n\tif (optionalAlias)\n\t\treturn optionalAlias;\n\treturn table._dbName;\n}\n\nmodule.exports = extract;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column.js":"function defineColumn(column, table) {\t\n\tvar c = {};\n\n\tc.string = function() {\n\t\trequire('./column/string')(table, column);\n\t\treturn c;\n\t};\n\n\tc.json = function() {\n\t\trequire('./column/json')(column);\n\t\treturn c;\n\t};\n\n\tc.guid = function() {\n\t\trequire('./column/guid')(column);\n\t\treturn c;\n\t};\n\n\tc.date = function() {\n\t\trequire('./column/date')(column);\n\t\treturn c;\n\t};\n\n\tc.numeric = function(optionalPrecision,optionalScale) {\n\t\trequire('./column/numeric')(column,optionalPrecision,optionalScale);\n\t\treturn c;\n\t};\n\n\tc.boolean = function() {\n\t\trequire('./column/boolean')(column);\n\t\treturn c;\n\t};\n\n\tc.binary = function() {\n\t\trequire('./column/binary')(column);\n\t\treturn c;\n\t};\n\n\tc.default = function(value) {\n\t\tcolumn.default = value;\n\t\treturn c;\n\t};\n\n\tc.as = function(alias) {\n\t\tvar oldAlias = column.alias;\n\t\tdelete table[oldAlias];\n\t\ttable[alias] = column;\n\t\tcolumn.alias = alias;\n\t\treturn c;\n\t};\n\n\tc.dbNull = function(value) {\n\t\tcolumn.dbNull = value;\n\t\treturn c;\n\t};\n\n\tc.serializable = function(value) {\n\t\tcolumn.serializable = value;\n\t\treturn c;\t\t\n\t};\n\n\treturn c;\n}\n\nmodule.exports = defineColumn;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/join.js":"var newJoinRelation = require('./newJoinRelation');\nvar newRelatedTable = require('./newRelatedTable');\n\nfunction newJoin(parentTable, childTable) {\n    var c = {};\n    var columnNames = [];\n\n    c.by = function() {\n        for (var i = 0; i < arguments.length; i++) {\n            verifyColumnExists(arguments[i]);\n            columnNames.push(arguments[i]);\n        }\n        return c;\n    };\n\n    function verifyColumnExists(columnName) {\n        var columns = parentTable._columns;\n        for (var i = 0; i < columns.length; i++) {\n            if (columns[i]._dbName === columnName)\n                return;\n\n        }\n        throw new Error('Unknown column: ' + columnName);\n    }\n\n    c.as = function(alias) {\n        var relation = newJoinRelation(parentTable, childTable, columnNames);\n        relation.leftAlias = alias;\n        parentTable._relations[alias] = relation;\n\n        Object.defineProperty(parentTable, alias, {\n            get: function() {\n                return newRelatedTable([relation]);\n            }\n        });\n\n        return relation;\n    };\n    return c;\n}\n\nmodule.exports = newJoin;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newJoinRelation.js":"var newLeg = require('./relation/newJoinLeg'),\n    getById = require('./getById'),\n    nullPromise = require('./nullPromise'),\n    newGetRelated = require('./newGetRelated'),\n    getRelatives = require('./joinRelation/getRelatives'),\n    tryGetFromCacheById = require('./tryGetFromCacheById');\n\nfunction _newJoin(parentTable, childTable, columnNames) {\n    var c = {};\n    c.parentTable = parentTable;\n    c.childTable = childTable;\n    c.columns = [];\n    var columns = parentTable._columns;\n    addColumns();\n\n    c.accept = function(visitor) {\n        visitor.visitJoin(c);\n    };\n\n    c.toLeg = function() {\n        return newLeg(c);\n    };\n\n    c.getFromDb = function(parent) {\n        var key = parentToKey(parent);\n        if (key.some(isNullOrUndefined)) {\n            return nullPromise;\n        }\n        var args = [childTable].concat(key);\n        return getById.apply(null, args);\n    };\n\n    c.getFromCache = c.getFromDb;\n\n    c.toGetRelated = function(parent) {\n        return newGetRelated(parent, c);\n    };\n\n    c.getRelatives = function(parent) {\n        return getRelatives(parent, c);\n    };\n\n    c.expand = function(parent) {\n        parent.expand(c.leftAlias);\n    };\n\n    c.getRowsSync = function(parent) {\n        var key = parentToKey(parent);\n\n        if (key.some(isNullOrUndefined)) {\n            return null;\n        }\n        var args = [childTable].concat(key);\n        return tryGetFromCacheById.apply(null, args);\n    };\n\n    return c;\n\n    function addColumns() {\n        var numberOfColumns = columnNames.length;\n        for (var i = 0; i < columns.length; i++) {\n            var curColumn = columns[i];\n            tryAdd(curColumn);\n            if (numberOfColumns === c.columns.length)\n                return;\n        }\n    }\n\n    function tryAdd(column) {\n        for (var i = 0; i < columnNames.length; i++) {\n            var name = columnNames[i];\n            if (column._dbName === name) {\n                c.columns.push(column);\n                return;\n            }\n        }\n    }\n\n    function isNullOrUndefined(item) {\n        return item === null || item === undefined;\n    }\n\n    function parentToKey(parent) {\n        var primaryKeys = c.columns.map(function(column) {\n            return parent[column.alias];\n        });\n        return primaryKeys;\n    }\n}\n\nmodule.exports = _newJoin;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/relation/newJoinLeg.js":"var newCollection = require('../../newCollection');\n\nfunction newLeg(relation) {\n\tvar c = {};\n\tvar span = {};\t\n\tspan.table = relation.childTable;\n\tspan.legs = newCollection();\n\tc.span = span;\n\tc.name = relation.leftAlias;\n\tc.table = relation.parentTable;\n\tc.columns = relation.columns;\n\tc.expand = relation.expand;\n\n\tc.accept = function(visitor) {\n\t\tvisitor.visitJoin(c);\n\t};\n\n\treturn c;\t\n}\n\nmodule.exports = newLeg;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/getById.js":" var tryGetFromCacheById = require('./tryGetFromCacheById');\n var getFromDbById = require('./getFromDbById');\n var resultToPromise = require('./resultToPromise');\n\nfunction getById() {\n\tvar cached =  tryGetFromCacheById.apply(null,arguments);\n\tif (cached)\n\t\treturn resultToPromise(cached);\n\treturn getFromDbById.apply(null,arguments);\n}\n\ngetById.exclusive = getFromDbById.exclusive;\n\nmodule.exports = getById;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/tryGetFromCacheById.js":"function tryGet(table, id, id2, optionalStrategy) {\n\tvar fakeRow = {};\n\tvar args = arguments;\n\ttable._primaryColumns.forEach(addPkValue);\n\n\tfunction addPkValue(pkColumn, index){\n\t\tfakeRow[pkColumn.alias] = args[index + 1];\n\t}\n\n\treturn table._cache.tryGet(fakeRow);\n}\nmodule.exports = tryGet;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/getFromDbById.js":"var tryGetFromDbById = require('./tryGetFromDbById');\n\nfunction get() {\n    return tryGetFromDbById.apply(null, arguments).then(onResult);\n\n    function onResult(row) {\n        if (row === null)\n            throw new Error(\"Row not found.\");\n        return row;\n    }\n}\n\nget.exclusive = function() {\n    return tryGetFromDbById.exclusive.apply(null, arguments).then(onResult);\n\n    function onResult(row) {\n        if (row === null)\n            throw new Error(\"Row not found.\");\n        return row;\n    }\n}\n\nmodule.exports = get;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/tryGetFromDbById.js":"var newPrimaryKeyFilter = require('./newPrimaryKeyFilter');\nvar tryGetFirstFromDb = require('./tryGetFirstFromDb');\nvar extractStrategy = require('./tryGetFromDbById/extractStrategy');\n\nfunction tryGet() {\n    var filter = newPrimaryKeyFilter.apply(null, arguments);\n    var table = arguments[0];\n    var strategy = extractStrategy.apply(null, arguments);\n    return tryGetFirstFromDb(table, filter, strategy);\n}\n\ntryGet.exclusive = function tryGet() {\n    var filter = newPrimaryKeyFilter.apply(null, arguments);\n    var table = arguments[0];\n    var strategy = extractStrategy.apply(null, arguments);\n    return tryGetFirstFromDb.exclusive(table, filter, strategy);\n}\n\nmodule.exports = tryGet;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newPrimaryKeyFilter.js":"function primaryKeyFilter(table,id,id2,etc) {\n\tvar primaryColumns = table._primaryColumns;\n\tvar key = arguments[1];\n\tvar filter = primaryColumns[0].equal(key);\n\tfor (var i = 1; i < primaryColumns.length; i++) {\n\t\tkey = arguments[i+1];\n\t\tvar colFilter = primaryColumns[i].equal(key);\n\t\tfilter = filter.and(colFilter);\n\t}\t\n\treturn filter;\n}\n\nmodule.exports = primaryKeyFilter;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/tryGetFirstFromDb.js":"var getMany = require('./getMany');\nvar util = require('util');\n\nfunction tryGet(table, filter, strategy) {\n    strategy = setLimit(strategy);\n    return getMany(table, filter, strategy).then(filterRows);\n}\n\nfunction filterRows(rows) {\n    if (rows.length > 0)\n        return rows[0];\n    return null;\n}\n\ntryGet.exclusive = function(table, filter, strategy) {\n    strategy = setLimit(strategy);\n    return getMany.exclusive(table, filter, strategy).then(filterRows);\n}\n\nfunction setLimit(strategy) {\n    return util._extend({ limit: 1 }, strategy);\n}\n\nmodule.exports = tryGet;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/getMany.js":"var newQuery = require('./newQuery');\nvar executeQueries = require('./executeQueries');\nvar resultToRows = require('./resultToRows');\nvar strategyToSpan = require('./strategyToSpan');\nvar emptyInnerJoin = require('./query/newParameterized')();\nvar negotiateRawSqlFilter = require('./column/negotiateRawSqlFilter');\n\nfunction getMany(table,filter,strategy) {\n\treturn getManyCore(table,filter,strategy);\n}\n\nfunction getManyCore(table,filter,strategy,exclusive) {\n\tvar alias = table._dbName;\n\tvar noOrderBy;\n\tfilter = negotiateRawSqlFilter(filter);\n\tvar span = strategyToSpan(table,strategy);\n\tvar queries = newQuery([],table,filter,span,alias,emptyInnerJoin,noOrderBy,exclusive);\n\treturn executeQueries(queries).then(onResult);\n\t\n\tfunction onResult(result) {\n\t\treturn resultToRows(span,result);\n\t}\n}\n\ngetMany.exclusive = function(table,filter,strategy) {\n\treturn getManyCore(table,filter,strategy,true);\n};\n\nmodule.exports = getMany;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newQuery.js":"var newSingleQuery = require('./query/newSingleQuery');\nvar addSubQueries = require('./query/addSubQueries');\nvar extractFilter = require('./query/extractFilter');\nvar extractOrderBy = require('./query/extractOrderBy');\nvar extractLimit = require('./query/extractLimit');\nvar extractLimitQuery = require('./query/extractLimitQuery');\n\nfunction newQuery(queries,table,filter,span,alias,innerJoin,orderBy,exclusive) {\t\n\tfilter = extractFilter(filter);\n\torderBy = extractOrderBy(table,alias,span.orderBy,orderBy);\n\tvar limit = extractLimit(span);\n\tvar singleQuery = newSingleQuery(table,filter,span,alias,innerJoin,orderBy,limit,exclusive);\n\tqueries.push(singleQuery);\n\tsingleQuery.queryContext.limitQuery  = extractLimitQuery(table, filter, span, alias, orderBy, limit);\n\n\taddSubQueries(queries,table,filter,span,alias,innerJoin);\n\treturn queries;\n}\n\nmodule.exports = newQuery;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/newSingleQuery.js":"var newColumnSql = require('./singleQuery/newColumnSql');\nvar newJoinSql = require('./singleQuery/newJoinSql');\nvar newWhereSql = require('./singleQuery/newWhereSql');\nvar newQueryContext = require('./singleQuery/newQueryContext');\nvar negotiateLimit = require('./singleQuery/negotiateLimit');\nvar negotiateExclusive = require('./singleQuery/negotiateExclusive');\nvar extractLimitQuery = require('./extractLimitQuery');\n\nfunction _new(table,filter,span,alias,innerJoin,orderBy,limit,exclusive) {\n\tvar c = {};\n\n\tc.sql = function() {\n\t\tvar name = table._dbName;\n\t\tvar columnSql = newColumnSql(table,span,alias);\n\t\tvar innerJoinSql = innerJoin.sql();\n\t\tvar joinSql = newJoinSql(span,alias);\n\t\tvar whereSql = newWhereSql(table,filter,alias);\n\t\tvar safeLimit = negotiateLimit(limit);\n\t\tvar exclusiveClause = negotiateExclusive(table,alias,exclusive);\n\t\treturn 'select ' + columnSql + ' from ' + name + ' ' + alias + innerJoinSql + joinSql + whereSql + orderBy + safeLimit + exclusiveClause;\n\t};\n\n\tc.parameters = innerJoin.parameters.concat(filter.parameters);\n\tc.queryContext = newQueryContext(filter, alias, innerJoin);\n\n\treturn c;\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/singleQuery/newColumnSql.js":"var newShallowColumnSql = require('./columnSql/newShallowColumnSql');\nvar newJoinedColumnSql = require('./columnSql/newJoinedColumnSql');\n\nmodule.exports = function(table,span,alias) {\n\tvar shallowColumnSql = newShallowColumnSql(table,alias);\n\tvar joinedColumnSql = newJoinedColumnSql(span,alias);\n\treturn shallowColumnSql + joinedColumnSql;\n};","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/singleQuery/columnSql/newShallowColumnSql.js":"function _new(table,alias) {\n\tvar aliasDot = alias + '.';\n\tvar commaAliasDot = ',' + aliasDot;\n\tvar columns = table._columns;\n\tvar sql = aliasDot + encodeColumn(0);\n\tfor (var i = 1; i < columns.length; i++) {\n\t\tsql = sql + commaAliasDot + encodeColumn(i);\n\t}\n\treturn sql;\n\n\tfunction encodeColumn(i) {\n\t\treturn columns[i]._dbName + ' as s' + alias + i;\n\t}\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/singleQuery/columnSql/newJoinedColumnSql.js":"var joinLegToColumnSql = require('./joinLegToColumnSql');\n\nmodule.exports = function(span,alias) {\n\tvar index = 0;\n\tvar c = {};\n\tvar sql = '';\n\n\tc.visitJoin = function(leg) {\n\t\tvar joinSql = joinLegToColumnSql(leg,alias + '_' + index);\n\t\tsql = sql + joinSql;\n\t};\n\n\tc.visitOne = function (leg) {\n\t\tc.visitJoin(leg);\n\t};\n\n\tc.visitMany = function(leg) {\n\t};\n\n\tspan.legs.forEach(onEach);\n\n\n\tfunction onEach(leg) {\n\t\tleg.accept(c);\n\t\tindex++;\n\t}\n\n\treturn sql;\n};","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/singleQuery/columnSql/joinLegToColumnSql.js":"var newShallowColumnSql = require('./newShallowColumnSql');\t\nvar newJoinedColumnSql = _initJOinedColumnSql;\n\nfunction sql(leg,alias) {\n\tvar span = leg.span;\n\tvar shallowColumnSql = newShallowColumnSql(span.table,alias);\n\tvar joinedColumnSql = newJoinedColumnSql(span,alias);\n\treturn ',' + shallowColumnSql + joinedColumnSql;\n}\n\nfunction _initJOinedColumnSql(span,alias) {\n\tnewJoinedColumnSql = require('./newJoinedColumnSql');\t\n\treturn newJoinedColumnSql(span,alias);\n} \n\nmodule.exports = sql;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/singleQuery/newJoinSql.js":"var joinLegToJoinSql = require('./joinSql/joinLegToJoinSql');\nvar oneLegToJoinSql = require('./joinSql/oneLegToJoinSql');\n\nfunction _new(span,alias) {\n\tvar sql = '';\n\tvar legNo = 0;\n\tvar childAlias;\n\n\tvar c = {};\t\n\tc.visitJoin = function(leg) {\n\t\tsql = sql + joinLegToJoinSql(leg,alias,childAlias);\n\t};\n\n\tc.visitOne = function(leg) {\n\t\tsql = sql + oneLegToJoinSql(leg,alias,childAlias);\n\t};\n\n\tc.visitMany = function(leg) {};\n\n\tfunction onEachLeg(leg) {\n\t\tchildAlias = alias + '_' + legNo;\n\t\tleg.accept(c);\n\t\tlegNo++;\n\t}\n\n\tspan.legs.forEach(onEachLeg);\n\treturn sql;\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/singleQuery/joinSql/joinLegToJoinSql.js":"var joinLegToShallowJoinSql = require('./joinLegToShallowJoinSql');\nvar newJoinSql = _newJoinSql; \n\nfunction toJoinSql(leg,alias,childAlias) {\n\treturn joinLegToShallowJoinSql(leg,alias,childAlias) +\n\t\t\tnewJoinSql(leg.span,childAlias);\n}\n\nfunction _newJoinSql() {\n\tnewJoinSql = require('../newJoinSql');\n\treturn newJoinSql.apply(null,arguments);\n}\n\nmodule.exports = toJoinSql;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/singleQuery/joinSql/joinLegToShallowJoinSql.js":"var newShallowJoinSql = require('./newShallowJoinSql');\n\nfunction toJoinSql(leg,alias,childAlias) {\n\tvar parentTable = leg.table;\n\tvar columns = leg.columns;\n\tvar childTable = leg.span.table;\n\treturn ' LEFT' + newShallowJoinSql(childTable,columns,childTable._primaryColumns,alias,childAlias);\n}\n\nmodule.exports = toJoinSql;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/singleQuery/joinSql/newShallowJoinSql.js":"var newJoinCore = require('./newShallowJoinSqlCore');\n\nfunction _new(rightTable,leftColumns,rightColumns,leftAlias,rightAlias) {\t\n\tvar sql = ' JOIN ' + rightTable._dbName + ' ' +  rightAlias + ' ON (';\n\tsql += newJoinCore(rightTable,leftColumns,rightColumns,leftAlias,rightAlias) + ')';\n\treturn sql;\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/singleQuery/joinSql/newShallowJoinSqlCore.js":"var newDiscriminatorSql = require('./newDiscriminatorSql');\n\nfunction _new(rightTable,leftColumns,rightColumns,leftAlias,rightAlias) {\t\n\tvar sql = '';\n\tvar delimiter = '';\n\tfor (var i = 0; i < leftColumns.length; i++) {\n\t\taddColumn(i);\n\t\tdelimiter = ' AND ';\n\t}\n\t\n\tfunction addColumn(index) {\n\t\tvar leftColumn = leftColumns[index];\n\t\tvar rightColumn = rightColumns[index];\n\t\tsql += delimiter + leftAlias + '.' + leftColumn._dbName + '=' + rightAlias + '.' + rightColumn._dbName;\n\t}\n\n\tsql += newDiscriminatorSql(rightTable,rightAlias);\n\treturn sql;\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/singleQuery/joinSql/newDiscriminatorSql.js":"var newDiscriminatorSqlCore = require('../newDiscriminatorSql');\n\nfunction newDiscriminatorSql(table, alias) {\n\tvar result = newDiscriminatorSqlCore(table,alias);\n\tif (result)\n\t\treturn ' AND' + result;\n\treturn result;\n\t\n}\n\nmodule.exports = newDiscriminatorSql;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/singleQuery/newDiscriminatorSql.js":"function newDiscriminatorSql(table, alias) {\n\tvar result = '';\n\tvar formulaDiscriminators = table._formulaDiscriminators;\n\tvar columnDiscriminators = table._columnDiscriminators;\n\taddFormula();\n\taddColumn();\n\treturn result;\n\n\tfunction addFormula() {\n\t\tfor (var i = 0; i<formulaDiscriminators.length; i++) {\n\t\t\tvar current = formulaDiscriminators[i].replace('@this',alias);\n\t\t\tand();\n\t\t\tresult += '(' + current + ')';\n\t\t}\n\t}\n\n\tfunction addColumn() {\n\t\tfor (var i = 0; i< columnDiscriminators.length; i++) {\n\t\t\tvar current = columnDiscriminators[i];\n\t\t\tand();\n\t\t\tresult += alias + '.' + current;\n\t\t}\n\t}\n\n\tfunction and() {\n\t\tif(result)\n\t\t\tresult += ' AND ';\n\t\telse\n\t\t\tresult = ' ';\t\n\t}\n}\n\nmodule.exports = newDiscriminatorSql;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/singleQuery/joinSql/oneLegToJoinSql.js":"var oneLegToShallowJoinSql = require('./oneLegToShallowJoinSql');\nvar newJoinSql = _newJoinSql;\n\nfunction toJoinSql(leg,alias,childAlias) {\t\n\treturn oneLegToShallowJoinSql(leg,alias,childAlias) +\n\t\t\tnewJoinSql(leg.span,childAlias);\n}\n\nfunction _newJoinSql() {\n\tnewJoinSql = require('../newJoinSql');\n\treturn newJoinSql.apply(null,arguments);\n}\n\nmodule.exports = toJoinSql;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/singleQuery/joinSql/oneLegToShallowJoinSql.js":"var newShallowJoinSql = require('./newShallowJoinSql');\n\nfunction toJoinSql(leg,alias,childAlias) {\n\tvar parentTable = leg.table;\n\tvar columns = leg.columns;\n\tvar childTable = leg.span.table;\n\treturn ' LEFT' + newShallowJoinSql(childTable,parentTable._primaryColumns,columns,alias,childAlias);\n}\n\nmodule.exports = toJoinSql;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/singleQuery/newWhereSql.js":"var newDiscriminatorSql = require('./newDiscriminatorSql');\n\nfunction newWhereSql(table,filter,alias) {\n\tvar separator = ' where';\n\tvar result = '';\n\tvar sql = filter.sql();\n\tvar discriminator = newDiscriminatorSql(table, alias);\n\tif (sql) {\n\t\tresult = separator + ' ' + sql;\n\t\tseparator = ' AND';\n\t}\n\tif(discriminator)\n\t\tresult += separator + discriminator;\n\treturn result;\t\n}\n\nmodule.exports = newWhereSql;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/singleQuery/newQueryContext.js":"var newCollection = require('../../../newCollection');\n\nfunction newQueryContext(filter, alias, innerJoin) {\n\tvar rows = newCollection();\n\n\tvar c = {};\n\tc.filter = filter;\n\tc.alias = alias;\n\tc.innerJoin = innerJoin;\n\n\tc.expand = function(relation) {\n\t\trows.forEach(function(row) {\n\t\t\trelation.expand(row);\n\t\t});\n\t};\n\n\tc.add = function(row) {\n\t\trows.add(row);\n\t};\n\n\treturn c;\n}\n\nmodule.exports = newQueryContext;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/singleQuery/negotiateLimit.js":"function negotiateLimit(limit) {\n\tif(!limit)\n\t\treturn '';\n\n\tif(limit.charAt(0) !== ' ')\n\t\treturn ' ' + limit;\n\treturn limit;\n}\n\nmodule.exports = negotiateLimit;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/singleQuery/negotiateExclusive.js":"var getSessionSingleton = require('../../getSessionSingleton');\n\nfunction negotiateExclusive(table, alias, _exclusive) {\n\tif (table._exclusive || _exclusive) {\n\t\tvar encode =  getSessionSingleton('selectForUpdateSql');\n\t\treturn encode(alias);\n\t}\n\treturn '';\n}\n\nmodule.exports = negotiateExclusive;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/extractLimitQuery.js":"var newWhereSql = require('./singleQuery/newWhereSql');\nvar negotiateLimit = require('./singleQuery/negotiateLimit');\nvar newParameterized = require('./newParameterized');\n\nfunction _new(table, filter, span, alias, orderBy, limit) {\n    if (!limit)\n        return;\n    var whereSql = newWhereSql(table, filter, alias);\n    var safeLimit = negotiateLimit(limit);\n    var sql = 'select * from ' + table._dbName + ' ' + alias + whereSql + orderBy + safeLimit;\n\n    return newParameterized(sql, filter.parameters);\n}\n\nmodule.exports = _new;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/addSubQueries.js":"var joinLegToQuery = _joinLegToQuery;\nvar oneLegToQuery = _oneLegToQuery;\nvar manyLegToQuery = _manyLegToQuery;\n\nfunction addSubQueries(queries,table,filter,span,alias,innerJoin) {\t\n\tvar c = {};\n\tvar _legNo;\n\tvar limitQuery = queries[queries.length-1].queryContext.limitQuery;\n\n\tc.visitJoin = function(leg) {\n\t\tjoinLegToQuery(queries, alias,leg,_legNo,filter,innerJoin, limitQuery);\n\t};\n\tc.visitOne = function(leg) {\n\t\toneLegToQuery(queries, alias,leg,_legNo,filter,innerJoin, limitQuery);\n\t};\n\tc.visitMany = function(leg) {\n\t\tmanyLegToQuery(queries, alias,leg,_legNo,filter,innerJoin, limitQuery);\n\t};\n\n\tspan.legs.forEach(onEachLeg);\t\n\n\tfunction onEachLeg(leg,legNo) {\n\t\t_legNo = legNo;\n\t\tleg.accept(c);\n\t}\n}\n\nfunction _joinLegToQuery() {\n\tjoinLegToQuery = require('./addSubQueries/joinLegToQuery');\t\n\treturn joinLegToQuery.apply(null,arguments);\n}\n\nfunction _oneLegToQuery() {\n\toneLegToQuery = require('./addSubQueries/oneLegToQuery');\t\n\treturn oneLegToQuery.apply(null,arguments);\n}\n\nfunction _manyLegToQuery() {\n\tmanyLegToQuery = require('./addSubQueries/manyLegToQuery');\t\n\treturn manyLegToQuery.apply(null,arguments);\n}\n\n\n\nmodule.exports = addSubQueries;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/extractFilter.js":"var emptyFilter = require('../../emptyFilter');\n\nfunction extract(filter) {\n\tif (filter)\n\t\treturn filter;\n\treturn emptyFilter;\n}\n\nmodule.exports = extract;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/extractOrderBy.js":"function extractOrderBy(table, alias, orderBy, originalOrderBy) {\n    var dbNames = [];\n    var i;\n    if (orderBy) {\n        if (typeof orderBy === 'string')\n            orderBy = [orderBy];\n        for (i = 0; i < orderBy.length; i++) {\n            var nameAndDirection = extractNameAndDirection(orderBy[i]);\n            pushColumn(nameAndDirection.name, nameAndDirection.direction);\n        }\n    } else {\n        if(originalOrderBy)\n            return originalOrderBy;\n\n        for (i = 0; i < table._primaryColumns.length; i++) {\n            pushColumn(table._primaryColumns[i].alias);\n        }\n    }\n\n    function extractNameAndDirection(orderBy) {\n        var elements = orderBy.split(' ');\n        var direction = '';\n        if (elements.length > 1) {\n            direction = ' ' + elements[1];\n        }\n        return {\n            name: elements[0],\n            direction: direction\n        };\n    }\n    function pushColumn(property, direction) {\n        direction = direction || '';\n        var column = table[property];\n        dbNames.push(alias + '.' + column._dbName + direction);\n    }\n\n    return ' order by ' + dbNames.join(',');\n}\n\nmodule.exports = extractOrderBy;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/extractLimit.js":"function extractLimit(span) {\n\tif (span.limit) {\n\t\treturn ' limit ' + span.limit;\n\t}\n\treturn '';\n}\n\nmodule.exports = extractLimit;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/resultToRows.js":"var all = require('./promise').all;\nvar subResultToRows = _subResultToRows;\nvar dbRowsToRows = require('./resultToRows/dbRowsToRows');\n\nfunction resultToRows(span,result) {\n\tvar rowsPromise = result[0].then(onResult);\n\n\tfunction onResult(result) {\n\t\treturn dbRowsToRows(span,result);\n\t}\n\n\tresult.shift();\n\treturn subResultToRows(span, result).then(onSubRows);\n\n\tfunction onSubRows() {\n\t\treturn rowsPromise;\n\t}\n}\n\nfunction _subResultToRows(span,result) {\n\tsubResultToRows = require('./resultToRows/subResultToRows');\n\treturn subResultToRows(span,result);\n}\n\nmodule.exports = resultToRows;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/resultToRows/dbRowsToRows.js":"var dbRowToRow = require('./dbRowToRow');\nvar newRowArray = require('../rowArray');\n\nfunction dbRowsToRows(span, dbRows) {\n    var rows = newRowArray(span.table);\n    var queryContext = dbRows.queryContext;\n    for (var i = 0; i < dbRows.length; i++) {\n        var row = dbRowToRow(span, dbRows[i], queryContext);\n        rows.push(row);\n    }\n    return rows;\n}\n\nmodule.exports = dbRowsToRows;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/resultToRows/dbRowToRow.js":"var negotiateQueryContext = require('./negotiateQueryContext');\nvar decodeDbRow = require('./decodeDbRow');\nvar nextDbRowToRow = _nextDbRowToRow;\n\n\nfunction dbRowToRow(span, dbRow, queryContext) {\n\tvar table = span.table;\n\tvar row = decodeDbRow(span, table, dbRow);\n\tnegotiateQueryContext(queryContext, row);\n\trow.queryContext = queryContext;\t\t\n\tvar cache = table._cache;\n\trow = cache.tryAdd(row);\n\n\tvar c = {};\n\t\n\tc.visitOne = function(leg) {\n\t\tnextDbRowToRow(leg.span, dbRow);\n\t\tleg.expand(row);\n\t};\n\n\tc.visitJoin = function(leg) {\n\t\tnextDbRowToRow(leg.span, dbRow);\n\t\tleg.expand(row);\t\t\n\t};\n\n\tc.visitMany = function(leg) {\n\t\tleg.expand(row);\t\t\n\t};\n\n\tspan.legs.forEach(onEach);\n\n\tfunction onEach (leg) {\n\t\tleg.accept(c);\n\t}\n\n\treturn row;\n}\n\nfunction _nextDbRowToRow (span, dbRow) {\n\tnextDbRowToRow = require('./dbRowToRow');\n\tnextDbRowToRow(span, dbRow);\n}\n\nmodule.exports = dbRowToRow;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/resultToRows/negotiateQueryContext.js":"function negotiateQueryContext(queryContext, row) {\n\tif (queryContext)\n\t\t\tqueryContext.add(row);\t\n}\n\nmodule.exports = negotiateQueryContext;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/resultToRows/decodeDbRow.js":"var newDecodeDbRow = require('./newDecodeDbRow');\n\nfunction decodeDbRow(context, table, dbRow) {\n    var decode = context._decodeDbRow;\n    if (!decode) {\n        decode = newDecodeDbRow(table, dbRow);\n        Object.defineProperty(context, '_decodeDbRow', {\n            enumerable: false,\n            get: function() {\n                return decode;\n            },\n        });\n    }\n    return decode(dbRow);\n}\n\nmodule.exports = decodeDbRow;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/resultToRows/newDecodeDbRow.js":"var updateField = require('../updateField');\nvar newEmitEvent = require('../../emitEvent');\nvar extractStrategy = require('./toDto/extractStrategy');\nvar extractDeleteStrategy = require('../extractDeleteStrategy');\nvar newCascadeDeleteStrategy = require('../newCascadeDeleteStrategy');\nvar _delete = require('./delete');\nvar newObject = require('../../newObject');\nvar toDto = require('./toDto');\n\nfunction newDecodeDbRow(table, dbRow) {\n    var columns = table._columns;\n    var numberOfColumns = columns.length;\n    if (dbRow.offset === undefined) {\n        dbRow.offset = 0;\n    }\n\n    var offset = dbRow.offset;\n\n    var keys = Object.keys(dbRow);\n\n    for (var i = 0; i < numberOfColumns; i++) {\n        defineColumnProperty(i);\n    }\n\n    dbRow.offset += numberOfColumns;\n\n    function defineColumnProperty(i) {\n        var column = columns[i];\n        var purify = column.purify;\n        var decode = column.decode\n        var name = column.alias;\n        i = offset + i;\n        var key = keys[i];\n\n        Object.defineProperty(Row.prototype, name, {\n\n            get: function() {\n                return this._dbRow[key];\n            },\n            set: function(value) {\n                var oldValue = this[name];\n                value = purify(value);\n                this._dbRow[key] = value;\n                updateField(table, column, this);\n                var emit = this._emitColumnChanged[name];\n                if (emit)\n                    emit(this, column, value, oldValue);\n                this._emitChanged(this, column, value, oldValue);\n            }\n        });\n    }\n\n    setRelated();\n\n    function setRelated() {\n        var relations = table._relations;\n        for (var relationName in relations) {\n            var relation = relations[relationName];\n            setSingleRelated(relationName, relation);\n        }\n    }\n\n    function setSingleRelated(name, relation) {\n        Object.defineProperty(Row.prototype, name, {\n            get: function() {\n                return createGetRelated(this, name)();\n            }\n        });\n    }\n\n    function createGetRelated(row, alias) {\n        var get = row._related[alias];\n        if (!get) {\n            var relation = table._relations[alias];\n            get = relation.toGetRelated(row);\n            row._related[alias] = get;\n        }\n        return get;\n    }\n\n\n    Row.prototype.subscribeChanged = function(onChanged, name) {\n        var emit;\n        if (name) {\n            emit = this._emitColumnChanged[name] || (this._emitColumnChanged[name] = newEmitEvent());\n            emit.add(onChanged);\n            return\n        }\n        this._emitChanged.add(onChanged);\n    };\n\n    Row.prototype.unsubscribeChanged = function(onChanged, name) {\n        if (name) {\n            this._emitColumnChanged[name].tryRemove(onChanged);\n            return;\n        }\n        this._emitChanged.tryRemove(onChanged);\n    };\n\n    Row.prototype.toJSON = function(strategy) {\n        return this.toDto.apply(this, arguments).then(JSON.stringify);\n    };\n\n    Row.prototype.toDto = function(strategy) {\n        var args = Array.prototype.slice.call(arguments, 0);\n        args.push(table);\n        strategy = extractStrategy.apply(null, args);\n        return toDto(strategy, table, this);\n    };\n\n    Row.prototype.expand = function(alias) {\n        var get = createGetRelated(this, alias);\n        get.expanded = true;\n    };\n\n    Row.prototype.isExpanded = function(alias) {\n        var get = createGetRelated(this, alias);\n        return get.expanded;\n    };\n\n    Row.prototype.delete = function(strategy) {\n        strategy = extractDeleteStrategy(strategy, table);\n        _delete(this, strategy, table);\n    };\n\n    Row.prototype.cascadeDelete = function() {\n        var strategy = newCascadeDeleteStrategy(newObject(), table);\n        _delete(this, strategy, table);\n    };\n\n    function decodeDbRow(row) {\n        for (var i = 0; i < numberOfColumns; i++) {\n            var index = offset + i;\n            var key = keys[index];            \n            row[key] = columns[i].decode(row[key]);\n        }\n        return new Row(row);\n    }\n\n    function Row(dbRow) {\n        this._dbRow = dbRow;\n        this._related = {};\n        this._emitColumnChanged = {};\n        this._emitChanged = newEmitEvent();\n    }\n\n    return decodeDbRow;\n}\n\nmodule.exports = newDecodeDbRow;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/updateField.js":"var newUpdateCommand = require('./commands/newUpdateCommand');\nvar pushCommand = require('./commands/pushCommand');\nvar lastCommandMatches = require('./commands/lastCommandMatches');\n\nfunction updateField(table, column, row) {\n\tif (lastCommandMatches(row))\n\t\treturn;\n\tvar command = newUpdateCommand(table, column, row);\n\tpushCommand(command);\n}\n\nmodule.exports = updateField;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/newUpdateCommand.js":"var newUpdateCommandCore = require('./newUpdateCommandCore');\nvar newImmutable = require('../../newImmutable');\nvar newColumnList = require('../../newObject');\n\nfunction newUpdateCommand(table, column, row) {\n    return new UpdateCommand(table, column, row);\n}\n\nfunction UpdateCommand(table, column, row) {\n    this._table = table;\n    this._row = row;\n    this.__getCoreCommand = newImmutable(newUpdateCommandCore);\n    this._columnList = newColumnList();\n    this._columnList[column.alias] = column;\n    this.onFieldChanged = this.onFieldChanged.bind(this)\n    row.subscribeChanged(this.onFieldChanged);\n}\n\nUpdateCommand.prototype.onFieldChanged = function(row, column) {\n    this._columnList[column.alias] = column;\n};\n\nUpdateCommand.prototype.sql = function() {\n    return this._getCoreCommand().sql();\n};\n\nObject.defineProperty(UpdateCommand.prototype, 'parameters', {\n    get: function() {\n        return this._getCoreCommand().parameters;\n    }\n});\n\nUpdateCommand.prototype._getCoreCommand = function() {\n    return this.__getCoreCommand(this._table, this._columnList, this._row);\n};\n\nUpdateCommand.prototype.endEdit = function() {\n    this._getCoreCommand();\n    this._row.unsubscribeChanged(this.onFieldChanged);\n};\n\nUpdateCommand.prototype.matches = function(otherRow) {\n    return this._row == otherRow;\n};\n\nmodule.exports = newUpdateCommand;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/newUpdateCommandCore.js":"var newParameterized = require('../query/newParameterized');\n\nfunction newUpdateCommandCore(table, columns, row) {\t\n\tvar columnNames = [];\n\tvar values = [];\n\tvar command = newParameterized(\"UPDATE \" + table._dbName + \" SET\");\n\tvar separator = \" \";\n\n\taddColumns();\n\taddWhereId();\n\taddDiscriminators();\n\n\tfunction addColumns() {\t\t\n\t\tfor (var alias in columns) {\n\t\t\tvar column = columns[alias];\t\t\t\n\t\t\tvar encoded = column.encode(row[alias]);\n\t\t\tcommand = command.append(separator + column._dbName + \"=\").append(encoded);\n\t\t\tseparator = \",\";\n\t\t}\n\t}\n\n\tfunction addWhereId() {\n\t\tseparator = \" WHERE \";\n\t\tvar columns = table._primaryColumns;\n\t\tfor (var i = 0; i < columns.length; i++) {\n\t\t\tvar column = columns[i];\n\t\t\tvar value = row[column.alias];\n\t\t\tvar encoded = column.encode(value);\n\t\t\tcommand = command.append(separator + column._dbName + \"=\").append(encoded);\n\t\t\tseparator = \" AND \";\n\t\t}\n\t}\n\n\tfunction addDiscriminators() {\n\t\tvar discriminators = table._columnDiscriminators;\n\t\tif (discriminators.length === 0)\n\t\t\treturn;\n\t\tdiscriminators = separator + discriminators.join(\" AND \");\n\t\tcommand = command.append(discriminators);\n\t}\n\n\treturn command;\n\n\n}\n\nmodule.exports = newUpdateCommandCore;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/lastCommandMatches.js":"var getChangeSet = require('./getChangeSet');\n\nfunction lastCommandMatches(row) {\n\tvar changeSet = getChangeSet();\n\tvar lastIndex = changeSet.length-1;\n\tif (lastIndex >= 0 && changeSet[lastIndex].matches)\n\t\treturn changeSet[lastIndex].matches(row);\n\treturn false;\t\n}\n\nmodule.exports = lastCommandMatches;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/resultToRows/toDto/extractStrategy.js":"var extractSubStrategy = _extractSubStrategy;\n\nfunction _extractSubStrategy(table) {\n    extractSubStrategy = require('./extractStrategy');\n    return extractSubStrategy(table);\n}\n\nfunction extractStrategy() {\n    if (arguments.length == 2)\n        return arguments[0];\n    var table = arguments[0];\n    var strategy = {};\n    var relations = table._relations;\n    var relationName;\n\n    var visitor = {};\n    visitor.visitJoin = function() {};\n\n    visitor.visitMany = function(relation) {\n        strategy[relationName] = extractSubStrategy(relation.childTable);\n    };\n\n    visitor.visitOne = visitor.visitMany;\n\n    for (relationName in relations) {\n        var relation = relations[relationName];\n        relation.accept(visitor);\n    }\n    return strategy;\n}\n\nmodule.exports = extractStrategy;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/extractDeleteStrategy.js":"var emptyStrategy = require('../newObject')();\n\nfunction extractDeleteStrategy(strategy) {\n\tif (strategy)\n\t\treturn strategy;\n\treturn emptyStrategy;\n}\n\nmodule.exports = extractDeleteStrategy;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newCascadeDeleteStrategy.js":"var addSubStrategies = _addSubStrategies;\nvar newObject = require('../newObject');\n\nfunction newCascadeDeleteStrategy(strategy, table) {\n\tvar relations = table._relations;\n\tvar relationName;\n\n\tvar c = {};\n\tc.visitJoin = function(){};\n\tc.visitOne = function(relation) {\n\t\tvar subStrategy = newObject();\n\t\tstrategy[relationName] = subStrategy;\n\t\taddSubStrategies(subStrategy, relation.childTable);\n\t};\n\n\tc.visitMany = c.visitOne;\n\n\tfor(relationName in relations) {\n\t\tvar relation = relations[relationName];\n\t\trelation.accept(c);\n\t}\n\treturn strategy;\n}\n\nfunction _addSubStrategies(strategy, table) {\t\n\taddSubStrategies = require('./newCascadeDeleteStrategy');\n\taddSubStrategies(strategy, table);\n}\n\nmodule.exports = newCascadeDeleteStrategy;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/resultToRows/delete.js":"var removeFromCache = require('./delete/removeFromCache');\t\nvar pushCommand = require('../commands/pushCommand');\nvar newDeleteCommand = require('../commands/newDeleteCommand');\nvar newPrimaryKeyFilter = require('../newPrimaryKeyFilter');\n\nfunction _delete(row, strategy, table) {\n\tvar relations = [];\n\tremoveFromCache(row, strategy, table);\n\n\tvar args = [table];\n\ttable._primaryColumns.forEach(function(primary) {\n\t\targs.push(row[primary.alias]);\n\t});\n\tvar filter = newPrimaryKeyFilter.apply(null, args);\n\tvar cmds = newDeleteCommand([], table, filter, strategy, relations);\n\tcmds.forEach(function(cmd) {\n\t\tpushCommand(cmd);\n\t});\n}\n\nmodule.exports = _delete;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/resultToRows/delete/removeFromCache.js":"var nextRemoveFromCache = _nextRemoveFromCache;\n\nfunction removeFromCache(row, strategy, table) {\n    if (Array.isArray(row)) {\n    \tremoveManyRows();\n    \treturn;\n    }\n    if (row)\n        removeSingleRow();\n\n    function removeManyRows() {\n        row.forEach(function(rowToRemove) {\n            nextRemoveFromCache(rowToRemove, strategy, table);\n        });\n    }\n\n    function removeSingleRow() {\n        var relations = table._relations;\n        for (var relationName in strategy) {\n            var relation = relations[relationName];\n                var rows = relation.getRowsSync(row);\n                nextRemoveFromCache(rows, strategy[relationName], relation.childTable);\n        }\n        table._cache.tryRemove(row);\n    }\n}\n\nfunction _nextRemoveFromCache(row, strategy, table) {\n    nextRemoveFromCache = require('./removeFromCache');\n    nextRemoveFromCache(row, strategy, table);\n}\n\nmodule.exports = removeFromCache;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/newDeleteCommand.js":"var newSingleCommand = require('./delete/newSingleCommand');\n\nvar nextCommand = function() {\n\tnextCommand = require('./newDeleteCommand');\n\tnextCommand.apply(null, arguments);\n};\n\nfunction newCommand(queries,table,filter,strategy,relations) {\t\n\tvar singleCommand = newSingleCommand(table,filter,relations);\n\tfor(var name in strategy) {\n\t\tvar childStrategy = strategy[name];\n\t\tvar childRelation = table._relations[name];\n\t\tvar joinRelation = childRelation.joinRelation;\n\t\tvar\tchildRelations = [joinRelation].concat(relations);\n\t\tnextCommand(queries,childRelation.childTable,filter,childStrategy,childRelations);\n\t}\n\tqueries.push(singleCommand);\n\treturn queries;\n}\n\nmodule.exports = newCommand;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/delete/newSingleCommand.js":"var newSubFilter = require('./singleCommand/subFilter');\nvar newDiscriminatorSql = require('../../query/singleQuery/newDiscriminatorSql');\nvar extractFilter = require('../../query/extractFilter');\nvar newSingleCommandCore = require('./singleCommand/newSingleCommandCore');\nvar createAlias = require('./createAlias');\n\nfunction _new(table,filter,relations) {\n\tvar alias = createAlias(table, relations.length);\n\tfilter = extractFilter(filter);\n\tfilter = newSubFilter(relations, filter);\n\tvar discriminator = newDiscriminatorSql(table, alias);\n\tif (discriminator !== '')\n\t\tfilter = filter.and(discriminator);\n\treturn newSingleCommandCore(table, filter, alias);\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/delete/singleCommand/subFilter.js":"var newSelect = require('./selectSql');\nvar newJoin = require('./joinSql');\nvar newWhere = require('./whereSql');\nvar createAlias = require('../createAlias');\nfunction newSubFilter(relations, shallowFilter) {\n\tvar relationCount = relations.length;\n\tif (relationCount === 0)\n\t\treturn shallowFilter;\n\tvar table = relations[0].childTable;\n\tvar alias = createAlias(table, relationCount -1);\n\tvar filter = newSelect(table,alias).prepend('EXISTS (');\n\tvar join = newJoin(relations.slice(1));\n\tvar where = newWhere(relations,shallowFilter,alias);\n\treturn filter.append(join).append(where).append(')');\n\n}\n\nmodule.exports = newSubFilter;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/delete/singleCommand/selectSql.js":"var newParameterized = require('../../../query/newParameterized');\nvar newBoolean = require('../../../column/newBoolean');\n\nfunction newSelectSql(table, alias) {\n\tvar colName = table._primaryColumns[0]._dbName;\n\tvar sql = 'SELECT ' + alias + '.' + colName + ' FROM ' + table._dbName + ' AS ' + alias;\n\tsql = newParameterized(sql);\n\treturn newBoolean(sql);\n}\n\nmodule.exports = newSelectSql;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/delete/singleCommand/joinSql.js":"var newShallowJoinSql = require('../../../query/singleQuery/joinSql/newShallowJoinSql');\nvar createAlias = require('../createAlias');\n\nfunction newJoinSql(relations) {\n\tvar length = relations.length;\n\tvar leftAlias,\n\t\trightAlias;\n\tvar c = {};\n\tvar i;\n\tvar sql = '';\n\n\tfunction addSql(relation) {\n\t\tvar rightColumns = relation.childTable._primaryColumns;\n\t\tvar leftColumns = relation.columns;\n\t\tsql += ' INNER' + newShallowJoinSql(relation.childTable,leftColumns,rightColumns,leftAlias,rightAlias);\t\n\t}\t\n\t\n\trelations.forEach(function(relation, i){\n\t\tleftAlias = '_' + (length-i);\n\t\trightAlias = createAlias(relation.childTable, length-i-1);\n\t\taddSql(relation);\n\n\t});\n\n\treturn sql;\n}\n\nmodule.exports = newJoinSql;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/delete/createAlias.js":"function createAlias(table, depth) {\n\tif (depth === 0)\n\t\treturn table._dbName;\n\treturn '_' + depth;\n}\nmodule.exports = createAlias;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/delete/singleCommand/whereSql.js":"var newShallowJoinSql = require('../../../query/singleQuery/joinSql/newShallowJoinSqlCore');\n\nfunction newWhereSql(relations, shallowFilter, rightAlias) {\n    var c = {};\n    var sql;\n    var relationCount = relations.length;\n    var relation = relations[0];\n    var leftAlias = '_' + relationCount;\n    var table = relation.childTable;\n    var leftColumns = relation.columns;\n    var rightColumns = table._primaryColumns;\n    where(leftColumns, rightColumns);\n\n    function where() {\n        var table = relation.childTable;\n        var joinCore = newShallowJoinSql(table, leftColumns, rightColumns, leftAlias, rightAlias);\n        if (shallowFilter)\n            sql = shallowFilter.prepend(' WHERE ' + joinCore + ' AND ');\n        else\n            sql = ' WHERE ' + joinCore;\n    }\n    return sql;\n}\n\nmodule.exports = newWhereSql;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/delete/singleCommand/newSingleCommandCore.js":"var getSessionSingleton = require('../../../getSessionSingleton');\n\nfunction newSingleCommandCore(table,filter,alias) {\n\tvar c = {};\n\n\tc.sql = function() {\n\t\tvar whereSql = filter.sql();\n\t\tif (whereSql)\n\t\t\twhereSql = ' where ' + whereSql;\n\t\tvar deleteFromSql = getSessionSingleton('deleteFromSql');\n\t\treturn deleteFromSql(table, alias, whereSql);\n\t};\n\n\tc.parameters = filter.parameters;\t\n\n\treturn c;\n}\n\nmodule.exports = newSingleCommandCore;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/resultToRows/toDto.js":"var resultToPromise = require('../resultToPromise');\nvar createDto = require('./toDto/createDto');\n\nfunction toDto(strategy, table, row) {\n    var dto = createDto(strategy, table, row);\n    strategy = strategy || {};\n    var promise = resultToPromise(dto);\n\n    for (var property in strategy) {\n        mapChild(property);            \n    }\n\n    function mapChild(name) {\n        promise = promise.then(getRelated).then(onChild);\n        \n        function getRelated() {\n            return row[name];\n        }\n\n        function onChild(child) {\n            if (child) \n                return child.toDto(strategy[name]).then(onChildDto);                \n        }\n\n        function onChildDto(childDto) {\n            dto[name] = childDto;\n        }\n    }\n\n    return promise.then(function() {\n        return dto;\n    });\n}\n\nmodule.exports = toDto;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/resultToRows/toDto/createDto.js":"function _createDto(context, table, row) {\n    var dto = {};\n    var columns = table._columns;\n    var length = columns.length;\n    for (var i = 0; i < length; i++) {\n        var column = columns[i];\n        if (!('serializable' in column && !column.serializable)) {\n            var alias = column.alias;\n            dto[alias] = row[alias];\n        }\n    }\n    return dto;\n}\n\nmodule.exports = _createDto;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/rowArray.js":"var extractStrategy = require('./resultToRows/toDto/extractStrategy');\nvar resultToPromise = require('./resultToPromise')\nvar orderBy = require('./rowArray/orderBy');\nvar negotiateNextTick = require('./rowArray/negotiateNextTick');\n\nfunction newRowArray(table) {\n    var c = [];\n\n    Object.defineProperty(c, \"toJSON\", {\n        enumerable: false,\n        value: toJSON\n    });\n\n    Object.defineProperty(c, \"toDto\", {\n        enumerable: false,\n        writable: true,\n        value: toDto\n    });\n\n    function toJSON(optionalStrategy) {\n        return c.toDto.apply(null, arguments).then(JSON.stringify);\n    }\n\n    function toDto(optionalStrategy) {\n        var args = arguments;\n        var result = [];\n        var length = c.length;\n        var i = -1;\n\n        return resultToPromise().then(toDtoAtIndex);\n\n        function toDtoAtIndex() {\n            i++;\n            if (i === length) {\n                return orderBy(optionalStrategy, result);\n            }\n            var row = c[i];\n            return getDto()\n                    .then(onDto)\n                    .then(toDtoAtIndex)\n\n            function getDto() {\n                return row.toDto.apply(row,args);\n            }            \n\n            function onDto(dto) {\n                result.push(dto);\n                return negotiateNextTick(i);\n            }\n        }\n    }\n\n    return c;\n}\n\nmodule.exports = newRowArray;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/rowArray/orderBy.js":"function orderBy(strategy, rows) {\n    if (strategy && strategy.orderBy) {\n        var comparer = createComparer(strategy.orderBy);\n        return rows.sort(comparer);\n    }\n    return rows;\n}\n\nfunction createComparer(orderBy) {\n    var comparers = [];\n    if (typeof orderBy === 'string')\n        orderBy = [orderBy];\n    orderBy.forEach(function(order) {\n        var elements = order.split(' ');\n        var name = elements[0];\n        var direction = elements[1] || 'asc';\n\n        var compare;\n        if (direction === 'asc')\n            comparers.push(compareAscending);\n        else\n            comparers.push(compareDescending);\n\n        function compareAscending(a, b) {\n            a = a[name];\n            b = b[name]\n            if (a === b)\n                return 0;\n            if (a < b)\n                return -1;\n            return 1;\n        }\n\n        function compareDescending(a, b) {\n            return compareAscending(b, a)\n        }\n\n    });\n\n    function compareComposite(a, b) {\n        for (var i = 0; i < comparers.length; i++) {\n            var result = comparers[i](a, b);\n            if (result !== 0)\n                return result;\n        }\n        return 0;\n    }\n\n    return compareComposite;\n}\n\nmodule.exports = orderBy;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/rowArray/negotiateNextTick.js":"var promise = require('promise/domains');\n\nfunction negotiateNextTick(i) {\t\n\tif (i === 0)\n\t\treturn;\n\tif (i % 1000 === 0)\n\t\treturn promise.resolve();\n\treturn;\n}\n\nmodule.exports = negotiateNextTick;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/strategyToSpan.js":"var newCollection = require('../newCollection');\n\nfunction toSpan(table,strategy) {\n\tvar span = {};\n\tspan.legs = newCollection();\n\tspan.table = table;\n\tapplyStrategy(table,span,strategy);\n\treturn span;\n\n\tfunction applyStrategy(table,span,strategy) {\n\t\tvar legs = span.legs;\n\t\tif(!strategy) \n\t\t\treturn;\t\t\n\t\tfor (var name in strategy) {\n\t\t\tif (table._relations[name])\n\t\t\t\taddLeg(legs,table,strategy,name);\n\t\t\telse\n\t\t\t\tspan[name] = strategy[name];\n\t\t}\t\t\t\t\t\n\t}\t\n\t\t\t\n\tfunction addLeg(legs,table,strategy,name) {\t\t\n\t\tvar relation = table._relations[name];\n\t\tvar leg = relation.toLeg();\n\t\tlegs.add(leg);\t\t\n\t\tvar subStrategy = strategy[name];\n\t\tvar childTable = relation.childTable;\n\t\tapplyStrategy(childTable,leg.span,subStrategy);\n\t}\n}\n\nmodule.exports = toSpan;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/tryGetFromDbById/extractStrategy.js":"\nfunction extract(table) {\n\tvar lengthWithStrategy = table._primaryColumns.length  + 2;\n\tif (arguments.length == lengthWithStrategy)\n\t\treturn arguments[lengthWithStrategy-1];\n\treturn emptyStrategy;\n}\n\nfunction emptyStrategy() {\n\t\n}\n\nmodule.exports = extract;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/nullPromise.js":"module.exports = require('./promise')(null);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newGetRelated.js":"var isDirty = require('./isDirty');\n\nfunction newGetRelated(parent, relation) {\n    function getRelated() {\n        if (getRelated.expanded)\n            return relation.getFromCache(parent);\n        if (isDirty()) {\n            return relation.getFromDb(parent).then(onFromDb);\n        }\n        return relation.getRelatives(parent).then(onRelatives);\n\n        function onFromDb(rows) {\n            getRelated.expanded = true;\n            return rows;\n        }\n\n        function onRelatives() {\n            return relation.getFromCache(parent);\n        }\n    }\n\treturn getRelated;\n}\n\nmodule.exports = newGetRelated;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/isDirty.js":"var getSessionSingleton = require('./getSessionSingleton');\n\nmodule.exports = getSessionSingleton.bind(null,'isDirty');","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/joinRelation/getRelatives.js":"var legToQuery = require('./joinLegToQuery');\nvar getRelativesCore = require('../getRelativesCore');\n\nmodule.exports = getRelativesCore.bind(null, legToQuery);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/joinRelation/joinLegToQuery.js":"var newShallowJoinSql = require('../query/addSubQueries/newShallowJoinSql');\nvar newQuery = require('../newQuery');\nvar emptyFilter;\n\nfunction joinLegToQuery(queries, parentAlias,leg,legNo,filter, innerJoin, limitQuery) {\t\n\tvar childAlias = parentAlias + '_' + legNo;\n\tvar span = leg.span;\n\tvar parentTable = leg.table;\t\n\tvar childColumns = span.table._primaryColumns;\n\tvar parentColumns = leg.columns;\t \n\tvar shallowJoin  = newShallowJoinSql(parentTable,childColumns,parentColumns,childAlias,parentAlias,limitQuery);\n\tinnerJoin = shallowJoin.append(innerJoin);\t\n\treturn newQuery(queries, span.table,filter,span,childAlias,innerJoin);\n}\n\nmodule.exports = joinLegToQuery;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/addSubQueries/newShallowJoinSql.js":"var newJoinCore = require('../singleQuery/joinSql/newShallowJoinSqlCore');\nvar newParameterized = require('../newParameterized');\n\nfunction newShallowJoinSql(rightTable,leftColumns,rightColumns,leftAlias,rightAlias, limitQuery) {\t\n\tvar joinCore = newJoinCore(rightTable,leftColumns,rightColumns,leftAlias,rightAlias);\n\tvar subQuery = negotiateSubQuery();\n\tvar postSql = ' ' +  rightAlias + ' ON (' + joinCore + ')';\n\treturn  subQuery.prepend(' INNER JOIN ').append(postSql);\n\n\tfunction negotiateSubQuery() {\n\t\tif (limitQuery) {\n\t\t\treturn newParameterized('(').append(limitQuery).append(')');\n\t\t}\n\t\treturn newParameterized(rightTable._dbName);\n\t}\n}\n\nmodule.exports = newShallowJoinSql;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/getRelativesCore.js":"var executeQueries = require('./executeQueries');\nvar resultToRows = require('./resultToRows');\nvar empty = require('./resultToPromise')(false);\nvar negotiateExpandInverse = require('./negotiateExpandInverse');\nvar legNo = 0;\n\nfunction getRelativesCore(legToQuery, parent, relation) {\n\tvar queryContext = parent.queryContext;\n\tif (!queryContext)\n\t\treturn empty;\n\tvar leg = relation.toLeg();\n\tvar filter = queryContext.filter;\n\tvar alias = queryContext.alias;\n\tvar innerJoin = queryContext.innerJoin;\n\tvar limitQuery = queryContext.limitQuery;\n\tvar query = legToQuery([], alias, leg, legNo, filter, innerJoin, limitQuery);\n\n\treturn executeQueries(query).then(onResult).then(onRows);\n\n\tfunction onResult(result) {\n\t\treturn  resultToRows(leg.span, result);\n\t}\n\n\tfunction onRows(rows) {\n\t\tqueryContext.expand(relation);\n\t\tnegotiateExpandInverse(parent, relation, rows);\n\t\treturn rows;\n\t}\n}\n\nmodule.exports = getRelativesCore;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/negotiateExpandInverse.js":"function negotiateExpandInverse(parent, relation, children) {\n\tvar joinRelation = relation.joinRelation;\n\tif (!joinRelation)\n\t\treturn;\n\tvar firstChild = children[0];\n\tif (firstChild)\n\t\tfirstChild.queryContext.expand(joinRelation);\n}\n\nmodule.exports = negotiateExpandInverse;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newRelatedTable.js":"\tvar newRelatedColumn = require('./relatedTable/relatedColumn');\nvar nextRelatedTable = _nextRelatedTable;\nvar subFilter = require('./relatedTable/subFilter');\n\nfunction newRelatedTable(relations) {\n\tvar table = relations[relations.length-1].childTable;\n\tvar columns = table._columns;\t\n\tvar c = {};\n\n\tfor (var i = 0; i < columns.length; i++) {\n\t\tvar col = columns[i];\n\t\tc[col.alias] = newRelatedColumn(col,relations);\n\t}\n\tdefineChildren();\n\n\tfunction defineChildren() {\n\t\tvar childRelations = table._relations;\n\t\tfor(var alias in childRelations) {\t\n\t\t\tdefineChild(alias);\n\t\t}\n\t}\n\n\tfunction defineChild(alias) {\t\t\n\t\tvar relation = table._relations[alias];    \t\n    \tvar children = relations.slice(0);    \t\t\t\t    \t\t\t\t\n    \tchildren.push(relation);\n\n\t\tObject.defineProperty(c, alias, {\n    \t\tget: function() {        \t\t\t\n    \t   \t\treturn nextRelatedTable(children);\n    \t\t}\n\t\t});\t\n\t}\n\n\tc.exists = function() {\n\t\treturn subFilter(relations);\n\t};\n\n\treturn c;\n}\n\nfunction _nextRelatedTable(relations) {\n\tnextRelatedTable = require('./newRelatedTable');\n\treturn nextRelatedTable(relations);\n}\n\nmodule.exports = newRelatedTable;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/relatedTable/relatedColumn.js":"var newSubFilter = require('./subFilter');\n\nfunction newRelatedColumn(column,relations) {\n\tvar c = {};\n\tvar alias = '_' + relations.length;\n\tfor (var propName in column) {\n\t\tvar prop = column[propName];\n\t\tif (prop instanceof Function)\t\t\t\n\n\t\t\tc[propName] = wrapFilter(prop);\n\t}\n\treturn c;\n\n\tfunction wrapFilter(filter) {\n\t\treturn runFilter;\n\t\t\n\t\tfunction runFilter() {\n\t\t\tvar args = [];\n\t\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\t\targs.push(arguments[i]);\n\t\t\t}\n\t\t\targs.push(alias);\n\t\t\tvar shallowFilter =  filter.apply(null,args);\n\t\t\treturn newSubFilter(relations,shallowFilter);\n\t\t}\n\t}\n\n}\n\nmodule.exports = newRelatedColumn;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/relatedTable/subFilter.js":"var newSelect = require('./selectSql');\nvar newJoin = require('./joinSql');\nvar newWhere = require('./whereSql');\n\nfunction newSubFilter(relations, shallowFilter) {\n\tvar relationCount = relations.length;\n\tvar alias = '_' + relationCount;\n\tvar table = relations[relationCount-1].childTable;\n\tvar filter = newSelect(table,alias).prepend('EXISTS (');\n\tvar join = newJoin(relations);\n\tvar where = newWhere(relations[0],shallowFilter);\n\treturn filter.append(join).append(where).append(')');\n\n}\n\nmodule.exports = newSubFilter;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/relatedTable/selectSql.js":"var newParameterized = require('../query/newParameterized');\nvar newBoolean = require('../column/newBoolean');\n\nfunction newSelectSql(table, alias) {\n\tvar colName = table._primaryColumns[0]._dbName;\n\tvar sql = 'SELECT ' + alias + '.' + colName + ' FROM ' + table._dbName + ' AS ' + alias;\n\tsql = newParameterized(sql);\n\treturn newBoolean(sql);\n}\n\nmodule.exports = newSelectSql;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/relatedTable/joinSql.js":"var newShallowJoinSql = require('../query/singleQuery/joinSql/newShallowJoinSql');\n\nfunction newJoinSql(relations) {\n\tif (relations.length == 1)\n\t\treturn  '';\n\tvar leftAlias,\n\t\trightAlias;\n\tvar relation;\n\tvar c = {};\n\tvar i;\n\tvar sql = '';\n\n\tc.visitJoin = function(relation) {\n\t\tsql += ' INNER' + newShallowJoinSql(relation.parentTable,relation.childTable._primaryColumns,relation.columns,leftAlias,rightAlias);\t\n\t};\n\n\tc.visitOne = function(relation) {\t\n\t\tinnerJoin(relation);\n\t};\n\n\tc.visitMany = c.visitOne;\n\n\tfunction innerJoin(relation) {\n\t\tvar joinRelation = relation.joinRelation;\n\t\tvar table = joinRelation.childTable;\t\t\n\t\tvar rightColumns = table._primaryColumns;\t\t\n\t\tvar leftColumns = joinRelation.columns;\n\n\t\tsql += ' INNER' + newShallowJoinSql(table,leftColumns,rightColumns,leftAlias,rightAlias);\t\n\t}\n\n\tfor (i = relations.length-1; i > 0; i--) {\n\t\tleftAlias = '_' + (i+1);\n\t\trightAlias = '_' + i;\n\t\trelation = relations[i];\n\t\trelation.accept(c);\n\t}\n\treturn sql;\n}\n\nmodule.exports = newJoinSql;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/relatedTable/whereSql.js":"var newShallowJoinSql = require('../query/singleQuery/joinSql/newShallowJoinSqlCore');\n\nfunction newWhereSql(relation,shallowFilter) {\n\tvar c = {};\n\tvar sql;\n\n\tc.visitJoin = function(relation) {\n\t\tvar table = relation.childTable;\n\t\tvar alias = relation.parentTable._dbName;\n\t\tvar leftColumns = relation.columns;\n\t\tvar rightColumns = table._primaryColumns;\n\t\twhere(alias,leftColumns,rightColumns);\n\t};\n\n\tc.visitOne = function(relation) {\n\t\tvar joinRelation = relation.joinRelation;\n\t\tvar rightColumns = joinRelation.columns;\t\t\n\t\tvar childTable = joinRelation.childTable;\n\t\tvar leftColumns = childTable._primaryColumns;\n\t\tvar alias = childTable._dbName;\n\t\twhere(alias,leftColumns,rightColumns);\n\t};\n\n\tc.visitMany = c.visitOne;\n\n\tfunction where(alias,leftColumns,rightColumns) {\n\t\tvar table = relation.childTable;\n\t\tvar joinCore = newShallowJoinSql(table,leftColumns,rightColumns,alias,'_1');\n\t\tif (shallowFilter)\n\t\t\tsql = shallowFilter.prepend(' WHERE ' + joinCore + ' AND ');\t\t\n\t\telse\n\t\t\tsql = ' WHERE ' + joinCore;\n\t}\n\n\trelation.accept(c);\n\treturn sql;\n}\n\nmodule.exports = newWhereSql;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/hasMany.js":"var newManyRelation = require('./newManyRelation');\nvar newRelatedTable = require('./newRelatedTable');\n\nfunction newOne(joinRelation) {\n\tvar c = {};\n\tvar parentTable = joinRelation.childTable;\n\n\tc.as = function (alias) {\t\n\t\tjoinRelation.rightAlias = alias;\n\t\tvar relation = newManyRelation(joinRelation);\n\t\tparentTable._relations[alias] = relation;\n\t\t\n\t\tObject.defineProperty(parentTable, alias, {\n    \t\tget: function() {\n        \t\treturn newRelatedTable([relation]);\n    \t\t}\n\t\t});\n\n\t\treturn relation;\n\t};\n\n\treturn c;\n}\n\nmodule.exports = newOne;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newManyRelation.js":"var newLeg = require('./relation/newManyLeg');\nvar newManyCache = require('./relation/newManyCache');\nvar newForeignKeyFilter = require('./relation/newForeignKeyFilter');\nvar getRelatives = require('./oneRelation/getRelatives');\nvar resultToPromise = require('./resultToPromise');\nvar newGetRelated = require('./newGetRelated');\n\nfunction newManyRelation(joinRelation) {\n    var c = {};\n    var manyCache = newManyCache(joinRelation);\n\n    c.joinRelation = joinRelation;\n    c.childTable = joinRelation.parentTable;\n\n    c.accept = function(visitor) {\n        visitor.visitMany(c);\n    };\n\n    c.getFromCache = function(parent) {\n        var row = manyCache.tryGet(parent);\n        return resultToPromise(row);\n    };\n\n    c.getFromDb = function(parent) {\n        var filter = newForeignKeyFilter(joinRelation, parent);\n        return c.childTable.getMany(filter);\n    };\n\n    c.getRelatives = function(parent) {\n        return getRelatives(parent, c);\n    };\n\n    c.toGetRelated = function(parent) {\n        return newGetRelated(parent, c);\n    };\n\n    c.expand = function(parent) {\n        return parent.expand(joinRelation.rightAlias);\n    };\n\n    c.getRowsSync = manyCache.tryGet;\n\n    c.toLeg = function() {\n        return newLeg(c);\n    };\n\n    return c;\n}\n\nmodule.exports = newManyRelation;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/relation/newManyLeg.js":"var newOneLeg = require('./newOneLeg');\n\nfunction newLeg(relation) {\t\n\tvar c = newOneLeg(relation);\n\tc.name = relation.joinRelation.rightAlias;\n\tc.accept = function(visitor) {\n\t\tvisitor.visitMany(c);\n\t};\n\n\tc.expand = relation.expand;\n\t\n\treturn c; \n}\n\nmodule.exports = newLeg;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/relation/newOneLeg.js":"var newCollection = require('../../newCollection');\n\nfunction newLeg(relation) {\n\n\tvar joinRelation = relation.joinRelation;\n\tvar c = {};\n\tc.name = joinRelation.rightAlias;\n\tvar span = {};\t\t\n\tspan.table = joinRelation.parentTable;\t\n\tspan.legs = newCollection();\n\tc.span = span;\n\tc.table = joinRelation.childTable;\n\tc.columns = joinRelation.columns;\n\tc.expand = relation.expand;\n\n\tc.accept = function(visitor) {\n\t\tvisitor.visitOne(c);\n\t};\n\n\treturn c;\t\n}\n\nmodule.exports = newLeg;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/relation/newManyCache.js":"var synchronizeChanged = require('./manyCache/synchronizeChanged');\nvar synchronizeAdded = require('./manyCache/synchronizeAdded');\nvar synchronizeRemoved = require('./manyCache/synchronizeRemoved');\nvar extractParentKey = require('./manyCache/extractParentKey');\nvar newCacheCore = require('./newManyCacheCore');\nvar newId = require('../../newId');\nvar getSessionSingleton = require('../getSessionSingleton');\nvar setSessionSingleton = require('../setSessionSingleton');\n\nfunction newManyCache(joinRelation) {\n    var c = {};\n    var key = newId();\n\n    c.tryAdd = function(parent, child) {\n        var cache = getSessionSingleton(key);\n        cache.tryAdd(parent, child);\n        synchronizeChanged(c, joinRelation, parent, child);\n    };\n\n    c.tryRemove = function(parent, child) {\n        var cache = getSessionSingleton(key);\n        cache.tryRemove(parent, child);\n    };\n\n    c.tryGet = function(parentRow) {\n        var cache = getSessionSingleton(key);\n        if (!cache) {\n            cache = newCacheCore(joinRelation);\n            setSessionSingleton(key, cache);\n            fillCache(cache);\n            synchronizeAdded(c.tryAdd, joinRelation);\n            synchronizeRemoved(c.tryRemove, joinRelation);\n        }\n        return cache.tryGet(parentRow);\n    };\n\n\n    function fillCache(cache) {\n        var childTable = joinRelation.parentTable;\n        var childCache = childTable._cache;\n        var children = childCache.getAll();\n        children.forEach(addToCache);\n\n        function addToCache(child) {\n            var parent = extractParentKey(joinRelation, child);  \n            c.tryAdd(parent, child);\n        }\n    }\n\n    \n\n    return c;\n}\n\nmodule.exports = newManyCache;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/relation/manyCache/synchronizeChanged.js":"var extractParentKey = require('./extractParentKey');\n\nfunction synchronizeChanged(manyCache, joinRelation, parent, child) {\n    var columns = joinRelation.columns;\n    columns.forEach(subscribeColumn);\n    child = null;\n\n    function subscribeColumn(column) {\n        child.subscribeChanged(onChanged, column.alias);\n    }\n\n    function unsubscribe(child) {\n        columns.forEach(unsubscribeColumn);\n\n        function unsubscribeColumn(column) {\n            child.unsubscribeChanged(onChanged, column.alias);\n        }\n    }\n\n    function onChanged(child) {\n        unsubscribe(child);\n        manyCache.tryRemove(parent, child);\n        var newParent = extractParentKey(joinRelation, child);\n        manyCache.tryAdd(newParent, child);\n    }\n\n\n\n}\n\nmodule.exports = synchronizeChanged;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/relation/manyCache/extractParentKey.js":"function extractParentKey(joinRelation, child) {\n\n    var childTable = joinRelation.childTable;\n    var primaryColumns = childTable._primaryColumns;\n    var parent = {};\n\n    joinRelation.columns.forEach(addKeyToParent);\n\n    function addKeyToParent(childPk, index) {\n        var primaryColumn = primaryColumns[index];\n        parent[primaryColumn.alias] = child[childPk.alias];\n    }\n\n    return parent;\n}\n\nmodule.exports = extractParentKey;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/relation/manyCache/synchronizeAdded.js":"var extractParentKey = require('./extractParentKey');\n\nfunction synchronizeAdded(action, joinRelation) {\n\tvar cache = joinRelation.parentTable._cache;\n\tcache.subscribeAdded(onAdded);\n\t\n\tfunction onAdded(child) {\n\t\tvar parent = extractParentKey(joinRelation, child);\n\t\taction(parent, child);\n\t}\n}\n\nmodule.exports = synchronizeAdded;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/relation/manyCache/synchronizeRemoved.js":"var extractParentKey = require('./extractParentKey');\n\nfunction synchronizeRemoved(action, joinRelation) {\n\tvar cache = joinRelation.parentTable._cache;\n\tcache.subscribeRemoved(onRemoved);\n\t\n\tfunction onRemoved(child) {\n\t\tvar parent = extractParentKey(joinRelation, child);\n\t\taction(parent, child);\n\t}\n}\n\nmodule.exports = synchronizeRemoved;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/relation/newManyCacheCore.js":"var newCacheCore = require('../newCache');\nvar newRowArray = require('../rowArray');\n\nfunction newManyCache(joinRelation) {\n    var c = {};\n    var cache = newCacheCore();\n    var primaryColumns = joinRelation.childTable._primaryColumns;\n\n    c.tryGet = function(parentRow) {\n        var key = toKey(parentRow);\n        var rows =  cache.tryGet(key);\n        if (!rows) \n            return newArray();\n        return rows;\n    };\n\n    function tryAdd(parentRow, childRow) {\n        var key = toKey(parentRow);\n        var existing = cache.tryGet(key);\n        if(existing) {\n            existing.push(childRow);\n            return;\n        }\n        var rows = newArray();\n        rows.push(childRow);\n        existing = cache.tryAdd(key, rows);\n    }\n\n    function newArray() {\n        return newRowArray(joinRelation.parentTable);\n    }\n\n    c.tryAdd = tryAdd;\n\n    c.tryRemove = function(parentRow, childRow) {\n        var key = toKey(parentRow);\n        var existing = cache.tryGet(key);\n        var index = existing.indexOf(childRow);\n        existing.splice(index,1);\n    };\n\n    function toKey(row) {\n        return primaryColumns.map(onColumn);\n\n        function onColumn(column) {\n            return row[column.alias];\n        }\n    }\n\n    return c;\n}\n\nmodule.exports = newManyCache;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newCache.js":"var newEmitEvent = require('../emitEvent');\n\nfunction cacheCore() {\n    var emitAdded = newEmitEvent();\n    var emitRemoved = newEmitEvent();\n    var c = {};\n    var cache = {};\n    var keyLength;\n\n    c.tryGet = function(key) {\n        var index = 0;\n        var keyLength = key.length;\n\n        return tryGetCore(cache, index);    \n\n        function tryGetCore(cache, index) {\n            var keyValue = key[index];\n            var cacheValue = cache[keyValue];\n            if (typeof cacheValue === 'undefined')\n                return null;\n            if (keyLength - 1 == index)\n                return cacheValue;\n            return tryGetCore(cache[keyValue], ++index);\n        }\n\n    };\n\n    c.tryAdd = function(key, result) {\n        var index = 0;\n        keyLength = key.length;\n        \n        return  addCore(cache, index);\n        \n        function addCore(cache, index) {\n            var keyValue = key[index];\n                \n            if (keyLength - 1 == index) {                \n                if (keyValue in cache)\n                    return cache[keyValue];\n                \n                cache[keyValue] = result;\n                emitAdded(result);\n                return result;\n            }\n            if (! (keyValue in cache))\n                cache[keyValue] = {};            \n            return addCore(cache[keyValue], ++index);\n        }\n    };\n\n    c.tryRemove = function(key) { \n        var index = 0;\n        var keyLength = key.length;\n\n        return tryRemoveCore(cache, index);\n\n        function tryRemoveCore(cache, index) {\n            var keyValue = key[index];\n            if (!(keyValue in cache))\n                return null;\n            var cacheValue = cache[keyValue];\n            if (keyLength - 1 == index) {\n                delete cache[keyValue];\n                emitRemoved(cacheValue);\n                return cacheValue;\n            }\n                \n            return tryRemoveCore(cache[keyValue], ++index);\n        }\n\n    };\n\n    c.getAll = function() {\n        var index = 0;\n        var result = [];\n        getAllCore(cache, index);\n\n        function getAllCore(cache, index) {\n            for (var name in cache) {\n                var value = cache[name];\n                if (index === keyLength - 1)\n                    result.push(value);\n                else\n                    getAllCore(value, index+1);\n            }\n        }\n        return result;\n    };\n\n    c.subscribeAdded = emitAdded.add;\n    c.subscribeRemoved = emitRemoved.add;\n\n    return c;\n}\n\nmodule.exports = cacheCore;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/relation/newForeignKeyFilter.js":"function newForeignKeyFilter(joinRelation, parentRow) {\n    var columns = joinRelation.columns;\n    var rightTable = joinRelation.childTable;\n\n    var filter = getNextFilterPart(0);\n\n    for (var i = 1; i < columns.length; i++) {\n\n        filter = filter.and(getNextFilterPart(i));\n    }\n\n    function getNextFilterPart(index) {\n        var column = columns[index];\n        var pk = rightTable._primaryColumns[index];\n        return column.eq(parentRow[pk.alias]);\n    }\n    return filter;\n}\n\nmodule.exports = newForeignKeyFilter;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/oneRelation/getRelatives.js":"var legToQuery = require('../query/addSubQueries/manyLegToQuery');\nvar getRelativesCore = require('../getRelativesCore');\n\nmodule.exports = getRelativesCore.bind(null, legToQuery);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/addSubQueries/manyLegToQuery.js":"var newShallowJoinSql = require('./newShallowJoinSql');\nvar newQuery = require('../../newQuery');\nvar newParameterized = require('../newParameterized');\nvar extractOrderBy = require('../extractOrderBy');\n\nfunction manyLegToQuery(queries, rightAlias,leg,legNo,filter,innerJoin,limitQuery) {\t\n\tvar leftAlias = rightAlias + '_' + legNo;\n\tvar span = leg.span;\n\tvar rightTable = leg.table;\n\tvar rightColumns = rightTable._primaryColumns;\n\tvar leftColumns = leg.columns;\n\tvar orderBy = extractOrderBy(span.table, leftAlias, span.orderBy);\n\t \n\tvar shallowJoin  = newShallowJoinSql(rightTable,leftColumns,rightColumns,leftAlias,rightAlias,limitQuery);\n\tinnerJoin = shallowJoin.append(innerJoin);\t\n\treturn newQuery(queries, span.table,filter,span,leftAlias,innerJoin,orderBy);\n}\n\nmodule.exports = manyLegToQuery;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/hasOne.js":"var newOneRelation = require('./newOneRelation');\nvar newRelatedTable = require('./newRelatedTable');\n\nfunction newOne(joinRelation) {\n\tvar c = {};\n\tvar parentTable = joinRelation.childTable;\n\n\tc.as = function (alias) {\t\n\t\tjoinRelation.rightAlias = alias;\n\t\tvar relation = newOneRelation(joinRelation);\n\t\tparentTable._relations[alias] = relation;\n\n\t\tObject.defineProperty(parentTable, alias, {\n    \t\tget: function() {\n        \t\treturn newRelatedTable([relation]);\n    \t\t}\n\t\t});\n\t\treturn relation;\n\t};\n\n\treturn c;\n}\n\nmodule.exports = newOne;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newOneRelation.js":"var newLeg = require('./relation/newOneLeg');\nvar newOneCache = require('./relation/newOneCache');\nvar newForeignKeyFilter = require('./relation/newForeignKeyFilter');\nvar getRelatives = require('./oneRelation/getRelatives');\nvar resultToPromise = require('./resultToPromise');\nvar newGetRelated = require('./newGetRelated');\n\nfunction newOneRelation(joinRelation) {\n    var c = {};\n    var oneCache = newOneCache(joinRelation);\n\n    c.joinRelation = joinRelation;\n    c.childTable = joinRelation.parentTable;\n\n    c.accept = function(visitor) {\n        visitor.visitOne(c);\n    };\n\n    c.getFromCache = function(parent) {\n        var row = oneCache.tryGet(parent);\n        return resultToPromise(row);\n    };\n\n    c.getFromDb = function(parent) {\n        var filter = newForeignKeyFilter(joinRelation, parent);\n        return c.childTable.tryGetFirst(filter);\n    };\n\n    c.getRelatives = function(parent) {\n        return getRelatives(parent, c);\n    };\n\n    c.toGetRelated = function(parent) {\n        return newGetRelated(parent, c);\n    };\n\n    c.expand = function(parent) {\n        return parent.expand(joinRelation.rightAlias);\n    };\n\n    c.getRowsSync = oneCache.tryGet;\n\n    c.toLeg = function() {\n        return newLeg(c);\n    };\n\n    return c;\n}\n\nmodule.exports = newOneRelation;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/relation/newOneCache.js":"var newManyCache = require('./newManyCache');\n\nfunction newOneCache(joinRelation) {\n\tvar c = {};\n\tvar cache = newManyCache(joinRelation);\n\n\tc.tryGet = function(parent) {\n\t\tvar res = cache.tryGet(parent);\n\t\tif (res.length === 0)\n\t\t\treturn null;\n\t\treturn res[0];\n\t};\n\treturn c;\n}\n\nmodule.exports = newOneCache;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/tryGetById.js":" var tryGetFromCacheById = require('./tryGetFromCacheById');\n var tryGetFromDbById = require('./tryGetFromDbById');\n var resultToPromise = require('./resultToPromise');\n\nfunction get() {\n\tvar cached =  tryGetFromCacheById.apply(null,arguments);\n\tif (cached)\n\t\treturn resultToPromise(cached);\n\treturn tryGetFromDbById.apply(null,arguments);\n}\nget.exclusive = tryGetFromDbById.exclusive;\n\nmodule.exports = get;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newRowCache.js":"var newDomainCache = require('./newDomainCache');\n\nfunction newRowCache(table) {\n\tvar c = {};\n\tvar cache = newDomainCache();\n\tvar pkNames;\n\tvar rowToKey = firstRowToKey;\n\n\tfunction getPkNames() {\n\t\tvar names = {};\t\t\n\t\tvar primaryColumns = table._primaryColumns;\t\t\n\t\tvar keyLength = primaryColumns.length;\n\t\tfor (var i = 0; i < keyLength; i++) {\n\t\t\tvar column = primaryColumns[i];\n\t\t\tnames[column.alias] = null;\n\t\t}\n\t\treturn names;\n\t}\n\n\tc.tryGet = function(row) {\n\t\tvar key = rowToKey(row);\n\t\treturn cache.tryGet(key);\n\n\t};\n\n\tfunction firstRowToKey(row) {\n\t\tpkNames = getPkNames();\n\t\trowToKey = nextRowToKey;\n\t\ttable = null;\n\t\treturn rowToKey(row);\n\t}\n\n\tfunction nextRowToKey(row) {\t\t\n\t\tvar key = [];\n\t\tfor(var pkName in pkNames) {\n\t\t\tkey.push(row[pkName]);\n\t\t}\n\t\treturn key;\n\t}\n\n\tc.tryAdd = function(row) {\n\t\tvar key = rowToKey(row);\n\t\treturn cache.tryAdd(key, row);\n\t};\n\n\tc.tryRemove = function(row) {\n\t\tvar key = rowToKey(row);\n\t\tcache.tryRemove(key);\n\t};\n\n\tc.subscribeAdded = cache.subscribeAdded;\t\n\tc.subscribeRemoved = cache.subscribeRemoved;\n\t\n\tc.getAll = cache.getAll;\n\n\treturn c;\n}\n\nmodule.exports = newRowCache;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newDomainCache.js":"var newId = require('../newId');\nvar _getCache = require('./domainCache/getCache');\n\nfunction newDomainCache() {\n\tvar c = {};\n\tvar id = newId();\n\n\tc.tryGet = function(key) {\t\t\n\t\tvar cache = getCache();\t\t\n\t\treturn cache.tryGet(key);\n\t};\n\n\tc.tryAdd = function(key, value) {\n\t\tvar cache = getCache();\t\t\n\t\treturn cache.tryAdd(key,value);\n\t};\n\n\tc.getAll = function() {\n\t\tvar cache = getCache();\t\t\n\t\treturn cache.getAll();\t\n\t};\n\n\tc.tryRemove = function(key) {\n\t\tvar cache = getCache();\t\t\n\t\treturn cache.tryRemove(key);\n\t};\n\n\tc.subscribeAdded = function(onAdded) {\n\t\tvar cache = getCache();\t\t\n\t\treturn cache.subscribeAdded(onAdded);\n\t};\n\n\tc.subscribeRemoved = function(onRemoved) {\n\t\tvar cache = getCache();\t\t\n\t\treturn cache.subscribeRemoved(onRemoved);\n\t};\n\n\tfunction getCache() {\n\t\treturn _getCache(id);\n\t}\n\treturn c;\n}\n\nmodule.exports = newDomainCache;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/domainCache/getCache.js":"var newCache = require('../newCache');\nvar getSessionSingleton = require('../getSessionSingleton');\nvar setSessionSingleton = require('../setSessionSingleton');\n\nfunction getCache(id) {\n\tvar cache = getSessionSingleton(id);\n\tif (cache)\n\t\treturn cache;\n\tcache = newCache();\n\tsetSessionSingleton(id, cache);\n\treturn cache;\n}\n\n\n\nmodule.exports = getCache;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/insert.js":"var newRow = require('./commands/newRow');\nvar newInsertCommand = require('./commands/newInsertCommand');\nvar pushCommand = require('./commands/pushCommand');\n\nfunction insert(table, id, id2)  {\n\tvar args = [].slice.call(arguments);\n\tvar row = newRow.apply(null, args);\n\trow = table._cache.tryAdd(row);\n\tvar cmd = newInsertCommand(table, row);\n\tpushCommand(cmd);\n\treturn row;\n}\n\nmodule.exports = insert;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/newRow.js":"var decodeDbRow = require('../resultToRows/decodeDbRow');\n\nfunction newRow(table, id, id2, etc) {\n    var dto = {};\n    table._columns.forEach(addColumn);\n\n    function addColumn(column) {\n        var alias = column.alias;\n        if ('default' in column)\n            dto[alias] = column.default;\n        else\n            dto[alias] = null;\n    }\n\n    for (var i = 1; i < arguments.length; i++) {\n        var pkValue = arguments[i];\n        var column = table._primaryColumns[i - 1];\n        dto[column.alias] = pkValue;\n    }\n\n    return decodeDbRow(table, table, dto);\n}\n\nmodule.exports = newRow;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/newInsertCommand.js":"var newInsertCommandCore = require('./newInsertCommandCore');\nvar newImmutable = require('../../newImmutable');\n\nfunction newInsertCommand(table, row) {\n    return new InsertCommand(table, row);\n}\n\nfunction InsertCommand(table, row) {\n    this.__getCoreCommand = newImmutable(newInsertCommandCore);\n    this._table = table;\n    this._row = row;\n}\n\nInsertCommand.prototype._getCoreCommand = function() {\n    return this.__getCoreCommand(this._table, this._row);\n};\n\nInsertCommand.prototype.sql = function() {\n    return this._getCoreCommand().sql();\n};\n\nInsertCommand.prototype.matches = function(otherRow) {\n    return this._row == otherRow;\n};\n\nInsertCommand.prototype.endEdit = InsertCommand.prototype.sql;\n\nObject.defineProperty(InsertCommand.prototype, 'parameters', {\n    get: function() {\n        return this._getCoreCommand().parameters;\n    }\n});\n\nmodule.exports = newInsertCommand;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/newInsertCommandCore.js":"var newParameterized = require('../query/newParameterized');\nvar getSqlTemplate = require('./insert/getSqlTemplate');\nvar util = require('util');\n\nfunction newInsertCommandCore(table, row) {\n    var command;\n    var columnNames = [];\n    var parameters = [];\n    var values = [getSqlTemplate(table)];\n\n    var columns = table._columns;\n    for (var i = 0; i < columns.length; i++) {\n        var column = columns[i];\n        var alias = column.alias;\n        var encoded = column.encode(row[alias]);\n        if (encoded.parameters.length > 0) {\n        \tvalues.push('?');\n        \tparameters.push(encoded.parameters[0]);\n        }\n        else\n        \tvalues.push(encoded.sql());\n    }\n\n    var sql = util.format.apply(null, values);\n    return newParameterized(sql, parameters);\n}\n\nmodule.exports = newInsertCommandCore;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/insert/getSqlTemplate.js":"function getSqlTemplate(table) {\n\tif (table._insertTemplate)\n\t\treturn table._insertTemplate;\n    var columnNames = [];\n    var values = [];\n    var sql = \"INSERT INTO \" + table._dbName + \" (\";\n    addDiscriminators();\n    addColumns();\n    sql = sql + columnNames.join(\",\") + \") VALUES (\" + values.join(',') + \")\";\n\ttable._insertTemplate = sql;\n    return sql;\n\n    function addDiscriminators() {\n        var discriminators = table._columnDiscriminators;\n        for (var i = 0; i < discriminators.length; i++) {\n            var parts = discriminators[i].split(\"=\");\n            columnNames.push(parts[0]);\n            values.push(parts[1]);\n        }\n    }\n\n    function addColumns() {\n        var columns = table._columns;\n        for (var i = 0; i < columns.length; i++) {\n            var column = columns[i];\n            columnNames.push(column._dbName);\n            values.push('%s');\n        }\n    }\n}\n\nmodule.exports = getSqlTemplate;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/delete.js":"var pushCommand = require('./commands/pushCommand');\nvar newDeleteCommand = require('./commands/newDeleteCommand');\nvar extractDeleteStrategy = require('./extractDeleteStrategy');\nvar negotiateRawSqlFilter = require('./column/negotiateRawSqlFilter');\nvar emptyPromise = require('./resultToPromise')();\n\nfunction _delete(table, filter, strategy) {\n\tfilter = negotiateRawSqlFilter(filter);\n\tstrategy = extractDeleteStrategy(strategy);\n\tvar relations = [];\n\tvar cmds = [];\n\n\tcmds = newDeleteCommand(cmds, table, filter, strategy, relations);\n\tcmds.forEach(function(cmd) {\n\t\tpushCommand(cmd);\n\t});\n\treturn emptyPromise;\n}\n\nmodule.exports = _delete;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/cascadeDelete.js":"var _delete = require('./delete');\nvar newObject = require('../newObject');\nvar newCascadeDeleteStrategy = require('./newCascadeDeleteStrategy');\n\nfunction cascadeDelete(table, filter) {\n\tvar empty = newObject();\n\tvar strategy = newCascadeDeleteStrategy(empty, table);\n\treturn _delete(table, filter, strategy);\t\n}\n\nmodule.exports = cascadeDelete;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/createReadStream.js":"var createReadStreamNative = require('./createReadStreamNative');\nvar createReadStreamDefault = require('./createReadStreamDefault');\n\nfunction createReadStream(table, db, filter, strategy, streamOptions) {\n\tvar create;\n\tvar c = {};\n\n\tc.visitPg = function() {\n\t\tcreate =  createReadStreamNative;\n\t};\n\t\n\tc.visitMySql = c.visitPg;\n\n\tc.visitSqlite = function() {\n\t\tcreate =  createReadStreamDefault;\n\t}\n\n\tdb.accept(c);\n\n\treturn create(table, db, filter, strategy, streamOptions);\n}\n\nmodule.exports = createReadStream;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/createReadStreamNative.js":"var createReadStreamCore = require('./createReadStreamCoreNative');\nvar Stream = require('stream');\n\nfunction createReadStreamNative(table, db, filter, strategy, streamOptions) {\n    var transformer = Stream.Transform({ objectMode: true });\n    var started;\n    transformer._transform = function(chunk, enc, cb) {\n        var row = JSON.parse(chunk.result);\n        transformer.push(row);\n        cb();\n    };\n\n    return createReadStreamCore(table, db, filter, strategy, transformer, streamOptions);\n}\n\nmodule.exports = createReadStreamNative;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/createReadStreamCoreNative.js":"var newQuery = require('./readStream/newQuery');\nvar strategyToSpan = require('./strategyToSpan');\nvar negotiateRawSqlFilter = require('./column/negotiateRawSqlFilter');\nvar newQueryStream = require('./readStream/newQueryStream');\nvar deferred = require('deferred');\nvar domain = require('domain');\n\nfunction createReadStreamCoreNative(table, db, filter, strategy, transformer, streamOptions) {\n    var alias = table._dbName;\n    filter = negotiateRawSqlFilter(filter);\n    var span = strategyToSpan(table, strategy);\n\n    var originalDomain = process.domain || domain.create();\n    originalDomain.add(transformer);\n\n    var def = deferred();\n\n    db.transaction()\n        .then(start)\n        .then(db.commit)\n        .then(null, onError)\n\n    function start() {\n        var query = newQuery(db, table, filter, span, alias);\n        var queryStream = newQueryStream(query, streamOptions);\n        queryStream.on('end', def.resolve);\n        queryStream.on('error', onStreamError);\n        queryStream.pipe(transformer);\n        return def.promise;\n    }\n\n    function onStreamError(e) {\n        def.reject(e);\n    }\n\n    function onError(e) {\n        transformer.emit('error', e);\n        db.rollback();\n    }\n\n    return transformer;\n}\n\nmodule.exports = createReadStreamCoreNative;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/readStream/newQuery.js":"var newMySqlQuery = require('./mySql/newQuery');\nvar newPgQuery = require('./pg/newQuery');\n\nfunction newQuery(db,table,filter,span,alias) {\t\n\tvar c = {};\n\tvar _newQuery;\n\n\tc.visitPg = function() {\n\t\t_newQuery = newPgQuery;\n\t};\n\tc.visitMySql = function() {};\n\t\t_newQuery = newMySqlQuery;\n\n\tdb.accept(c);\n\n\tvar args = [];\n\tfor (var i = 1; i < arguments.length; i++) {\n\t\targs.push(arguments[i]);\n\t}\n\treturn _newQuery.apply(null, args);\n}\n\nmodule.exports = newQuery","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/readStream/mySql/newQuery.js":"var newSingleQuery = require('./query/newSingleQuery');\nvar newSubQueries = require('./query/newSubQueries');\nvar extractFilter = require('../../query/extractFilter');\nvar extractOrderBy = require('../extractOrderBy');\nvar extractLimit = require('../extractLimit');\n\nfunction newQuery(table,filter,span,alias) {\t\n\tfilter = extractFilter(filter);\n\tvar orderBy = extractOrderBy(alias,span);\n\tvar limit = extractLimit(span);\n\n\tvar subQueries = newSubQueries(table,span,alias);\n\treturn newSingleQuery(table,filter,alias,subQueries,orderBy,limit);\n}\n\nmodule.exports = newQuery;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/readStream/mySql/query/newSingleQuery.js":"var newColumnSql = require('./singleQuery/newShallowColumnSql');\nvar newWhereSql = require('../../../query/singleQuery/newWhereSql');\nvar template = 'select json_object(%s%s) as result from %s %s%s%s%s';\nvar util = require('util');\n\nfunction _new(table,filter,alias,subQueries,orderBy,limit) {\n\tvar c = {};\n\n\tc.sql = function() {\n\t\tvar name = table._dbName;\n\t\tvar columnSql = newColumnSql(table,alias);\n\t\tvar whereSql = newWhereSql(table,filter,alias);\n\t\treturn util.format(template, columnSql, subQueries, name, alias, whereSql, orderBy, limit);\n\t};\n\t\n\tc.parameters = filter.parameters;\t\n\n\treturn c;\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/readStream/mySql/query/singleQuery/newShallowColumnSql.js":"var util = require('util');\n\nfunction _new(table,alias) {\n\tvar columnFormat = \"'%s',%s.%s\";\n\tvar columns = table._columns;\n\tvar sql = '';\n\tvar separator = '';\n\tfor (var i = 0; i < columns.length; i++) {\n\t\tvar column = columns[i];\n\t\tif (!('serializable' in column && !column.serializable))\n\t\t\tsql = sql + separator + util.format(columnFormat, column.alias, alias, column._dbName);\n\t\tseparator = ',';\n\t}\n\treturn sql;\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/readStream/mySql/query/newSubQueries.js":"var joinLegToQuery = _joinLegToQuery;\nvar oneLegToQuery = _oneLegToQuery;\nvar manyLegToQuery = _manyLegToQuery;\n\nfunction newSubQueries(table,span,alias) {\n\tvar result = [];\n\tvar c = {};\n\tvar _legNo;\n\n\tc.visitJoin = function(leg) {\n\t\tresult.push(joinLegToQuery( alias,leg,_legNo));\n\t};\n\tc.visitOne = function(leg) {\n\t\tresult.push(oneLegToQuery( alias,leg,_legNo));\n\t};\n\tc.visitMany = function(leg) {\n\t\tresult.push(manyLegToQuery( alias,leg,_legNo));\n\t};\n\n\tspan.legs.forEach(onEachLeg);\t\n\n\tfunction onEachLeg(leg,legNo) {\n\t\t_legNo = legNo;\n\t\tleg.accept(c);\n\t}\n\n\treturn result.join('');\n}\n\nfunction _joinLegToQuery() {\n\tjoinLegToQuery = require('./newSubQueries/joinLegToQuery');\t\n\treturn joinLegToQuery.apply(null,arguments);\n}\n\nfunction _oneLegToQuery() {\n\toneLegToQuery = require('./newSubQueries/oneLegToQuery');\t\n\treturn oneLegToQuery.apply(null,arguments);\n}\n\nfunction _manyLegToQuery() {\n\tmanyLegToQuery = require('./newSubQueries/manyLegToQuery');\t\n\treturn manyLegToQuery.apply(null,arguments);\n}\n\n\n\nmodule.exports = newSubQueries;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/readStream/extractOrderBy.js":"function extractOrderBy(alias, span) {\n    var table = span.table;\n    var dbNames = [];\n    var orderBy = span.orderBy;\n    var i;\n    if (span.orderBy) {\n        if (typeof orderBy === 'string')\n            orderBy = [orderBy];\n        for (i = 0; i < orderBy.length; i++) {\n            var nameAndDirection = extractNameAndDirection(orderBy[i]);\n            pushColumn(nameAndDirection.name, nameAndDirection.direction);\n        }\n    } else\n        for (i = 0; i < table._primaryColumns.length; i++) {\n            pushColumn(table._primaryColumns[i].alias);\n        }\n\n    function extractNameAndDirection(orderBy) {\n        var elements = orderBy.split(' ');\n        var direction = '';\n        if (elements.length > 1) {\n            direction = ' ' + elements[1];\n        }\n        return {\n            name: elements[0],\n            direction: direction\n        };\n    }\n    function pushColumn(property, direction) {\n        direction = direction || '';\n        var column = table[property];\n        dbNames.push(alias + '.' + column._dbName + direction);\n    }\n\n    return ' order by ' + dbNames.join(',');\n}\n\nmodule.exports = extractOrderBy;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/readStream/extractLimit.js":"function extractLimit(span) {\n\tif (span.limit)\n\t\treturn ' limit ' + span.limit;\n\treturn '';\n}\n\nmodule.exports = extractLimit;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/readStream/pg/newQuery.js":"var newQueryCore = require('./newQueryCore');\n\nfunction newQuery(table,filter,span,alias) {\t\n\tvar query = newQueryCore.apply(null, arguments);\n\treturn query.prepend('select row_to_json(r)::text as result from (').append(') r');\n}\n\nmodule.exports = newQuery;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/readStream/pg/newQueryCore.js":"var newSingleQuery = require('./query/newSingleQuery');\nvar newSubQueries = require('./query/newSubQueries');\nvar extractFilter = require('../../query/extractFilter');\nvar extractOrderBy = require('../extractOrderBy');\nvar extractLimit = require('../extractLimit');\nvar newParameterized = require('../../query/newParameterized');\n\nfunction newQuery(table,filter,span,alias) {\t\n\tfilter = extractFilter(filter);\n\tvar orderBy = extractOrderBy(alias,span);\n\tvar limit = extractLimit(span);\n\tvar subQueries = newSubQueries(table,span,alias);\n\tvar query = newSingleQuery(table,filter,alias,subQueries,orderBy,limit);\n\treturn newParameterized(query.sql(), query.parameters);\n}\n\nmodule.exports = newQuery;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/readStream/pg/query/newSingleQuery.js":"var newColumnSql = require('./singleQuery/newShallowColumnSql');\nvar newWhereSql = require('../../../query/singleQuery/newWhereSql');\n\nfunction _new(table,filter,alias,subQueries,orderBy,limit) {\n\tvar c = {};\n\n\tc.sql = function() {\n\t\tvar name = table._dbName;\n\t\tvar columnSql = newColumnSql(table,alias);\n\t\tvar whereSql = newWhereSql(table,filter,alias);\n\t\treturn 'select ' + columnSql + subQueries + ' from ' + name + ' ' + alias  + whereSql + orderBy + limit;\n\t};\n\n\tc.parameters = filter.parameters;\t\n\n\treturn c;\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/readStream/pg/query/singleQuery/newShallowColumnSql.js":"var util = require('util');\n\nfunction _new(table,alias) {\n\tvar columnFormat = '%s as \"%s\"';\n\tvar columns = table._columns;\n\tvar sql = '';\n\tvar separator = alias + '.';\n\tfor (var i = 0; i < columns.length; i++) {\n\t\tvar column = columns[i];\n\t\tif (!('serializable' in column && !column.serializable))\n\t\t\tsql = sql + separator + util.format(columnFormat, column._dbName, column.alias);\n\t\tseparator = ',' + alias + '.';\n\t}\n\treturn sql;\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/readStream/pg/query/newSubQueries.js":"var joinLegToQuery = _joinLegToQuery;\nvar oneLegToQuery = _oneLegToQuery;\nvar manyLegToQuery = _manyLegToQuery;\n\nfunction newSubQueries(table,span,alias) {\n\tvar result = [];\n\tvar c = {};\n\tvar _legNo;\n\n\tc.visitJoin = function(leg) {\n\t\tresult.push(joinLegToQuery( alias,leg,_legNo));\n\t};\n\tc.visitOne = function(leg) {\n\t\tresult.push(oneLegToQuery( alias,leg,_legNo));\n\t};\n\tc.visitMany = function(leg) {\n\t\tresult.push(manyLegToQuery( alias,leg,_legNo));\n\t};\n\n\tspan.legs.forEach(onEachLeg);\t\n\n\tfunction onEachLeg(leg,legNo) {\n\t\t_legNo = legNo;\n\t\tleg.accept(c);\n\t}\n\n\treturn result.join('');\n}\n\nfunction _joinLegToQuery() {\n\tjoinLegToQuery = require('./newSubQueries/joinLegToQuery');\t\n\treturn joinLegToQuery.apply(null,arguments);\n}\n\nfunction _oneLegToQuery() {\n\toneLegToQuery = require('./newSubQueries/oneLegToQuery');\t\n\treturn oneLegToQuery.apply(null,arguments);\n}\n\nfunction _manyLegToQuery() {\n\tmanyLegToQuery = require('./newSubQueries/manyLegToQuery');\t\n\treturn manyLegToQuery.apply(null,arguments);\n}\n\n\n\nmodule.exports = newSubQueries;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/readStream/newQueryStream.js":"var getSessionSingleton = require('../getSessionSingleton');\n\nfunction newQueryStream(query, options) {\n\tvar dbClient = getSessionSingleton('dbClient');\n\treturn dbClient.streamQuery(query, options);\n}\n\nmodule.exports = newQueryStream;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/createReadStreamDefault.js":"var extractFilter = require('./query/extractFilter');\nvar cloneStrategy = require('./cloneStrategy');\nvar domain = require('domain');\nvar defaultBatchSize = 200;\nvar Readable = require('stream').Readable;\nvar createBatchFilter = require('./readStreamDefault/createBatchFilter');\n\nfunction createReadStream(table, db, filter, strategy, streamOptions) {\n    filter = extractFilter(filter);\n    var batchFilter;\n    strategy = cloneStrategy(strategy);\n    var originalOrderBy = strategy.orderBy || [];\n    calculateOrderBy();\n    streamOptions = streamOptions || {};\n    var batchSize = streamOptions.batchSize || defaultBatchSize;\n    batchSize = (batchSize + 1) / 2 >> 0;\n    var maxRows = strategy.limit;\n    var currentRowCount = 0;\n    var busy;\n    var waitingforMore;\n    var dtos = [];\n    var lastDto;\n    var done;\n\n    var stream = Readable({ objectMode: true });\n    stream._read = function() {\n        waitingforMore = true;\n        if (!busy) {\n            if (dtos.length > 0)\n                negotiatePushStream();\n            else\n                getDtos();\n        }\n    }\n    var originalDomain = process.domain || domain.create();\n    originalDomain.add(stream);\n\n    function getDtos() {\n        busy = true;\n        return db.transaction()\n            .then(getBatch)\n            .then(onRows)\n            .then(onDtos)\n            .then(db.commit)\n            .then(negotiatePushStream, onError)\n    }\n\n    function onRows(rows) {\n        return rows.toDto(strategy);\n    }\n\n    function onDtos(result) {\n        busy = false;\n        currentRowCount += result.length;\n        lastDto = result[result.length - 1];\n        dtos = dtos.concat(result);\n        if (currentRowCount >= maxRows || result.length < batchSize) {\n            dtos.push(null);\n            done = true;\n        }\n    }\n\n    function negotiatePushStream() {\n        if (dtos.length <= batchSize && !done)\n            getDtos();\n        if (!waitingforMore)\n            return;\n        waitingforMore = false;\n        stream.push(dtos.shift());\n    }\n\n    function getBatch() {\n        calculateLimit();\n        calculateBatchFilter();\n        return table.getMany(batchFilter, strategy);\n    }\n\n    function calculateLimit() {\n        if (maxRows === undefined || maxRows === null)\n            strategy.limit = batchSize;\n        else {\n            var rowsLeft = maxRows - currentRowCount;\n            strategy.limit = Math.min(rowsLeft, batchSize);\n        }\n    }\n\n    function calculateOrderBy() {\n        strategy.orderBy = strategy.orderBy || [];\n        if (typeof strategy.orderBy === 'string') {\n            strategy.orderBy = [strategy.orderBy];\n            originalOrderBy = strategy.orderBy;\n        }\n        var primaryColumns = table._primaryColumns;\n        for (var i = 0; i < primaryColumns.length; i++) {\n            strategy.orderBy.push(primaryColumns[i].alias);\n        }\n    }\n\n    function calculateBatchFilter() {\n        batchFilter = createBatchFilter(table, filter, strategy, lastDto);\n    }\n\n    function onError(e) {\n        stream.emit('error', e);\n        db.rollback();\n    }\n\n    return stream;\n}\n\nmodule.exports = createReadStream;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/cloneStrategy.js":"function cloneStrategy(strategy, target) {\n\ttarget = target || {};\n    for (var name in strategy) {\n        target[name] = mapChild(strategy[name]);            \n    }\n    return target;\n}\n\nfunction mapChild(strategy) {\n\tif (strategy instanceof Array)\n\t\treturn cloneStrategy(strategy, []);\n\tif (strategy instanceof Object) {\n\t\treturn cloneStrategy(strategy, {});\n\t}\n\treturn strategy;\n}\n\nmodule.exports = cloneStrategy;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/readStreamDefault/createBatchFilter.js":"var emptyFilter = require('../../emptyFilter');\n\nfunction createBatchFilter(table, filter, strategy, lastDto) {\n    if (!lastDto) {\n        return filter;\n    }\n\n    var orderBy = strategy.orderBy;\n\n    for (var i = 0; i < strategy.orderBy.length; i++) {\n        var subFilter = createSubFilter(i);\n        filter = filter.or(subFilter);\n    }\n\n    function createSubFilter(index) {\n        var subFilter = emptyFilter;\n        for (var i = 0; i < index + 1; i++) {\n            var order = orderBy[i];\n            var elements = order.split(' ');\n            var name = elements[0];\n            var direction = elements[1] || 'asc';\n            var value = lastDto[name];\n            if (index === i) {\n                if (direction === 'asc')\n                    subFilter = subFilter.and(table[name].greaterThan(value));\n                else\n                    subFilter = subFilter.and(table[name].lessThan(value));\n            } else\n                subFilter = subFilter.and(table[name].eq(value));\n        }\n        return subFilter;\n    }\n\n    return filter;\n}\n\n\n\nmodule.exports = createBatchFilter;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/createJSONReadStream.js":"var createJSONReadStreamNative = require('./createJSONReadStreamNative');\nvar createJSONReadStreamDefault = require('./createJSONReadStreamDefault');\n\nfunction createJSONReadStream(table, db, filter, strategy, streamOptions) {\n    var create;\n    var c = {};\n\n    c.visitPg = function() {\n        create = createJSONReadStreamNative;\n    };\n\n    c.visitMySql = c.visitPg;\n\n    c.visitSqlite = function() {\n        create = createJSONReadStreamDefault;\n    };\n\n    db.accept(c);\n\n    return create(table, db, filter, strategy, streamOptions);\n}\n\nmodule.exports = createJSONReadStream;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/createJSONReadStreamNative.js":"var createReadStreamCore = require('./createReadStreamCoreNative');\nvar Stream = require('stream');\n\nfunction createJSONReadStream(table, db, filter, strategy, streamOptions) {\n    var transformer = Stream.Transform({ objectMode: true });\n    var started;\n    transformer._transform = function(chunk, enc, cb) {\n    \tif (started)\n        \ttransformer.push(',' + chunk.result);\n        else {\n        \ttransformer.push('[');\n        \ttransformer.push(chunk.result);\n        \tstarted = true;\n        } \n        cb();\n    };\n\n    transformer._flush = function(cb)\n    {\n    \ttransformer.push(']');\n    \tcb();\n    };\n\n    return createReadStreamCore(table, db, filter, strategy, transformer, streamOptions);\n}\n\nmodule.exports = createJSONReadStream;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/createJSONReadStreamDefault.js":"var createReadStreamCore = require('./createReadStreamDefault');\nvar Stream = require('stream');\n\nfunction createJSONReadStream(table, db, filter, strategy, streamOptions) {\n    var transformer = Stream.Transform({ objectMode: true });\n    var started;\n    transformer._transform = function(obj, enc, cb) {\n        var data = JSON.stringify(obj);\n        if (started)\n            transformer.push(',' + data);\n        else {\n            transformer.push('[');\n            transformer.push(data);\n            started = true;\n        }\n        cb();\n    };\n\n    transformer._flush = function(cb) {\n        transformer.push(']');\n        cb();\n    };\n\n    var objectStream = createReadStreamCore(table, db, filter, strategy, streamOptions);\n    objectStream.on('error', onError);\n    return objectStream.pipe(transformer)\n\n    function onError(e) {\n        transformer.emit('error', e);\n    }\n}\n\nmodule.exports = createJSONReadStream;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/createDomainSpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\tc.Domain = c.requireMock('domain');\n\tc.negotiateForwardProperty = c.requireMock('./createDomain/negotiateForwardProperty');\n\n\tc.sut = require('../createDomain');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emitEventSpec/new.js":"function act(c) {\r\n\tc.mock = require('a').mock;\r\n\tc.sut = require('../emitEvent')();\r\n}\r\n\r\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emptyFilterSpec/req.js":"var a = require('a');\nvar requireMock = a.requireMock;\nvar mock = a.mock;\n\nfunction act(c) {\t\n\tc.mock = mock;\n\tc.negotiateRawSqlFilter = requireMock('./table/column/negotiateRawSqlFilter');\n\t\n\tc.newParameterized =  requireMock('./table/query/newParameterized');\n\tc.parameterized = {};\n\tc.newParameterized.expect('').return(c.parameterized);\n\tc.sql = {};\n\tc.parameterized.sql = c.sql;\n\tc.parameters = {};\n\tc.parameterized.parameters = c.parameters;\n\tc.input = {};\n\n\tc.sut = require('../emptyFilter');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emptyFilterSpec/whenReq.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('parameters points at parameterized.parameters').assertEqual( c.parameters, c.sut.parameters)\n\t.it('sql points at parameterized.sql').assertEqual( c.sql, c.sut.sql)\n\t.it('not returns self').assertEqual( c.sut, c.sut.not())","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/indexSpec/req.js":"var a = require('a');\nvar mock = a.mock;\nvar requireMock = a.requireMock;\n\nfunction act(c) {\n    c.emptyFilter = requireMock('./emptyFilter');\n    c.mock = mock;\n    c.table = requireMock('./table');\n    c.commit = requireMock('./table/commit');\n    c.rollback = requireMock('./table/rollback');\n    c.pools = requireMock('./pools');\n    c.log = requireMock('./table/log');\n    c.log.registerLogger = {};\n\n    c.newDatabase = requireMock('./pg/newDatabase');\n    c.newMySqlDatabase = requireMock('./mySql/newDatabase');\n    c.newSqliteDatabase = requireMock('./sqlite/newDatabase');\n\n    c.query = requireMock('./query');\n    c.lock = requireMock('./lock');\n\n    c.pools.end = {};\n\n    c.sut = require('../index');\n}\n\nmodule.exports = act;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/indexSpec/whenReq.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n    .it('should expose emptyFilter as filter').assertEqual(c.emptyFilter, c.sut.filter)\n    .it('should expose table').assertEqual(c.table, c.sut.table)\n    .it('should expose command').assertEqual(c.command, c.sut.command)\n    .it('should expose rollback').assertEqual(c.rollback, c.sut.rollback)\n    .it('should set mySql').assertEqual(c.newMySqlDatabase, c.sut.mySql)\n    .it('should set pg').assertEqual(c.newDatabase, c.sut.pg)\n    .it('should set end').assertEqual(c.pools.end, c.sut.end)\n    .it('should set log to registerLogger').assertEqual(c.log.registerLogger, c.sut.log)\n    .it('should expose query').assertEqual(c.query, c.sut.query)\n    .it('should expose lock').assertEqual(c.lock, c.sut.lock)\n    \n    ","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/lockSpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\tc.query = c.requireMock('./query');\t\n\tc.toIntKey = c.requireMock('./lock/toIntKey');\n\n\tc.sut = require('../lock');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/newCollectionSpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should set length').assertEqual(2, c.sut.length)\n\t","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/newIdSpec/req.js":"var requireMock = require('a').requireMock;\n\nfunction act(c){\n\tc.nodeUid = requireMock('uuid');\n\tc.v4 = {};\n\tc.nodeUid.v4 = c.v4;\n\t\n\tc.returned = require('../newId');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/newIdSpec/whenReq.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return uuid.v4').assertEqual(c.v4, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/newObjectSpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return new object').assertEqual('object', typeof c.returned)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/poolsSpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\n\n\tc.promise = c.requireMock('./table/promise');\n\tc.newObject = c.requireMock('./newObject');\n\t\n\tc.pools = {};\n\tc.newObject.expect().return(c.pools);\n\n\tc.sut = require('../pools');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/poolsSpec/whenReq.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return emtpy object singleton').assertEqual(c.pools, c.sut)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/querySpec/execute.js":"var a = require('a');\nvar mock = a.mock;\nvar requireMock = a.requireMock;\nvar then = a.then;\n\nfunction act(c){\n\tc.wrapQuery = requireMock('./query/wrapQuery');\n\tc.executeQueries = requireMock('./table/executeQueries');\n\t\n\tc.query = {};\n\n\tc.wrappedQuery = {};\n\tc.wrapQuery.expect(c.query).return(c.wrappedQuery);\n\n\tc.expected = {};\n\tc.queriesPromise = then();\n\tc.queriesPromise.resolve([c.expected]);\n\tc.executeQueries.expect([c.wrappedQuery]).return(c.queriesPromise);\n\t\n\trequire('../query')(c.query).then(storeResult);\n\n\tfunction storeResult(result) {\n\t\tc.returned = result;\n\t}\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/querySpec/whenExecute.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n.it('should return result of executeQueries').assertEqual(c.expected, c.returned)","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/sqlite/encodeBuffer.js":"function encodeBuffer(buffer) {\n\treturn \"E'\\\\\\\\x\" + buffer.toString('hex') + \"'\";\n}\n\nmodule.exports = encodeBuffer;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/encodeDbSpecific.js":"var getSessionSingleton = require('./getSessionSingleton');\n\nfunction encodeDbSpecific(name, value) {\n\tvar encode = getSessionSingleton('encode' + name);\n\tif (encode)\n\t\treturn encode(value);\n\treturn value;\n}\n\nmodule.exports = encodeDbSpecific;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/getFirstFromDb.js":"var tryGet = require('./tryGetFirstFromDb');\n\nfunction get()  {\n\tvar row = tryGet.apply(null,arguments);\n\tif (row === null)\n\t\tthrow(\"Row not found.\");\n\treturn row;\n}\n\nmodule.exports = get;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/negotiateAddStrategy.js":"var emptyStrategy = require('./emptyStrategy');\n\nfunction negotiate(table) {\n\tvar argsCount = arguments.length;\n\tvar args = [];\n\tfor (var i = 0; i < arguments.length; i++) {\n\t\targs.push(arguments[i]);\n\t}\n\tif (noStrategy())\n\t\targs.push(emptyStrategy);\n\treturn args;\n\n\tfunction noStrategy() {\n\t\tvar columnCount = table._primaryColumns.length;\n\t\treturn (columnCount+2 != argsCount);\n\n\t}\n}\n\nmodule.exports = negotiate;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/tableSpec/when_new.js":"var c = {};\nvar when = require('a').when\n\nwhen('./new', c)\n\t.it('should set dbName').assertEqual(c.name,c.sut._dbName)\n\t.it('should set columns to empty array').assertEqual(0,c.sut._columns.length)\n\t.it('should set primaryColumns to empty array').assertEqual(0,c.sut._primaryColumns.length)\n\t.it('should set columnDiscriminators to empty array').assertEqual(0,c.sut._columnDiscriminators.length)\n\t.it('should set formulaDiscriminators to empty array').assertEqual(0,c.sut._formulaDiscriminators.length)\n\t.it('should set _relations to empty object').assertDoesNotThrow(c.verifyEmptyRelations)\n\t.it('should set _cache').assertEqual(c.cache, c.sut._cache)\n\t.it('should set context equal sut').assertEqual(c.context, c.sut)\n\t.it('should set delete').assertEqual(c.delete, c.sut.delete)\n\t.it('should set cascadeDelete').assertEqual(c.cascadeDelete, c.sut.cascadeDelete)\n\t.it('should set createReadStream').assertEqual(c.createReadStream, c.sut.createReadStream)\n\t.it('should set createJSONReadStream').assertEqual(c.createJSONReadStream, c.sut.createJSONReadStream)\n\t\n\t\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/streamEager.js":"var rdb = require('../index'),\n    resetDemo = require('../../rdb-demo/db/resetDemo');\n\nvar Order = rdb.table('_order');\nvar OrderLine = rdb.table('_orderLine');\n\nOrder.primaryColumn('oId').guid().as('id');\nOrder.column('oOrderNo').string().as('orderNo');\nOrder.column('oFoo').boolean().as('foo');\n\nOrderLine.primaryColumn('lId').guid().as('id');\nOrderLine.column('lOrderId').guid().as('orderId');\nOrderLine.column('lProduct').string().as('product');\n\nrdb.log(console.log);\n\nvar line_order_relation = OrderLine.join(Order).by('lOrderId').as('order');\nOrder.hasMany(line_order_relation).as('lines');\n\n// var db = rdb('postgres://postgres:postgres@localhost/test');\nvar db = rdb.sqlite(__dirname + '/../../rdb-demo/sqlite/db/rdbDemo');\n\n\nvar emptyFilter = Order.foo.greaterThan(new Date());\nvar strategy = {\n    lines: {\n        orderBy: 'product'\n    },\n    orderBy: 'orderNo',\n    limit: 3\n};\n\nvar counter = 0;\nvar data = '';\nmodule.exports = resetDemo()\n    .then(function() {\n        Order.createJSONReadStream(db, emptyFilter, strategy).on('data', printOrder).on('error', onError).on('end', onEnd);\n\n    }).then(null, onError);\n\n\nfunction onError(e) {\n    console.log(e.stack);\n}\n\n\nfunction onEnd() {\n    // console.log('end...' + counter);\n    var obj = JSON.parse(data);\n    for (var i = 0; i < obj.length; i++) {\n        var dto = obj[i]\n        console.log(dto);\n    }\n}\n\nfunction printOrder(order) {\n    // console.log(typeof order);\n    counter++;\n    data += order;\n    // console.log(order);\n}\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/createDomain/negotiateForwardPropertySpec/negotiateExisting.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\tc.newDomain = {};\n\tc.oldDomain = {};\n\n\tc.oldFoo = {};\n\tc.existingFoo = {};\n\tc.oldDomain.foo = c.oldFoo;\n\tc.newDomain.foo = c.existingFoo;\n\tc.propertyName = 'foo';\n\n\trequire('../negotiateForwardProperty')(c.oldDomain, c.newDomain, c.propertyName);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/createDomain/negotiateForwardPropertySpec/negotiateFoo.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\tc.newDomain = {};\n\tc.oldDomain = {};\n\n\tc.oldFoo = {};\n\tc.newFoo = {};\n\tc.oldDomain.foo = c.oldFoo;\n\tc.propertyName = 'foo';\n\n\trequire('../negotiateForwardProperty')(c.oldDomain, c.newDomain, c.propertyName);\n\tc.originalValue = c.newDomain.foo;\n\tc.newDomain.foo = c.newFoo;\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/createDomain/negotiateForwardPropertySpec/negotiateRdb.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\tc.newDomain = {};\n\tc.oldDomain = {};\n\n\tc.oldRdb = {};\n\tc.oldDomain.rdb = c.oldRdb;\n\tc.propertyName = 'rdb';\n\n\trequire('../negotiateForwardProperty')(c.oldDomain, c.newDomain, c.propertyName);\n\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/createDomain/negotiateForwardPropertySpec/whenNegotiateExisting.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n    .it('should not forward existing').assertEqual(c.newDomain.foo, c.existingFoo)","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/createDomain/negotiateForwardPropertySpec/whenNegotiateFoo.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n    .it('should forward property getter through new domain').assertEqual(c.oldFoo, c.originalValue)\n    .it('should update value on old domain when setting on new domain').assertEqual(c.newFoo, c.oldDomain.foo)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/createDomain/negotiateForwardPropertySpec/whenNegotiateRdb.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n    .it('should not forward rdb').assertNotEqual(c.oldDomain.rdb, c.newDomain.rdb)","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/createDomainSpec/req/inDomain.js":"var a = require('a');\n\nfunction act(c) {\n\tc.domain = {};\n\tc.Domain.active = c.domain;\n\n\tc.newDomain = {};\n\tc.Domain.create = c.mock();\n\tc.Domain.create.expect().return(c.newDomain);\n\n\tc.newBar = {};\n\tc.baz = {};\n\n\tc.domain.foo = {};\n\tc.domain.bar = {};\n\tc.domain.baz = {};\n\n\tc.negotiateForwardProperty.expect(c.domain, c.newDomain, 'foo');\n\tc.negotiateForwardProperty.expect(c.domain, c.newDomain, 'bar');\n\tc.negotiateForwardProperty.expect(c.domain, c.newDomain, 'baz');\n\t\n\tc.returned = c.sut();\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/createDomainSpec/req/outsideDomain.js":"var a = require('a');\n\nfunction act(c) {\n\tc.Domain.create = c.mock();\n\n\tc.newDomain = {};\n\tc.Domain.create.expect().return(c.newDomain);\n\n\tc.returned = c.sut();\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/createDomainSpec/req/whenInDomain.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n.it('should forward properties of old domain').assertDoesNotThrow(c.negotiateForwardProperty.verify)\n.it('should return new domain').assertEqual(c.newDomain, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/createDomainSpec/req/whenOutsideDomain.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n.it('should return a new domain').assertEqual(c.newDomain, c.returned)","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emitEventSpec/new/add.js":"\r\nfunction act(c) {\r\n\tc.callback = c.mock();\r\n\tc.callback2 = c.mock();\r\n\tc.sut.add(c.callback);\r\n\tc.sut.add(c.callback2);\r\n}\r\n\r\nact.base = '../new';\r\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emitEventSpec/new/emit.js":"function act(c) {\r\n\tc.sut();\r\n}\r\n\r\nact.base = '../new';\r\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emitEventSpec/new/tryAddEmpty.js":"\r\nfunction act(c) {\t\r\n\tc.sut.add = c.mock();\r\n\tc.sut.tryAdd();\r\n}\r\n\r\nact.base = '../new';\r\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emitEventSpec/new/tryAdd.js":"var callback = 'foo';\r\n\r\nfunction act(c) {\t\r\n\tc.sut.add = c.mock();\r\n\tc.sut.add.expect(callback);\r\n\tc.sut.tryAdd(callback);\r\n}\r\n\r\nact.base = '../new';\r\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emitEventSpec/new/tryRemoveEmpty.js":"\r\nfunction act(c) {\t\r\n\tc.sut.remove = c.mock();\r\n\tc.sut.tryRemove();\r\n}\r\n\r\nact.base = '../new';\r\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emitEventSpec/new/tryRemove.js":"var callback = 'foo';\r\n\r\nfunction act(c) {\t\r\n\tc.sut.remove = c.mock();\r\n\tc.sut.remove.expect(callback);\r\n\tc.sut.tryRemove(callback);\r\n}\r\n\r\nact.base = '../new';\r\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emitEventSpec/new/whenEmit.js":"var when = require('a').when;\r\nvar c = {};\r\n\r\nwhen(c)\r\n\t.it('should not crash').assertOk('ok');","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emitEventSpec/new/whenTryAddEmpty.js":"var when = require('a').when;\r\nvar c = {};\r\n\r\nwhen(c)\r\n\t.it('not forward to add').assertDoesNotThrow(c.sut.add.verify);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emitEventSpec/new/whenTryAdd.js":"var when = require('a').when;\r\nvar c = {};\r\n\r\nwhen(c)\r\n\t.it('forward to add').assertDoesNotThrow(c.sut.add.verify);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emitEventSpec/new/whenTryRemoveEmpty.js":"var when = require('a').when;\r\nvar c = {};\r\n\r\nwhen(c)\r\n\t.it('should not forward to remove').assertDoesNotThrow(c.sut.remove.verify);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emitEventSpec/new/whenTryRemove.js":"var when = require('a').when;\r\nvar c = {};\r\n\r\nwhen(c)\r\n\t.it('forward to remove').assertDoesNotThrow(c.sut.remove.verify);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emptyFilterSpec/req/and.js":"function act(c){\n\tc.filter = {};\n\tc.filter2 = {};\n\tc.initialFilter = {};\n\tc.initialFilter2 = {};\n\tc.expected = {};\n\n\tc.negotiateRawSqlFilter.expect(c.initialFilter).return(c.filter);\n\n\tc.filter.and = c.mock();\n\tc.filter.and.expect(c.initialFilter2).return(c.expected);\n\n\tc.returned = c.sut.and(c.initialFilter, c.initialFilter2);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emptyFilterSpec/req/or.js":"function act(c){\n\tc.filter = {};\n\tc.filter2 = {};\n\tc.initialFilter = {};\n\tc.initialFilter2 = {};\n\tc.expected = {};\n\n\tc.negotiateRawSqlFilter.expect(c.initialFilter).return(c.filter);\n\n\tc.filter.or = c.mock();\n\tc.filter.or.expect(c.initialFilter2).return(c.expected);\n\n\tc.returned = c.sut.or(c.initialFilter, c.initialFilter2);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emptyFilterSpec/req/whenAnd.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return negotiatedFilter').assertEqual(c.expected, c.returned)\n\t","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emptyFilterSpec/req/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return negotiatedFilter').assertEqual(c.expected, c.returned)\n\t","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emptyFilterSpec/req/whenOr.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return negotiatedFilter').assertEqual(c.expected, c.returned)\n\t","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/lockSpec/req/whenLock.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return lock object').assertEqual(c.expected, c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/lock/toIntKeySpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\tc.sut = require('../toIntKey');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/encodeDateSpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\n\tc.sut = require('../encodeDate');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/newDatabaseSpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should set commit on transaction').assertEqual(c.commit, c.sut.commit)\n\t.it('should set rollback on transaction').assertEqual(c.rollback, c.sut.rollback)","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/newPoolSpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n    .it('should negotiate pool options').assertDoesNotThrow(c.negotiatePoolOptions.verify)\n    .it('should set end').assertEqual(c.denodeifiedEndPool, c.sut.end)\n    .it('should set connect').assertEqual(c.boundGetConnection, c.sut.connect)\n    .it('should add pool to pools').assertDeepEqual(c.pools[c.id], c.sut)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/selectForUpdateSqlSpec/getSql.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\tc.returned = require('../selectForUpdateSql')('alias');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/selectForUpdateSqlSpec/whenGetSql.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n.it('should return sql').assertEqual(' FOR UPDATE', c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/wrapQuerySpec/wrap.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\tc.connection = {};\n\n\tc.log = c.requireMock('../table/log');\n\n\tc.runQuery = c.mock();\n\tc.connection.query = c.runQuery;\n\t\n\tc.sut = require('../wrapQuery')(c.connection);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/wrapQueryStreamSpec/wrap.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\tc.connection = {};\n\tc.executeQuery = c.mock();\n\tc.connection.executeQuery = c.executeQuery;\n\t\n\tc.sut = require('../wrapQueryStream')(c.connection);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/newCollectionSpec/new/addRange.js":"var range1 = {};\n\nfunction act(c) {\n\tc.range1 = range1;\n\tc.sut.addRange(range1);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/newCollectionSpec/new/forEach.js":"var callback;\n\nfunction act(c) {\n\tcallback = c.mock();\n\tcallback.expect(c.element,0);\n\tcallback.expect(c.element2,1);\n\tc.callback = callback;\n\tc.sut.forEach(callback);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/newCollectionSpec/new/whenForEach.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should run callback').assertDoesNotThrow(c.callback.verify);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/newImmutableSpec/new/execute.js":"function act(c){\n\tc.expected = {};\n\tc.arg = {};\n\tc.arg2 = {};\n\tc.fn.expect(c.arg, c.arg2).return(c.expected);\n\tc.returned = c.sut(c.arg, c.arg2);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/newImmutableSpec/new/whenExecute.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return result from original func').assertEqual(c.expected, c.returned)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/encodeBooleanSpec/encode.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\n\tc.sut = require('../encodeBoolean');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/encodeBooleanSpec/whenEncode.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should encode true').assertEqual('true', c.sut(true))\n\t.it('should encode false').assertEqual('false', c.sut(false))\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/encodeDateSpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\n\tc.sut = require('../encodeDate');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/newDatabaseSpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\t\n\tc.requireMock = a.requireMock;\n\tc.createDomain = c.requireMock('../createDomain');\n\tc.newTransaction = c.requireMock('./newTransaction');\n\tc.newPromise = c.requireMock('../table/promise');\n\tc.begin = c.requireMock('../table/begin');\n\tc.rollback = c.requireMock('../table/rollback');\n\tc.commit = c.requireMock('../table/commit');\n\tc.negotiateConnectionString = c.requireMock('./negotiateConnectionString');\n\tc.newPool = c.requireMock('./newPool');\n\tc.lock = c.requireMock('../lock');\t\n\n\tc.newSut = require('../newDatabase');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/newPoolSpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should set end').assertEqual(c.denodeifiedEndPool, c.sut.end)\n\t.it('should set connect').assertEqual(c.pgPool.connect, c.sut.connect)\n\t.it('should add pool to pools').assertDeepEqual(c.pools[c.id], c.sut)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/replaceParamCharSpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\tc.query = {};\n\tc.query.sql = c.mock();\n\n\tc.sut = require('../replaceParamChar');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/selectForUpdateSqlSpec/getSql.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\tc.returned = require('../selectForUpdateSql')('alias');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/selectForUpdateSqlSpec/whenGetSql.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n.it('should return sql').assertEqual(' FOR UPDATE OF alias', c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/wrapQuerySpec/wrap.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\n\tc.log = c.requireMock('../table/log');\n\t\n\tc.connection = {};\n\tc.replaceParamChar = c.requireMock('./replaceParamChar');\n\n\tc.runQuery = c.mock();\n\tc.connection.query = c.runQuery;\n\t\n\tc.sut = require('../wrapQuery')(c.connection);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/wrapQueryStreamSpec/wrap.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\n\tc.log = c.requireMock('../table/log');\n\t\n\tc.connection = {};\n\tc.replaceParamChar = c.requireMock('./replaceParamChar');\n\n\tc.newQueryStreamCore = c.requireMock('./newStreamableQuery');\t\n\n\tc.runQuery = c.mock();\n\tc.connection.query = c.runQuery;\n\t\n\tc.sut = require('../wrapQueryStream')(c.connection);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/poolsSpec/req/whenEnd.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should end all pools').assertEqual(c.expected, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/query/negotiateParametersSpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\n\tc.sut = require('../negotiateParameters');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/query/negotiateSqlSpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\n\tc.sut = require('../negotiateSql');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/query/wrapQuerySpec/whenExecute.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n.it('should return object with sql as function').assertEqual(c.safeSql, c.returned.sql)\n.it('should return object with parameters as array').assertEqual(c.safeParameters, c.returned.parameters)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/sqlite/encodeBooleanSpec/encode.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\n\tc.sut = require('../encodeBoolean');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/sqlite/encodeBooleanSpec/whenEncode.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should encode true').assertEqual('1', c.sut(true))\n\t.it('should encode false').assertEqual('0', c.sut(false))\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/beginSpec/req.js":"\nvar a  = require('a');\nvar mock = a.mock;\nvar requireMock  = a.requireMock;\n\n\nfunction act(c){\t\t\n\tc.beginCommand = requireMock('./commands/beginCommand');\n\tc.executeQuery = requireMock('./executeQueries/executeQuery');\n\tc.setSessionSingleton = requireMock('./setSessionSingleton');\n\t\n\tc.sut = require('../begin');\n}\n\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/cascadeDeleteSpec/whenCascadeDelete.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should forward to delete with cascade strategy').assertEqual(c.expected, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/cloneStrategySpec/clone.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\n\tc.sut = require('../cloneStrategy');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/cloneStrategySpec/whenClone.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n    .it('should clone simple').assertDeepEqual({}, c.sut({}))\n    .it('should clone simple 2').assertDeepEqual({}, c.sut({}))\n    .it('should medium complex').assertDeepEqual({ a: '1', b: 2, c: undefined}, c.sut({ a: '1', b: 2, c: undefined }))\n    .it('should very complex').assertDeepEqual({\n        a: '1',\n        b: 2,\n        c: { foo: 1 },\n        d: [{ bar: { f: 'fly' } }, 2]\n    }, c.sut({\n        a: '1',\n        b: 2,\n        c: { foo: 1 },\n        d: [{ bar: { f: 'fly' } }, 2]\n    }))\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/binary.js":"var newEncode = require('./binary/newEncode');\nvar newDecode = require('./newDecodeCore');\nvar purify = require('./binary/purify');\n\nfunction _new(column) {\n\tcolumn.purify = purify;\n\tcolumn.encode = newEncode(column);\n\tcolumn.decode = newDecode(column);\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/binary/newEncode.js":"var purify = require('./purify');\nvar newParam = require('../../query/newParameterized');\n\nfunction _new(column) {\n\t\n\treturn encode;\n\n\tfunction encode(value) {\n\t\tvalue = purify(value);\n\t\tif (value === null)\n\t\t \treturn newParam('null');\n\t\treturn newParam('?', [value]);\t\t\t\t\n\t}\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/binary/purify.js":"function purify(value) {\t\t\n\tif(value == null)\n\t\treturn null;\n\tif (!Buffer.isBuffer(value))\n\t\tthrow new Error('\\'' + value + '\\'' + ' is not a buffer');\n\treturn value;\n}\n\nmodule.exports = purify;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/newDecodeCore.js":"function _new(column) {\n\n\treturn function(value) {\n\t\tif (value == column.dbNull)\n\t\t\treturn null;\n\t\treturn value;\n\t};\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/boolean.js":"var newEncode = require('./boolean/newEncode');\nvar newDecode = require('./boolean/newDecode');\nvar purify = require('./boolean/purify');\n\nfunction _new(column) {\n\tcolumn.purify = purify;\n\tcolumn.default = false;\n\tcolumn.encode = newEncode(column);\n\tcolumn.decode = newDecode(column);\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/boolean/newEncode.js":"var purify = require('./purify');\nvar newParam = require('../../query/newParameterized');\nvar getSessionSingleton = require('../../getSessionSingleton');\nvar newEncodeSafe = require('../newEncodeSafe');\n\nfunction _new(column) {\n\t\n\n\tfunction encode(value) {\n\t\tvalue = purify(value);\n\t\tif (value === null) {\n\t\t\tif (column.dbNull === null)\n\t\t\t\treturn newParam('null');\n\t\t\treturn newParam('\\'' + column.dbNull + '\\'');\n\t\t}\n\t\tvar encodeCore =  getSessionSingleton('encodeBoolean');\n\n\t\tif (value)\n\t\t\treturn newParam(encodeCore(true));\t\n\t\treturn newParam(encodeCore(false));\t\n\t}\n\n\tencode.safe = newEncodeSafe(column, purify);\n\treturn encode;\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/boolean/purify.js":"function purify(value) {\t\t\n\tif (value === null || typeof (value) == 'undefined')\n\t\treturn null;\n\treturn Boolean(value);\n}\n\nmodule.exports = purify;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/newEncodeSafe.js":"var newPara = require('../query/newParameterized');\n\nfunction _newSafe(column, purify) {\n\n\treturn function(value) {\n\t\tvalue = purify(value);\n\t\tif (value == null) {\n\t\t\tif (column.dbNull === null)\n\t\t\t\treturn newPara('null');\n\t\t\treturn newPara('\\'' + column.dbNull + '\\'');\n\t\t}\n\t\treturn newPara('?', [value]);\n\t};\n}\n\nmodule.exports = _newSafe;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/boolean/newDecode.js":"var purify = require('./purify');\n\nfunction _new(column) {\n\n\treturn function(value) {\n\t\tif (value == column.dbNull)\n\t\t\treturn null;\n\t\treturn purify(value);\n\t};\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/date.js":"var newEncode = require('./date/newEncode');\nvar newDecode = require('./date/newDecode');\nvar purify = require('./date/purify');\n\nfunction _new(column) {\n\tcolumn.purify = purify;\n\tcolumn.encode = newEncode(column);\n\tcolumn.decode = newDecode(column);\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/date/newEncode.js":"var newPara = require('../../query/newParameterized');\nvar purify = require('./purify');\nvar newEncodeSafe = require('../newEncodeSafe');\nvar getSessionSingleton = require('../../getSessionSingleton');\n\nfunction _new(column) {\n    var encode = function(value) {\n        value = purify(value);\n        if (value == null) {\n            if (column.dbNull === null)\n                return newPara('null');\n            return newPara('\\'' + column.dbNull + '\\'');\n        }\n        var encodeCore = getSessionSingleton('encodeDate');\n        return newPara(encodeCore(value));\n    };\n\n    encode.safe = newEncodeSafe(column, purify);\n    return encode;\n\n}\n\nmodule.exports = _new;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/date/purify.js":"var tryParseISO = require('./tryParseISO');\nvar cloneDate = require('./cloneDate');\n\nfunction purify(value) {\t\t\t\n\tif(value == null)\n\t\treturn null;\t\n\n\tif (value.toISOString) \n\t\treturn cloneDate(value);\n\n\tvar iso = tryParseISO(value);\n\tif (iso)\n\t\treturn iso;\t\n\t\n\treturn cloneDate(value);\n}\n\nmodule.exports = purify;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/date/tryParseISO.js":"var pattern = /(\\d{4}-[01]\\d-[0-3]\\d(T| )[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+)|(\\d{4}-[01]\\d-[0-3]\\d(T| )[0-2]\\d:[0-5]\\d:[0-5]\\d)|(\\d{4}-[01]\\d-[0-3]\\d(T| )[0-2]\\d:[0-5]\\d)/\n\nfunction tryParseISO (iso) {\n\tif (pattern.test(iso))\n\t\treturn iso;\n}\n\nmodule.exports = tryParseISO;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/date/cloneDate.js":"var toISOString = require('./toISOString');\n\nfunction cloneDate(date) {\n    date = new Date(date);\n\n    Object.defineProperty(date, 'toISOString', {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: function() {\n            return toISOString(date);\n        }\n    });\n    return date;\n}\n\nmodule.exports = cloneDate;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/date/toISOString.js":"var getISOTimezone = require('./getISOTimezone');\n\nfunction toISOString(date) {\n\treturn date.getFullYear() +\n         '-' + pad(date.getMonth()+1) +\n         '-' + pad(date.getDate()) +\n         'T' + pad(date.getHours()) +\n         ':' + pad(date.getMinutes()) +\n         ':' + pad(date.getSeconds()) +\n         '.' + pad(date.getMilliseconds()) +\n         getISOTimezone();\n}\n\nfunction pad(num) {\n\tvar norm = Math.abs(Math.floor(num));\n    return (norm < 10 ? '0' : '') + norm;\n}\n\n\n\nmodule.exports = toISOString;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/date/getISOTimezone.js":"function getISOTimezone() {\n    var now = new Date(),\n        tzo = -now.getTimezoneOffset(),\n        dif = tzo >= 0 ? '+' : '-';\n    \treturn dif + pad(tzo / 60) + ':' + pad(tzo % 60);\n}\n\nfunction pad(num) {\n    var norm = Math.abs(Math.floor(num));\n    return (norm < 10 ? '0' : '') + norm;\n}\n\nmodule.exports = getISOTimezone;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/date/newDecode.js":"var newDecodeCore = require('../newDecodeCore');\nvar cloneDate = require('./cloneDate');\n\nfunction _new(column) {\t\n\tvar decodeCore = newDecodeCore(column);\t\n\t\n\treturn function(value) {\n\t\tvalue = decodeCore(value);\n\t\tif (value === null)\n\t\t\treturn value;\n\t\treturn cloneDate(value);\n\t};\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/guid.js":"var newEncode = require('./guid/newEncode');\nvar newDecode = require('./newDecodeCore');\nvar purify = require('./guid/purify');\n\nfunction _new(column) {\n\tcolumn.purify = purify;\n\tcolumn.encode = newEncode(column);\n\tcolumn.decode = newDecode(column);\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/guid/newEncode.js":"var newPara = require('../../query/newParameterized');\nvar purify = require('./purify');\n\nfunction _new(column) {\n\t\n\treturn function(candidate) {\n\t\tvar value = purify(candidate);\n\t\tif (value == null) {\n\t\t\tif(column.dbNull === null)\n\t\t\t\treturn newPara('null');\n\t\t\treturn newPara('\\'' + column.dbNull + '\\'');\n\t\t}\n\t\treturn newPara('\\'' + value + '\\'');\t\n\t};\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/guid/purify.js":"function negotiateGuidFormat(candidate) {\n\tif(candidate == null)\n\t\treturn null;\n\tvar pattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\n\tif(!pattern.test(candidate))\n\t\tthrow new TypeError(candidate +  ' is not a valid UUID');\n\treturn candidate;\n}\n\nmodule.exports = negotiateGuidFormat;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/json.js":"var newEncode = require('./json/newEncode');\nvar newDecode = require('./newDecodeCore');\nvar purify = require('./json/purify');\n\nfunction _new(column) {\n\tcolumn.purify = purify;\n\tcolumn.encode = newEncode(column);\n\tcolumn.decode = newDecode(column);\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/json/newEncode.js":"var newPara = require('../../query/newParameterized');\nvar purify = require('./purify');\n\nfunction _new(column) {\n\t\n\treturn function(candidate) {\n\t\tvar value = purify(candidate);\n\t\tif (value == null) {\n\t\t\tif(column.dbNull === null)\n\t\t\t\treturn newPara('null');\n\t\t\treturn newPara('\\'' + column.dbNull + '\\'');\n\t\t}\n\t\treturn newPara('?', [JSON.stringify(value)]);\t\n\t};\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/json/purify.js":"function purify(value) {\n\tif(value == null)\n\t\treturn null;\n\treturn value;\n}\n\nmodule.exports = purify;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/numeric.js":"var newEncode = require('./numeric/newEncode');\nvar newDecode = require('./numeric/newDecode');\nvar purify = require('./numeric/purify');\n\nfunction _new(column) {\n\tcolumn.default = 0;\n\tcolumn.purify = purify;\n\tcolumn.encode = newEncode(column);\n\tcolumn.decode = newDecode(column);\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/numeric/newEncode.js":"var purify = require('./purify');\nvar newParam = require('../../query/newParameterized');\n\nmodule.exports = function(column) {\n\treturn encode;\n\n\tfunction encode(value) {\n\t\tvalue = purify(value);\n\t\tif (value == null) {\n\t\t\tvar dbNull = column.dbNull;\n\t\t\treturn newParam('' + dbNull + '');\n\t\t}\n\t\treturn newParam('' + value);\n\t}\n};","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/numeric/purify.js":"function purify(value) {\t\t\n\tif(value == null)\n\t\treturn null;\n\tif (typeof(value) != 'number')\n\t\tthrow new Error('\\'' + value + '\\'' + ' is not a number');\n\treturn value;\n}\n\nmodule.exports = purify;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/numeric/newDecode.js":"var newDecodeCore = require('../newDecodeCore');\n\nfunction _new(column) {\t\n\tvar decodeCore = newDecodeCore(column);\t\n\t\n\treturn function(value) {\n\t\tvalue = decodeCore(value);\n\t\tif (value === null)\n\t\t\treturn value;\n\t\tif (typeof(value) != 'number')\n\t\t\treturn parseFloat(value);\n\t\treturn value;\n\t};\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/string.js":"var newEncode = require('./string/newEncode');\nvar newDecode = require('./newDecodeCore');\nvar startsWith = require('./string/startsWith');\nvar endsWith = require('./string/endsWith');\nvar contains = require('./string/contains');\nvar iStartsWith = require('./string/iStartsWith');\nvar iEndsWith = require('./string/iEndsWith');\nvar iContains = require('./string/iContains');\nvar iEqual = require('./string/iEqual');\nvar purify = require('./string/purify');\nvar _extractAlias = require('./extractAlias');\n\nfunction _new(table, column) {\n    column.purify = purify;\n    column.encode = newEncode(column);\n    column.decode = newDecode(column);\n    var extractAlias = _extractAlias.bind(null, table);\n\n    column.startsWith = function(arg, alias) {\n        alias = extractAlias(alias);\n        return startsWith(column, arg, alias);\n    };\n    column.endsWith = function(arg, alias) {\n        alias = extractAlias(alias);\n        return endsWith(column, arg, alias);\n    };\n    column.contains = function(arg, alias) {\n        alias = extractAlias(alias);\n        return contains(column, arg, alias);\n    };\n    column.iStartsWith = function(arg, alias) {\n        alias = extractAlias(alias);\n        return iStartsWith(column, arg, alias);\n    };\n    column.iEndsWith = function(arg, alias) {\n        alias = extractAlias(alias);\n        return iEndsWith(column, arg, alias);\n    };\n    column.iContains = function(arg, alias) {\n        alias = extractAlias(alias);\n        return iContains(column, arg, alias);\n    };\n\n    column.iEqual = function(arg, alias) {\n        alias = extractAlias(alias);\n        return iEqual(column, arg, alias);\n    };\n\n    column.iEq = column.iEqual;\n}\n\nmodule.exports = _new;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/string/newEncode.js":"var newPara = require('../../query/newParameterized');\nvar stringIsSafe = require('./stringIsSafe');\nvar purify = require('./purify');\n\nfunction _new(column) {\n\n\treturn function(value) {\n\t\tvalue = purify(value);\n\t\tif (value == null) {\n\t\t\tif (column.dbNull === null)\n\t\t\t\treturn newPara('null');\n\t\t\treturn newPara('\\'' + column.dbNull + '\\'');\n\t\t}\n\t\tif(stringIsSafe(value))\n\t\t\treturn newPara('\\'' + value + '\\'');\n\t\treturn newPara('?', [value]);\n\t};\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/string/stringIsSafe.js":"var ascii = '\\u0020\\u0028-\\u003E\\u0040-\\u005A\\u0060-\\u007A';\nvar latin1 = '\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF';\nvar latinExtA = '\\u0100-\\u017F';\nvar latinExtB = '\\u0180-\\u024F';\nvar cyrillic = '\\u0400-\\u04FF';\t\nvar cjk = '\\u4E00-\\u9FC3';\nvar util = require('util');\nvar patternString = util.format('^[%s%s%s%s%s%s]+$', ascii, latin1, latinExtA, latinExtB, cyrillic, cjk);\nvar pattern = new RegExp(patternString);\n\nfunction stringIsSafe(value) {\n\treturn pattern.test(value);\n}\n\nmodule.exports = stringIsSafe;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/string/purify.js":"function purify(value) {\n\tif(value == null)\n\t\treturn null;\n\treturn value;\n}\n\nmodule.exports = purify;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/string/startsWith.js":"var startsWithCore = require('./startsWithCore');\r\n\r\nmodule.exports = startsWithCore.bind(null, 'LIKE');","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/string/startsWithCore.js":"var newBoolean = require('../newBoolean');\r\nvar nullOperator = ' is ';\r\n\r\nfunction startsWithCore(operator, column,arg,alias) {\t\r\n\toperator = ' ' + operator + ' ';\r\n\tvar encoded = column.encode(arg);\r\n\tif (encoded.sql() == 'null') \r\n\t\toperator = nullOperator;\r\n\telse\r\n\t\tencoded = column.encode(arg + '%');\r\n\tvar firstPart = alias + '.' + column._dbName + operator;\r\n\tvar filter =  encoded.prepend(firstPart);\t\t\r\n\treturn newBoolean(filter);\r\n}\r\n\r\nmodule.exports = startsWithCore;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/string/endsWith.js":"var endsWithCore = require('./endsWithCore');\r\n\r\nmodule.exports = endsWithCore.bind(null, 'LIKE');\r\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/string/endsWithCore.js":"var newBoolean = require('../newBoolean');\r\nvar nullOperator = ' is ';\r\n\r\nfunction endsWithCore(operator, column,arg,alias) {\t\r\n\toperator = ' ' + operator + ' ';\r\n\tvar encoded = column.encode(arg);\r\n\tif (encoded.sql() == 'null') \r\n\t\toperator = nullOperator;\r\n\telse\r\n\t\tencoded = column.encode('%' + arg);\r\n\tvar firstPart = alias + '.' + column._dbName + operator;\r\n\tvar filter =  encoded.prepend(firstPart);\t\t\r\n\treturn newBoolean(filter);\r\n}\r\n\r\nmodule.exports = endsWithCore;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/string/contains.js":"var containsCore = require('./containsCore');\r\n\r\nmodule.exports = containsCore.bind(null, 'LIKE');\r\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/string/containsCore.js":"var newBoolean = require('../newBoolean');\r\nvar nullOperator = ' is ';\r\n\r\nfunction endsWithCore(operator, column,arg,alias) {\t\r\n\toperator = ' ' + operator + ' ';\r\n\tvar encoded = column.encode(arg);\r\n\tif (encoded.sql() == 'null') \r\n\t\toperator = nullOperator;\r\n\telse\r\n\t\tencoded = column.encode('%' + arg + '%');\r\n\tvar firstPart = alias + '.' + column._dbName + operator;\r\n\tvar filter =  encoded.prepend(firstPart);\t\t\r\n\treturn newBoolean(filter);\r\n}\r\n\r\nmodule.exports = endsWithCore;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/string/iStartsWith.js":"var startsWithCore = require('./startsWithCore');\r\n\r\nmodule.exports = startsWithCore.bind(null, 'ILIKE');","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/string/iEndsWith.js":"var endsWithCore = require('./endsWithCore');\r\n\r\nmodule.exports = endsWithCore.bind(null, 'ILIKE');\r\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/string/iContains.js":"var containsCore = require('./containsCore');\r\n\r\nmodule.exports = containsCore.bind(null, 'ILIKE');\r\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/string/iEqual.js":"var newBoolean = require('../newBoolean');\r\nvar nullOperator = ' is ';\r\nvar encodeFilterArg = require('../encodeFilterArg');\r\n\r\nfunction iEqual(column,arg,alias) {\t\r\n\tvar operator = ' ILIKE ';\r\n\tvar encoded = encodeFilterArg(column, arg);\r\n\tif (encoded.sql() == 'null') \r\n\t\toperator = nullOperator;\r\n\tvar firstPart = alias + '.' + column._dbName + operator;\r\n\tvar filter =  encoded.prepend(firstPart);\t\t\r\n\treturn newBoolean(filter);\r\n}\r\n\r\nmodule.exports = iEqual;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commitSpec/req.js":"\nvar a  = require('a');\nvar mock = a.mock;\nvar requireMock  = a.requireMock;\n\n\nfunction act(c){\t\t\n\tc.mock = mock;\n\tc.commitCommand = requireMock('./commands/commitCommand');\n\tc.pushCommand = requireMock('./commands/pushCommand');\n\tc.executeChanges = requireMock('./executeQueries/executeChanges');\n\tc.releaseDbClient = requireMock('./releaseDbClient');\n\tc.popChanges = requireMock('./popChanges');\n\t\n\tc.sut = require('../commit');\n}\n\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/createJSONReadStreamNativeSpec/create.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\tc.table = {};\n\tc.db = {};\n\tc.filter = {};\n\tc.strategy = {};\n\tc.streamOptions = {};\n\t\n\tc.createReadStreamCore = c.requireMock('./createReadStreamCoreNative');\n\tc.Stream = c.requireMock('stream');\n\n\tc.Stream.Transform = c.mock();\n\tc.transformer = {};\n\tc.Stream.Transform.expect({objectMode: true}).return(c.transformer);\n\t\n\tc.expected = {};\n\tc.createReadStreamCore.expect(c.table, c.db, c.filter, c.strategy, c.transformer, c.streamOptions).return(c.expected);\n\n\tc.returned = require('../createJSONReadStreamNative')(c.table, c.db, c.filter, c.strategy, c.streamOptions);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/createJSONReadStreamNativeSpec/whenCreate.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return stream').assertEqual(c.expected, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/createReadStreamNativeSpec/create.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\tc.table = {};\n\tc.db = {};\n\tc.filter = {};\n\tc.strategy = {};\n\tc.streamOptions = {};\n\t\n\tc.createReadStreamCore = c.requireMock('./createReadStreamCoreNative');\n\tc.Stream = c.requireMock('stream');\n\n\tc.Stream.Transform = c.mock();\n\tc.transformer = {};\n\tc.Stream.Transform.expect({objectMode: true}).return(c.transformer);\n\t\n\tc.expected = {};\n\tc.createReadStreamCore.expect(c.table, c.db, c.filter, c.strategy, c.transformer, c.streamOptions).return(c.expected);\n\n\tc.returned = require('../createReadStreamNative')(c.table, c.db, c.filter, c.strategy, c.streamOptions);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/createReadStreamNativeSpec/whenCreate.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return stream').assertEqual(c.expected, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/deleteSessionContextSpec/whenDelete.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n.it('should should delete rdb property from domain').assertEqual(false, 'rdb' in c.domain)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/deleteSpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\n\tc.pushCommand = c.requireMock('./commands/pushCommand');\n\tc.newDeleteCommand = c.requireMock('./commands/newDeleteCommand');\n\tc.extractDeleteStrategy = c.requireMock('./extractDeleteStrategy');\n\tc.resultToPromise = c.requireMock('./resultToPromise');\n\tc.negotiateRawSqlFilter = c.requireMock('./column/negotiateRawSqlFilter');\n\t\n\tc.emptyPromise = {};\n\tc.resultToPromise.expect().return(c.emptyPromise);\n\n\tc.sut = require('../delete')\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/encodeDbSpecificSpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\tc.getSessionSingleton = c.requireMock('./getSessionSingleton');\n\t\n\n\tc.sut = require('../encodeDbSpecific');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/executeQueriesSpec/req.js":"var q1 = {};\nvar q2 = {};\nvar queries = [q1,q2];\nvar a  = require('a');\nvar mock = a.mock;\nvar requireMock  = a.requireMock;\n\nfunction act(c){\n\tc.executeQueriesCore = requireMock('./executeQueries/executeQueriesCore');\n\tc.executeChanges = requireMock('./executeQueries/executeChanges');\n\tc.popChanges = requireMock('./popChanges');\n\tc.newParameterized = requireMock('./query/newParameterized');\n\tc.getSessionSingleton = requireMock('./getSessionSingleton');\t\n\n\tc.sut = require('../executeQueries');\n}\n\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/extractDeleteStrategySpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\n\tc.emptyStrategy = {};\n\tc.newObject = c.requireMock('../newObject');\n\tc.newObject.expect().return(c.emptyStrategy);\n\t\t\n\tc.sut = require('../extractDeleteStrategy');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/getByIdSpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('sets exclusive').assertEqual(c.getFromDbById.exclusive, c.sut.exclusive);\n\t","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/getRelativesCoreSpec/req.js":"var a = require('a');\n\nfunction act(c) {\n\tc.then = a.then;\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\n\tc.legToQuery = c.mock();\n\tc.executeQueries = c.requireMock('./executeQueries');\n\tc.resultToRows = c.requireMock('./resultToRows');\n\n\tc.resultToPromise = c.requireMock('./resultToPromise');\n\n\tc.negotiateExpandInverse = c.requireMock('./negotiateExpandInverse');\n\n\tc.emptyPromise = c.then();\n\tc.emptyPromise.resolve();\n\tc.resultToPromise.expect(false).return(c.emptyPromise);\n\n\tc.parent = {};\n\tc.relation = {};\n\n\tc.sut = require('../getRelativesCore');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/getSessionContextSpec/get.js":"var a = require('a');\n\nfunction act(c) {\n    c.mock = a.mock;\n    c.requireMock = a.requireMock;\n    c.expectRequire = a.expectRequire;\n    c.then = a.then;\n\n    var oldDomain = process.domain;\n    process.domain = {};\n    c.expected = {};\n    process.domain.rdb = c.expected;\n\n    c.returned = require('../getSessionContext')();\n    process.domain = oldDomain;\n\n}\n\nmodule.exports = act;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/getSessionContextSpec/whenGet.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return context').assertEqual(c.expected, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/getSessionSingletonSpec/get.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\tc.expected = {};\n\tc.context = {};\n\tc.context.foo = c.expected;\n\n\tc.getSessionContext = c.requireMock('./getSessionContext');\n\tc.getSessionContext.expect().return(c.context);\n\n\tc.returned = require('../getSessionSingleton')('foo');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/getSessionSingletonSpec/whenGet.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return singleton').assertEqual(c.expected, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/hasManySpec/whenHasMany.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should add relation to relations').assertEqual(c.manyRelation,c.parentTable._relations.child)\n\t.it('should set rightAlias').assertEqual('child', c.joinRelation.rightAlias)\n\t","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/hasOneSpec/whenHasOne.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should add oneRelation to relations').assertEqual(c.oneRelation,c.parentTable._relations.child)\n\t.it('should set rightAlias').assertEqual('child', c.joinRelation.rightAlias)\n\t","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/insertSpec/req.js":"var a = require('a');\nvar requireMock = a.requireMock;\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.newRow = requireMock('./commands/newRow');\n\tc.newInsertCommand = requireMock('./commands/newInsertCommand');\n\tc.pushCommand = requireMock('./commands/pushCommand');\n\n\tc.table = {};\n\tc.cache = {};\n\tc.id = 1;\n\tc.id2 = 'bar';\n\tc.row = {};\n\tc.table._cache = c.cache;\n\n\tc.sut = require('../insert')\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/isDirtySpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\tc.expected = {};\n\n\tc.getSessionSingleton = c.requireMock('./getSessionSingleton');\n\tc.getSessionSingleton.bind = c.mock();\n\tc.getSessionSingleton.bind.expect(null,'isDirty').return(c.expected);\n\n\tc.returned = require('../isDirty');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/isDirtySpec/whenReq.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return expected').assertEqual(c.expected, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/joinSpec/req.js":"var requireMock = require('a').requireMock;\n\nfunction act(c) {\t\n\tc.newRelatedTable = requireMock('./newRelatedTable');\n\tc.newJoinRelation = requireMock('./newJoinRelation');\n\tc.foo = {\n\t\talias: 'fooProp',\n\t\t_dbName: 'foo'\n\t};\n\tc.bar = {\n\t\talias: 'barProp',\n\t\t_dbName: 'bar'\n\t};\n\tc.baz = {\n\t\talias: 'bazProp',\n\t\t_dbName: 'baz'\n\t};\n\tc.parentTable = {\n\t\t_columns: [c.foo, c.bar, c.baz],\n\t\t_relations: {}\n\t};\n\n\tc.childTable = {};\n\tc.sut = require('../join');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/logSpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\n\tc.sut = require('../log');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/negotiateExpandInverseSpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\n\tc.relation = {};\n\tc.parent = {};\n\tc.child = {};\n\tc.children = [c.child, {}, {}];\n\n\tc.sut = require('../negotiateExpandInverse');\n\n\tc.negotiate = function() {\n\t\tc.sut(c.parent, c.relation, c.children);\n\t}\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newCacheSpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should set subscribeAdded to emitAdded.add').assertEqual(c.emitAdded.add, c.sut.subscribeAdded)\n\t.it('should set subscribeRemoved to emitRemoved.add').assertEqual(c.emitRemoved.add, c.sut.subscribeRemoved)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newCascadeDeleteStrategySpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\n\tc.newObject = c.requireMock('../newObject');\t\n\t\n\tc.sut = require('../newCascadeDeleteStrategy');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newJoinRelationSpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should have two columns').assertEqual(2,c.sut.columns.length)\n\t.it('should have fooColumn').assertEqual(c.fooColumn,c.sut.columns[0])\n\t.it('should have barColumn').assertEqual(c.barColumn,c.sut.columns[1])\n\t.it('should have parentTable').assertEqual(c.parentTable,c.sut.parentTable)\n\t.it('should have childTable').assertEqual(c.childTable,c.sut.childTable)\n\t.it('should set getFromCache to getFromDb').assertEqual(c.sut.getFromDb, c.sut.getFromCache)\n\t\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newManyRelationSpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n    .it('should have joinRelation').assertEqual(c.joinRelation, c.sut.joinRelation)\n    .it('should set childTable').assertEqual(c.childTable, c.sut.childTable)\n    .it('should set getRowsSync to cache.tryGet').assertEqual(c.cache.tryGet, c.sut.getRowsSync)","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newOneRelationSpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should have joinRelation').assertEqual(c.joinRelation, c.sut.joinRelation)\n\t.it('should set childTable').assertEqual(c.childTable, c.sut.childTable)\n    .it('should set getRowsSync to oneCache.tryGet').assertEqual(c.oneCache.tryGet, c.sut.getRowsSync)","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newPrimaryKeyFilterSpec/when_new.js":"var when = require('a').when;\nvar c = {};\n\nwhen('./new',c)\n\t.it('should return filter').assertDeepEqual(c.filter,c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newQuerySpec/when_new.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should push singleQuery to queries').assertDoesNotThrow(c.queries.push.verify)\n\t.it('should addSubQueries').assertDoesNotThrow(c.addSubQueries.verify)\n\t.it('should set limitQuery on queryContext').assertEqual(c.limitQuery, c.singleQuery.queryContext.limitQuery)\t\n\t.it('returns queries').assertEqual(c.queries,c.returned)","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newRelatedTableSpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should have related column a').assertEqual(c.a,c.sut.a)\n\t.it('should have related column b').assertEqual(c.b,c.sut.b)\n\t.it('exists returns existsFilter').assertEqual(c.existsFilter,c.sut.exists())\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newRowCacheSpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('getAll points to domainCache.getAll ').assertEqual(c.domainCache.getAll, c.sut.getAll)\n\t.it('should set subscribeAdded point to domainCache.subscribeAdded').assertEqual(c.domainCache.subscribeAdded, c.sut.subscribeAdded)\n\t.it('should set subscribeRemoved point to domainCache.subscribeRemoved').assertEqual(c.domainCache.subscribeRemoved, c.sut.subscribeRemoved)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newThrowSpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n    .it('should return promise').assertEqual(c.expected, c.returned)\n    .it('should try relase dbClient').assertDoesNotThrow(c.tryReleaseDbClient.verify)\n    .it('should throw received error on success').assertEqual(c.error, c.thrownError)\n    .it('should throw received error on failure').assertEqual(c.throwFunc, c.throwFunc2)","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/notifyDirtySpec/notify.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\tc.setSessionSingleton = c.requireMock('./setSessionSingleton');\n\tc.setSessionSingleton.expect('isDirty', true);\t\t\n\trequire('../notifyDirty')();\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/notifyDirtySpec/whenNotify.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should set session singleton').assertDoesNotThrow(c.setSessionSingleton.verify)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/nullPromiseSpec/req.js":"var a = require('a');\nvar requireMock = a.requireMock;\nvar mock = a.mock;\n\nfunction act(c) {\n\tc.newPromise = mock();\n\tc.expected = {};\n\tc.newPromise = requireMock('./promise');\n\tc.newPromise.expect(null).return(c.expected);\n\tc.returned = require('../nullPromise');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/nullPromiseSpec/whenReq.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('returns nullPromise').assertEqual(c.expected, c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/objectToCallbackSpec/whenToCallback.js":"var a = require('a');\nvar mock = a.mock;\nvar when = a.when;\nvar c = {};\n\nfunction act(c) {\n\tc.object = {};\n\tc.sut = require('../objectToCallback')(c.object);\n\tc.onResolve = mock();\n\tc.onResolve.expect(c.object);\n\tc.sut(c.onResolve);\n}\n\nwhen(act,c).\n\tit('should invoke with object').assertDoesNotThrow(c.onResolve.verify);\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/popChangesSpec/req.js":"var a = require('a');\nvar mock = a.mock;\nvar requireMock = a.requireMock;\nvar expectRequire = a.expectRequire;\n\nfunction act(c){\n\tc.mock = mock;\t\t\n\tc.changeSetId = 'cid';\n\tc.getChangeSet = requireMock('./commands/getChangeSet');\n\tc.compressChanges = requireMock('./commands/compressChanges');\n\tc.sut = require('../popChanges');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/relation/newExpanderCache.js":"var newRowCache = require('../newRowCache');\n\nfunction newExpanderCache(joinRelation) {\n\treturn newRowCache(joinRelation.childTable);\t\n}\n\nmodule.exports = newExpanderCache;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/releaseDbClientSpec/req.js":"var a = require('a');\nvar mock = a.mock;\nvar requireMock = a.requireMock;\n\nfunction act(c){\n\tc.mock = mock;\t\n\tc.getSessionSingleton = requireMock('./getSessionSingleton');\n\tc.deleteSessionContext = requireMock('./deleteSessionContext');\n\n\tc.deleteSessionContext.expect();\t\n\n\tc.sut = require('../releaseDbClient');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/resultToPromiseSpec/toPromise.js":"var requireMock = require('a').requireMock;\n\nfunction toPromise(c) {\n\tc.result = {};\n\n\trequire('../resultToPromise')(c.result).then(onResult);\n\n\tfunction onResult(returned) {\n\t\tc.returned = returned;\n\t}\n\n}\n\nmodule.exports = toPromise;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/resultToPromiseSpec/whenToPromise.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c).\n\tit('should return result').assertEqual(c.result, c.returned)","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/resultToRowsSpec/toRows.js":"var a = require('a');\nvar mock = a.mock;\nvar requireMock = a.requireMock;\n\nfunction act(c) {\n    c.then = a.then;\n    c.mock = a.mock;\n    c.requireMock = a.requireMock;\n    c.rows = {};\n    c.span = {};    \n    c.x = 'x';\n    c.y = 'y';\n    c.z = 'z';\n    c.xPromise = c.then();\n    c.result = [c.xPromise, c.y, c.z];\n    c.xPromise.resolve(c.x);\n    c.nextResult = [c.y, c.z];\n    c.table = {};\n    c.span.table = c.table;\n\n    c.promise = requireMock('./promise');\n    c.promise.all = mock();\n    c.dbRowsToRows = requireMock('./resultToRows/dbRowsToRows');\n\n    c.sut = require('../resultToRows');\n\n    c.dbRowsToRows.expect(c.span, c.x).return(c.rows);\n\n    c.subResultToRows = requireMock('./resultToRows/subResultToRows');\n    c.subRows = {};\n    c.subRowsPromise = c.then();\n    c.subRowsPromise.resolve(c.subRows);\n    c.subResultToRows.expect(c.span, c.nextResult).return(c.subRowsPromise);\n\n    c.sut(c.span, c.result).then(onOk, console.log);\n\n    function onOk(returned) {\n        c.returned = returned;\n    }\n}\n\nmodule.exports = act;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/resultToRowsSpec/whenToRows.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return rows').assertEqual(c.rows,c.returned)\n\t.it('should create subrows').assertDoesNotThrow(c.subResultToRows.verify)\t\n\t\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/resultToRows/subResultToRows.js":"var all = require('../promise').all;\nvar nextResultToRows = _nextResultToRows;\nvar resultToRows = require('../resultToRows');\n\nfunction subResultToRows(span,result) {\t\n\tvar promises = [];\n\tvar c2 = {};\n\tc2.visitJoin = function(leg) {\n\t\tpromises.push(nextResultToRows(leg.span,result));\n\t};\n\n\tc2.visitOne = c2.visitJoin;\n\n\tc2.visitMany = function(leg) {\t\t\n\t\tpromises.push(resultToRows(leg.span, result));\n\t};\n\t\n\tfunction onEachLeg(leg) {\t\t\t\n\t\tleg.accept(c2);\n\t}\n\tspan.legs.forEach(onEachLeg);\t\n\treturn all(promises);\n}\n\nfunction _nextResultToRows(span,result) {\n\tnextResultToRows = require('./subResultToRows');\n\treturn nextResultToRows(span,result);\n}\n\nmodule.exports = subResultToRows;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/rollbackSpec/req.js":"\nvar a  = require('a');\nvar mock = a.mock;\nvar requireMock  = a.requireMock;\n\n\nfunction act(c){\t\t\n\tc.mock = mock;\n\tc.rollbackCommand = requireMock('./commands/rollbackCommand');\n\tc.executeQuery = requireMock('./executeQueries/executeQuery');\n\tc.releaseDbClient = requireMock('./releaseDbClient');\n\tc.popChanges = requireMock('./popChanges');\n\tc.newThrow = requireMock('./newThrow');\n\tc.resultToPromise = requireMock('./resultToPromise');\n\t\n\tc.sut = require('../rollback');\n}\n\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/rowArraySpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return array').assertDeepEqual(true, c.sut instanceof Array)\n\t.it('should return empty array').assertEqual(0, c.sut.length)\n\t.it('toJSON should not be enumerable').assertEqual(false, c.sut.propertyIsEnumerable('toJSON'))","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/setSessionSingletonSpec/set.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\tc.context = {};\n\n\tc.getSessionContext = c.requireMock('./getSessionContext');\n\tc.getSessionContext.expect().return(c.context);\n\n\tc.expected = {};\n\t\n\trequire('../setSessionSingleton')('foo', c.expected);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/setSessionSingletonSpec/whenSet.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should set value on context').assertEqual(c.expected, c.context.foo)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/tableSpec/integrationSpec/defineTable.js":"var a = require('a');\nvar requireMock = a.requireMock;\nvar newQuery;\nvar strategyToSpan = require('../../table/strategyToSpan');\nvar table;\nvar customerTable;\nvar countryTable;\nvar lineTable;\nvar packageTable;\nvar articleTable;\nvar deliveryPartyTable;\nvar emptyInnerJoin = require('../../table/query/newParameterized')();\n\nfunction act(c) {\n\tcreateMocks();\n\tdefineTable();\t\n\tsetupSut();\t\n\n\tfunction createMocks() {\n\t\trequireMock('./executeQueries');\n\t\trequireMock('./resultToRows');\n\t\trequireMock('./tryGetFromCacheById');\n\t\tc.requireMock = requireMock;\n\t\tc.mock = a.mock;\n\t}\n\n\tfunction defineTable() {\n\t\tdefineOrder();\n\t\tdefineCustomer();\n\t\tdefineCountry();\n\t\tdefineOrderLines();\n\t\tdefineArticle();\t\t\n\t\tdefinePackages();\n\t\tdefineArticle();\n\t\tdefineDeliveryParty();\n\t}\n\n\tfunction defineOrder() {\n\t\ttable = newTable('order');\n\t\ttable.primaryColumn('oOrderId').numeric().as('id');\n\t\ttable.column('oCustomerId').string().as('customerId');\t\t\n\t\ttable.columnDiscriminators('discriminatorColumn=\\'foo\\'','discriminatorColumn2=\\'baz\\'');\n\t\tc.orderTable = table;\n\t}\t\t\n\n\tfunction defineCustomer() {\n\t\tcustomerTable = newTable('customer');\n\t\tcustomerTable.primaryColumn('cCustomerId').string().as('id');\n\t\tcustomerTable.column('cName').string().as('name');\n\t\tcustomerTable.column('cCountryId').string().as('countryId');\n\t\tvar customerJoin = table.join(customerTable).by('oCustomerId').as('customer');\n\t}\n\n\tfunction defineCountry() {\n\t\tcountryTable = newTable('country');\n\t\tcountryTable.primaryColumn('yCountryId').numeric().as('id');\n\t\tcountryTable.column('yCountryName').string().as('name');\n\t\tvar countryJoin = customerTable.join(countryTable).by('cCountryId').as('country');\t\t\n\t}\n\n\tfunction defineOrderLines() {\n\t\tlineTable = newTable('orderLine');\n\t\tlineTable.primaryColumn('lId').numeric().as('id');\n\t\tlineTable.column('lLineNo').numeric().as('lineNo');\n\t\tlineTable.column('lOrderId').numeric().as('orderId');\n\t\tvar orderJoin = lineTable.join(table).by('lOrderId').as('order');\n\t\ttable.hasMany(orderJoin).as('lines');\n\n\t}\n\n\tfunction defineArticle() {\n\t\tarticleTable = newTable('article');\n\t\tarticleTable.primaryColumn('aId').numeric().as('id');\t\t\n\t\tarticleTable.column('aName').string().as('name');\n\t}\n\n\tfunction definePackages() {\n\t\tpackageTable = newTable('package');\n\t\tpackageTable.primaryColumn('pId').numeric().as('id');\n\t\tpackageTable.column('pLineId').numeric().as('lineId');\n\t\tpackageTable.column('pArticleId').numeric().as('articleId');\n\t\tvar lineJoin = packageTable.join(lineTable).by('pLineId').as('line');\n\t\tlineTable.hasMany(lineJoin).as('packages');\t\t\n\t\tpackageTable.join(articleTable).by('pArticleId').as('article');\n\t}\n\n\tfunction defineDeliveryParty() {\n\t\tdeliveryPartyTable = newTable('deliveryParty');\n\t\tdeliveryPartyTable.primaryColumn('dId').numeric().as('id');\n\t\tdeliveryPartyTable.column('dOrderId').numeric().as('orderId');\n\t\tvar orderJoin = deliveryPartyTable.join(table).by('dOrderId').as('order');\n\t\ttable.hasOne(orderJoin).as('deliveryParty');\n\t}\n\n\tfunction newTable(tableName) {\n\t\treturn require('../../table')(tableName);\n\t}\n\n\tfunction setupSut() {\n\t\tnewQuery = require('../../table/newQuery');\n\t\tc.newQuery = _newQuery;\n\t}\n\n\tfunction _newQuery() {\n\t\tvar span = strategyToSpan(table, c.strategy);\n\t\tc.returned = newQuery([],table,c.filter,span,c.orderTable._dbName,emptyInnerJoin);\t\t\n\t}\n\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/tableSpec/new/columnDiscriminators.js":"var discriminator1 = {};\nvar discriminator2 = {};\n\nfunction act(c) {\n\tc.discriminator1 = discriminator1;\n\tc.discriminator2 = discriminator2;\n\tc.returned = c.sut.columnDiscriminators(discriminator1, discriminator2);\n}\n\nact.base = '../new';\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/tableSpec/new/exclusive.js":"function act(c){\n\tc.returned = c.sut.exclusive();\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/tableSpec/new/formulaDiscriminators.js":"var discriminator1 = {};\nvar discriminator2 = {};\n\nfunction act(c) {\n\tc.discriminator1 = discriminator1;\n\tc.discriminator2 = discriminator2;\n\tc.returned = c.sut.formulaDiscriminators(discriminator1, discriminator2);\n}\n\nact.base = '../new';\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/tableSpec/new/primaryColumn.js":"var requireMock = require('a').requireMock;\nvar primaryColumnName = {};\nvar columnDef = {};\n\nfunction act(c) {\n\tc.expected = {};\n\tc.columnDef = columnDef;\n\tc.newColumn.expect(c.sut,primaryColumnName).return(columnDef);\t\n\tc.column.expect(columnDef,c.sut).return(c.expected);\n\tc.returned = c.sut.primaryColumn(primaryColumnName);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/tableSpec/new/tryGetFirst.js":"var filter = {} ,\n\tstrategy = {};\n\nfunction act(c){\n\tc.expected = {};\n\tc.tryGetFirstFromDb.expect(c.sut, filter, strategy).return(c.expected);\n\tc.returned = c.sut.tryGetFirst(filter, strategy);\n\n\tc.expectedExclusive = {};\n\tc.tryGetFirstFromDb.exclusive.expect(c.sut, filter, strategy).return(c.expectedExclusive);\n\tc.returnedExclusive = c.sut.tryGetFirst.exclusive(filter, strategy);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/tableSpec/new/whenColumnDiscriminators.js":"var c = {};\nvar when = require('a').when;\n\nwhen(c).\t\n\tit('should add column discriminator1').assertEqual(c.discriminator1,c.sut._columnDiscriminators[0]).\n\tit('should add column discriminator2').assertEqual(c.discriminator2,c.sut._columnDiscriminators[1]).\n\tit('should return sut').assertEqual(c.sut,c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/tableSpec/new/when_column.js":"var c = {};\nvar when = require('a').when;\n\nwhen('./column', c).\n\tit('should return expected').assertEqual(c.expected,c.returned);\t\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/tableSpec/new/whenExclusive.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)    \n    .it('should return table').assertStrictEqual(c.sut, c.returned)\n    .it('should set _exclusive').assertEqual(true, c.sut._exclusive)","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/tableSpec/new/whenFormulaDiscriminators.js":"var c = {};\nvar when = require('a').when;\n\nwhen(c).\n\tit('should add formula discriminator1').assertEqual(c.discriminator1,c.sut._formulaDiscriminators[0]).\n\tit('should add formula discriminator2').assertEqual(c.discriminator2,c.sut._formulaDiscriminators[1]).\n\tit('should return sut').assertEqual(c.sut,c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/tableSpec/new/whenGetById.js":"var c = {};\nvar when = require('a').when;\n\nwhen(c)\n\t.it('should return expected').assertEqual(c.expected,c.returned)\n\t.it('should return expected exclusive').assertEqual(c.expectedExclusive,c.returnedExclusive)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/tableSpec/new/when_getMany.js":"var c = {};\nvar when = require('a').when;\n\nwhen('./getMany', c)\n\t.it('should return expectedExclusive').assertEqual(c.expectedExclusive,c.returnedExclusive)\n\t.it('should return expected').assertEqual(c.expected,c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/tableSpec/new/when_hasMany.js":"var c = {};\nvar when = require('a').when;\n\nwhen('./hasMany', c).\n\tit('should return expected').assertEqual(c.expected,c.returned);\t\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/tableSpec/new/when_hasOne.js":"var c = {};\nvar when = require('a').when;\n\nwhen('./hasOne', c).\n\tit('should return expected').assertEqual(c.expected,c.returned);\t\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/tableSpec/new/whenInsert.js":"var c = {};\nvar when = require('a').when;\n\nwhen(c).\n\tit('should return new row').assertEqual(c.expected,c.returned);\t\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/tableSpec/new/when_join.js":"var c = {};\nvar when = require('a').when;\n\nwhen('./join',c).\n\tit('should return expected').assertEqual(c.expected,c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/tableSpec/new/when_primaryColumn.js":"var c = {};\nvar when = require('a').when;\n\nwhen('./primaryColumn', c).\n\tit('should add primaryColumn to table._primaryColumns').assertEqual(c.columnDef,c.sut._primaryColumns[0]).\n\tit('should return expected').assertEqual(c.expected,c.returned);\t\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/tableSpec/new/whenTryGetById.js":"var c = {};\nvar when = require('a').when;\n\nwhen(c).\n\tit('should return expected').assertEqual(c.expected,c.returned);\t\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/tableSpec/new/whenTryGetFirst.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n    .it('should return first found row').assertEqual(c.expected, c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/strategyToSpanSpec/req.js":"var a = require('a');\nvar requireMock = a.requireMock;\nvar table = {};\n\nfunction act(c){\n\tc.table = table;\n\tc.mock = a.mock;\t\n\tc.newCollection = requireMock('../newCollection');\n\tc.sut = require('../strategyToSpan');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/tryGetByIdSpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should set exclusive').assertEqual(c.tryGetFromDbById.exclusive, c.sut.exclusive)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/tryGetFirstFromDbSpec/req.js":"var a = require('a');\n\nfunction act(c) {\n\tc.requireMock = a.requireMock;\n\tc.mock = a.mock;\n\tc.getMany = c.requireMock('./getMany');\n\tc.util = c.requireMock('util');\n\t\n\t\n\tc.getMany.exclusive = c.mock();\n\t\n\tc.table = 't';\n\tc.filter = 'f';\n\tc.initialStrategy = 's';\n\tc.strategy = {};\n\n\tc.util._extend = c.mock();\n\tc.util._extend.expect({limit: 1}, c.initialStrategy).return(c.strategy);\n\t\n\tc.sut = require('../tryGetFirstFromDb');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/tryGetFromCacheByIdSpec/get.js":"var mock =require('a').mock;\n\nfunction act(c){\n\tc.table = {};\n\tc.id = {};\n\tc.id2 = {};\n\tc.strategy = {};\n\t\n\tc.pk1 = {};\n\tc.pk1.alias = 'pk1Alias';\n\n\tc.pk2 = {};\n\tc.pk2.alias = 'pk2Alias';\n\n\tc.table._primaryColumns = [c.pk1, c.pk2];\n\n\tc.cache = {};\n\tc.cache.tryGet = mock();\n\tc.key = {};\n\tc.key.pk1Alias = c.id;\n\tc.key.pk2Alias = c.id2;\n\tc.cache.tryGet.expect(c.key).return(c.expected);\n\tc.table._cache = c.cache;\n\n\tc.sut = require('../tryGetFromCacheById');\n\tc.returned = c.sut(c.table, c.id, c.id2, c.strategy);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/tryGetFromCacheByIdSpec/whenGet.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return cached item').assertEqual(c.expected, c.returned)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/tryReleaseDbClientSpec/req.js":"var a = require('a');\n\nfunction act(c) {\n    c.mock = a.mock;\n    c.requireMock = a.requireMock;\n    c.expectRequire = a.expectRequire;\n    c.then = a.then;\n\n    c.releaseDbClient = c.requireMock('./releaseDbClient');\n\n    c.sut = require('../tryReleaseDbClient');\n}\n\nmodule.exports = act;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/updateFieldSpec/req.js":"var a = require('a');\nvar mock = a.mock;\nvar requireMock = a.requireMock;\n\nfunction act(c){\n\tc.mock = mock;\t\n\tc.newUpdateCommand = requireMock('./commands/newUpdateCommand');\n\tc.pushCommand = requireMock('./commands/pushCommand');\n\tc.lastCommandMatches = requireMock('./commands/lastCommandMatches');\n\tc.table = {};\n\tc.column = {};\n\tc.row = {}\n\n\tc.sut = require('../updateField');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emitEventSpec/new/add/clear.js":"function act(c) {\r\n\tc.sut.clear();\r\n}\r\n\r\nact.base = '../add';\r\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emitEventSpec/new/add/remove.js":"function act(c) {\r\n\tc.sut.remove(c.callback);\r\n}\r\n\r\nact.base = '../add';\r\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/emitEventSpec/new/add/whenEmit.js":"var when = require('a').when;\r\nvar c = {};\r\n\r\nwhen(c)\r\n\t.it('should invoke callback').assertDoesNotThrow(c.callback.verify)\r\n\t.it('should invoke callback2').assertDoesNotThrow(c.callback2.verify);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/indexSpec/req/mySql/defineDb.js":"var connString = 'mysql...';\nvar poolOptions = {};\n\nfunction act(c){\t\n\tc.database = {};\n\tc.newMySqlDatabase.expect(connString, poolOptions).return(c.database);\n\tc.returned = c.sut(connString, poolOptions);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/indexSpec/req/mySql/whenDefineDb.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return database').assertEqual(c.database, c.returned)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/indexSpec/req/other/whenDefineDb.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return database').assertEqual(c.database, c.returned)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/indexSpec/req/pg/whenDefineDb.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return database').assertEqual(c.database, c.returned)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/indexSpec/req/sqllite/whenDefineDb.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return database').assertEqual(c.database, c.returned)","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/lock/toIntKeySpec/req/aboveMax.js":"function act(c) {\n    c.key = '9223372036854775808';\n    c.expected = '922337203685477580';\n    c.returned = c.sut(c.key);\n}\n\nmodule.exports = act;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/lock/toIntKeySpec/req/integer.js":"function act(c){\n\tc.key = 1234567890;\n\tc.expected = c.key;\n\n\tc.returned =  c.sut(c.key);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/lock/toIntKeySpec/req/integerString.js":"function act(c){\n\tc.key = '1234567890';\n\tc.expected = c.key;\n\t\n\tc.returned =  c.sut(c.key);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/lock/toIntKeySpec/req/whenAboveMax.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return lock object').assertEqual(c.expected, c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/lock/toIntKeySpec/req/whenInteger.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return lock object').assertEqual(c.expected, c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/lock/toIntKeySpec/req/whenIntegerString.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return lock object').assertEqual(c.expected, c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/lock/toIntKeySpec/req/whenString.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return lock object').assertEqual(c.expected, c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/encodeDateSpec/req/encode.js":"function act(c){\n\tvar valueAsText = '2014-02-16T06:49:40.297-0200';\n\tc.expected = \"'2014-02-16T06:49:40.297'\";\n\tc.date = {\n\t\ttoISOString: function() {\n\t\t\treturn valueAsText;\n\t\t}\n\t};\n\t\t\n\tc.returned = c.sut(c.date);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/encodeDateSpec/req/encodeString.js":"function act(c){\n\n\tc.dateText = '2014-02-16T06:49:40.297+0200';\n\tc.expected = \"'2014-02-16T06:49:40.297'\";\n\n\tc.dateText2 = '2014-02-16T06:49:40.297-0200';\n\tc.expected2 = \"'2014-02-16T06:49:40.297'\";\n\n\tc.dateText3 = '2014-02-16T06:49:40.297Z';\n\tc.expected3 = \"'2014-02-16T06:49:40.297'\";\n\t\n\tc.returned = c.sut(c.dateText);\n\tc.returned2 = c.sut(c.dateText2);\n\tc.returned3 = c.sut(c.dateText3);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/encodeDateSpec/req/whenEncode.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return ISO').assertEqual(c.expected, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/encodeDateSpec/req/whenEncodeString.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return ISO without time zone for plus zone').assertEqual(c.expected, c.returned)\n\t.it('should return ISO without time zone for minus zone').assertEqual(c.expected2, c.returned2)\n\t.it('should return ISO without time zone for zulu zone').assertEqual(c.expected3, c.returned3)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/newDatabaseSpec/new/accept.js":"function act(c){\n\n\tc.context = {};\n\tc.context.visitMySql = c.mock();\n\tc.context.visitMySql.expect();\n\t\n\tc.sut.accept(c.context);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/newDatabaseSpec/new/transaction.js":"function act(c){\n\tc.expected = {};\n\tc.resolveTransaction = {};\n\tc.transactionPromise = {};\n\tc.domain = {};\n\tc.createDomain.expect().return(c.domain);\n\tc.newTransaction.expect(c.domain, c.pool).return(c.resolveTransaction);\n\tc.newPromise.expect(c.resolveTransaction).return(c.transactionPromise);\n\n\tc.transactionPromise.then = c.mock();\n\tc.beginPromise = {};\n\tc.transactionPromise.then.expect(c.begin).return(c.beginPromise);\n\n\tc.domain.run = c.mock();\n\tc.domain.run.expectAnything().whenCalled(onRun).return(c.expected);\n\n\tfunction onRun(cb) {\n\t\tvar res = cb();\n\t\tif (res != c.beginPromise)\n\t\t\tthrow new Error('wrong result');\n\t}\n\n\tc.returned = c.sut.transaction();\n\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/newDatabaseSpec/new/whenAccept.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should visit').assertDoesNotThrow(c.context.visitMySql.verify)\n\t\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/newDatabaseSpec/new/whenEnd.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should end pool').assertEqual(c.expected, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/newDatabaseSpec/new/whenTransaction.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return new transaction').assertEqual(c.expected, c.returned)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/newTransactionSpec/new/runDomain.js":"function act(c) {\n\n\tc.pool.connect = c.mock();\n\tc.pool.connect.expectAnything().whenCalled(onConnected);\n\n    c.raiseConnected = function() {};\n\n\tfunction onConnected(cb) {\n\t\tc.raiseConnected = cb;\n\t}\n\n\tc.onSuccess = c.mock();\n\tc.onError = c.mock();\n    c.sut(c.onSuccess, c.onError);\n}\n\nmodule.exports = act;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/newTransactionSpec/new/whenRunDomain.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should connect').assertDoesNotThrow(c.pool.connect.verify)","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/pool/endSpec/whenEnd.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should start ending').assertDoesNotThrow(c.mysqlPool.end.verify)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/wrapQuerySpec/wrap/run.js":"function act(c){\n\tc.onCompleted = c.mock();\n\tc.parameters = {};\n\tc.query = {};\n\tc.sql = {};\n\tc.query.parameters = c.parameters;\n\n\tc.query.sql = c.mock();\n\tc.query.sql.expect().return(c.sql);\n\n\tc.log.expect(c.sql);\n\tc.log.expect('parameters: ' + c.parameters);\n\n\tc.connection.query = 'other';\n\tc.runQuery.expect(c.sql, c.parameters).expect(c.onCompleted).return(c.expected);\n\n\tc.sut(c.query, c.onCompleted);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/wrapQuerySpec/wrap/whenRun.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should log query').assertDoesNotThrow(c.log.verify)\n\t.it('should execute query').assertDoesNotThrow(c.runQuery.verify)\n\t.it('should return object').assertEqual(c.expected, c.returned)\n\t\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/mySql/wrapQueryStreamSpec/wrap/whenRun.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should execute query and return value').assertEqual(c.expected, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/newCollectionSpec/new/addRange/whenForEach.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('enumerates').assertDoesNotThrow(c.callback.verify);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/newImmutableSpec/new/execute/whenExecute.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return cached result from original func').assertEqual(c.expected, c.returned)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/encodeDateSpec/req/whenEncode.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return ISO').assertEqual(c.expected, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/encodeDateSpec/req/whenEncodeString.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return ISO').assertEqual(c.expected, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/newDatabaseSpec/req/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should set commit on transaction').assertEqual(c.commit, c.sut.commit)\n\t.it('should set rollback on transaction').assertEqual(c.rollback, c.sut.rollback)\n\t.it('should set lock on transaction').assertEqual(c.lock, c.sut.lock)\n\t","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/newTransactionSpec/new/whenRunDomain.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should connect').assertDoesNotThrow(c.pool.connect.verify)","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/pool/endSpec/whenEnd.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should start drain').assertDoesNotThrow(c.pgPool.drain.verify)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/replaceParamCharSpec/hasParams/replace.js":"function act(c) {\n\tc.initialSql = 'SELECT ID FROM ORDER WHERE ID=? AND NAME LIKE ? AND ADDRESS LIKE ? bla bla';\n\tc.sql = 'SELECT ID FROM ORDER WHERE ID=$1 AND NAME LIKE $2 AND ADDRESS LIKE $3 bla bla';\n\n    c.query.sql.expect().return(c.initialSql);\n\n\tc.returned = c.sut(c.query, ['a','b','c']);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/replaceParamCharSpec/hasParams/whenReplace.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n.it('should return sql with numbered dollars').assertEqual(c.sql, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/replaceParamCharSpec/noParams/whenReplace.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n.it('should return sql').assertEqual(c.sql, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/wrapQuerySpec/wrap/whenRun.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should log query').assertDoesNotThrow(c.log.verify)\n\t.it('should execute query').assertDoesNotThrow(c.runQuery.verify)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/pg/wrapQueryStreamSpec/wrap/whenRun.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should log query').assertDoesNotThrow(c.log.verify)\n\t.it('should execute query').assertDoesNotThrow(c.runQuery.verify)\n\t.it('should return stream').assertEqual(c.stream, c.returned)\n\t\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/query/negotiateParametersSpec/array/whenExecute.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n.it('should return input').assertEqual(c.parameters, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/query/negotiateParametersSpec/nonArray/whenExecute.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n.it('should throw error with \"Query has invalid parameters property. Must be undefined or array\"').assertEqual(\"Query has invalid parameters property. Must be undefined or array\", c.thrownMessage)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/query/negotiateParametersSpec/undefined/whenExecute.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n.it('should return empty array').assertEqual(0, c.returned.length)\n\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/query/negotiateSqlSpec/object/object.js":"function act(c){\n\tc.query = {};\n}\n\nact.base = '../req';\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/query/negotiateSqlSpec/string/whenExecute.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n.it('should return sql wrapped in function').assertEqual(c.sql, c.returned())","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/sqlite/pool/endSpec/whenEnd.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should start drain').assertDoesNotThrow(c.pgPool.drain.verify)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/beginSpec/req/whenExecute.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should set changeSet on session').assertDoesNotThrow(c.setSessionSingleton.verify)\n\t.it('should return executeQuery begin promise').assertEqual(c.expected, c.returned)\n;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/binarySpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n.it('should set purify').assertEqual(c.purify, c.column.purify)\n.it('should set encode').assertEqual(c.encode, c.column.encode)\n.it('should set decode').assertEqual(c.decode, c.column.decode);\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/booleanSpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n.it('should set purify').assertEqual(c.purify, c.column.purify)\n.it('sets default to false').assertStrictEqual(false, c.column.default)\n.it('should set encode').assertEqual(c.encode, c.column.encode)\n.it('should set decode').assertEqual(c.decode, c.column.decode);\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/dateSpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n.it('should set purify').assertEqual(c.purify, c.column.purify)\n.it('should set encode').assertEqual(c.encode, c.column.encode)\n.it('should set decode').assertEqual(c.decode, c.column.decode);\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/encodeFilterArgSpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\tc.expected = {};\n\tc.column = {};\n\tc.arg = {};\n\tc.column.encode = c.mock();\n\n\tc.sut = require('../encodeFilterArg');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/equalSpec/req.js":"var amock = require('a');\r\nvar requireMock = amock.requireMock;\r\n\r\nfunction act(c) {\r\n\tc.newBoolean = requireMock('./newBoolean');\r\n\tc.encodeFilterArg = requireMock('./encodeFilterArg');\r\n\tc.mock = amock.mock;\r\n\tc.column = {};\r\n\tc.column._dbName = 'columnName';\r\n\tc.sut = require('../equal');\r\n}\r\n\r\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/greaterThanOrEqualSpec/req.js":"var amock = require('a');\r\nvar requireMock = amock.requireMock;\r\n\r\nfunction act(c) {\r\n\tc.newBoolean = requireMock('./newBoolean');\r\n\tc.encodeFilterArg = requireMock('./encodeFilterArg');\r\n\r\n\tc.mock = amock.mock;\r\n\tc.column = {};\r\n\tc.column._dbName = 'columnName';\r\n\tc.sut = require('../greaterThanOrEqual');\r\n}\r\n\r\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/greaterThanSpec/req.js":"var a = require('a');\r\nvar requireMock = a.requireMock;\r\n\r\nfunction act(c) {\r\n    c.newBoolean = requireMock('./newBoolean');\r\n    c.encodeFilterArg = requireMock('./encodeFilterArg');\r\n\r\n    c.mock = a.mock;\r\n    c.column = {};\r\n    c.column._dbName = 'columnName';\r\n    c.sut = require('../greaterThan');\r\n}\r\n\r\nmodule.exports = act;\r\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/guidSpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n.it('should set purify').assertEqual(c.purify, c.column.purify)\n.it('should set encode').assertEqual(c.encode, c.column.encode)\n.it('should set decode').assertEqual(c.decode, c.column.decode);\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/inSpec/req.js":"var amock = require('a');\r\nvar requireMock = amock.requireMock;\r\nvar newParameterized = requireMock('../query/newParameterized');\r\nvar newBoolean = requireMock('./newBoolean');\r\nvar encodeFilterArg = requireMock('./encodeFilterArg');\r\n\r\n\r\nfunction act(c) {\r\n\tc.newBoolean = newBoolean;\r\n\tc.newParameterized = newParameterized;\r\n\tc.encodeFilterArg = encodeFilterArg;\r\n\tc.mock = amock.mock;\r\n\tc.column = {};\r\n\tc.column._dbName = 'columnName';\r\n\tc.sut = require('../in');\r\n}\r\n\r\n\r\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/jsonSpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n.it('should set purify').assertEqual(c.purify, c.column.purify)\n.it('should set encode').assertEqual(c.encode, c.column.encode)\n.it('should set decode').assertEqual(c.decode, c.column.decode);\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/lessThanOrEqualSpec/req.js":"var amock = require('a');\r\nvar requireMock = amock.requireMock;\r\nvar newBoolean = requireMock('./newBoolean');\r\nvar encodeFilterArg = requireMock('./encodeFilterArg');\r\n\r\nfunction act(c) {\r\n\tc.newBoolean = newBoolean;\r\n\tc.encodeFilterArg = encodeFilterArg;\r\n\tc.mock = amock.mock;\r\n\tc.column = {};\r\n\tc.column._dbName = 'columnName';\r\n\tc.sut = require('../lessThanOrEqual');\r\n}\r\n\r\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/lessThanSpec/req.js":"var a = require('a');\r\nvar requireMock = a.requireMock;\r\nvar newBoolean = requireMock('./newBoolean');\r\nvar encodeFilterArg = requireMock('./encodeFilterArg');\r\n\r\nfunction act(c) {\r\n\tc.newBoolean = newBoolean;\r\n\tc.encodeFilterArg = encodeFilterArg;\r\n\tc.mock = a.mock;\r\n\tc.column = {};\r\n\tc.column._dbName = 'columnName';\r\n\tc.sut = require('../lessThan');\r\n}\r\n\r\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/negotiateNextAndFilterSpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\tc.filter = {};\n\tc.filter2 = {};\n\tc.filter2.sql = c.mock();\n\n\tc.sut = require('../negotiateNextAndFilter');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/negotiateNextOrFilterSpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\tc.filter = {};\n\tc.filter2 = {};\n\tc.filter2.sql = c.mock();\n\n\tc.sut = require('../negotiateNextOrFilter');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/negotiateRawSqlFilterSpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\tc.sut = require('../negotiateRawSqlFilter');\n\n\tc.newParameterized = c.requireMock('../query/newParameterized');\n\tc.newBoolean = c.requireMock('./newBoolean');\n\t\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/newBooleanSpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should set sql to filter.sql').assertEqual(c.sql, c.sut.sql())\n\t.it('should set parameters to filter.parameters').assertEqual(c.filter.parameters, c.sut.parameters)","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/newColumnSpec/when_new.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should add column to table._columns').assertEqual(c.sut,c.columns[0])\n\t.it('should not add any other columns').assertEqual(1,c.columns.length)\n\t.it('should set dbName to name').assertEqual(c.name,c.sut._dbName)\n\t.it('should set alias to name').assertEqual(c.name,c.sut.alias)\n\t.it('should set dbNull to null').assertStrictEqual(null, c.sut.dbNull)\t\n\t.it('eq is alias for equal').assertDeepEqual(c.sut.equal,c.sut.eq)\n\t.it('EQ is alias for equal').assertEqual(c.sut.equal,c.sut.EQ)\n\t.it('ne is alias for notEqual').assertEqual(c.sut.notEqual,c.sut.ne)\n\t.it('NE is alias for notEqual').assertEqual(c.sut.notEqual,c.sut.NE)\n\t.it('gt is alias for greaterThan').assertEqual(c.sut.greaterThan,c.sut.gt)\n\t.it('GT is alias for greaterThan').assertEqual(c.sut.greaterThan,c.sut.GT)\n\t.it('ge is alias for greaterThanOrEqual').assertEqual(c.sut.greaterThanOrEqual,c.sut.ge)\n\t.it('GE is alias for greaterThanOrEqual').assertEqual(c.sut.greaterThanOrEqual,c.sut.GE)\n\t.it('lt is alias for lessThan').assertEqual(c.sut.lessThan,c.sut.lt)\n\t.it('LT is alias for lessThan').assertEqual(c.sut.lessThan,c.sut.LT)\n\t.it('le is alias for lessThanOrEqual').assertEqual(c.sut.lessThanOrEqual,c.sut.le)\n\t.it('LE is alias for lessThanOrEqual').assertEqual(c.sut.lessThanOrEqual,c.sut.LE)\n\t.it('should set table.<columnName> to column').assertEqual(c.table.columnName,c.sut);\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/notEqualSpec/req.js":"var amock = require('a');\r\nvar requireMock = amock.requireMock;\r\nvar newBoolean = requireMock('./newBoolean');\r\nvar encodeFilterArg = requireMock('./encodeFilterArg');\r\nvar alias = '_2';\r\n\r\nfunction act(c) {\r\n\tc.alias = alias;\r\n\tc.newBoolean = newBoolean;\r\n\tc.encodeFilterArg = encodeFilterArg;\r\n\tc.mock = amock.mock;\r\n\tc.column = {};\r\n\tc.column._dbName = 'columnName';\r\n\tc.sut = require('../notEqual');\r\n}\r\n\r\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/numeric/negotiateDefault.js":"\nmodule.exports = function(column) {\n\tif(!column.hasOwnProperty('default'))\n\t\tcolumn.default = 0;\n};","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/numericSpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n.it('should set purify').assertEqual(c.purify, c.column.purify)\n.it('sets default to zero').assertEqual(0, c.column.default)\n.it('should set encode').assertEqual(c.encode, c.column.encode)\n.it('should set decode').assertEqual(c.decode, c.column.decode);\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/columnSpec/new/as.js":"var requireMock = require('a').requireMock;\n\nfunction act(c) {\n\tc.originalName = 'originalName';\n\tc.table.originalName = {};\t\t\n\tc.column.alias = c.originalName;\n\tc.alias = 'newAlias';\n\tc.returned = c.sut.as(c.alias);\n}\n\nact.base = '../new';\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/columnSpec/new/dbNull.js":"var requireMock = require('a').requireMock;\nvar dbNull  = {};\n\nfunction act(c) {\n\tc.dbNull = dbNull;\n\tc.returned = c.sut.dbNull(dbNull);\n}\n\nact.base = '../new';\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/columnSpec/new/default.js":"var requireMock = require('a').requireMock;\nvar defaultValue  = {};\n\nfunction act(c) {\n\tc.default = defaultValue;\n\tc.returned = c.sut.default(defaultValue);\n}\n\nact.base = '../new';\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/columnSpec/new/serializable.js":"var requireMock = require('a').requireMock;\n\nfunction act(c) {\n\tc.serializable = {};\n\tc.returned = c.sut.serializable(c.serializable);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/columnSpec/new/whenAs.js":"var when = require('a').when;\nvar c = {};\n\nwhen('./as',c)\n\t.it('should set alias on column').assertEqual(c.alias,c.column.alias)\n\t.it('should delete table.originalName').assertEqual(false,'originalName' in c.table)\n\t.it('should set table.newAlias').assertEqual(c.column,c.table.newAlias)\n\t.it('should return self').assertDeepEqual(c.sut,c.returned)\n\t;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/columnSpec/new/whenBinary.js":"var when = require('a').when;\nvar c = {};\n\nwhen('./binary',c)\n\t.it('sets type').assertDoesNotThrow(c.binary.verify)\n\t.it('returns self').assertEqual(c.sut,c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/columnSpec/new/whenBoolean.js":"var when = require('a').when;\nvar c = {};\n\nwhen('./boolean',c)\n\t.it('sets type').assertDoesNotThrow(c.bool.verify)\n\t.it('returns self').assertEqual(c.sut,c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/columnSpec/new/whenDate.js":"var when = require('a').when;\nvar c = {};\n\nwhen('./date',c).\n\tit('sets type').assertDoesNotThrow(c.date.verify).\n\tit('returns self').assertEqual(c.sut,c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/columnSpec/new/whenDbNull.js":"var when = require('a').when;\nvar c = {};\n\nwhen('./dbNull',c).\n\tit('should set dbNull on column').assertEqual(c.dbNull,c.column.dbNull).\n\tit('should return self').assertStrictEqual(c.sut,c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/columnSpec/new/whenDefault.js":"var when = require('a').when;\nvar c = {};\n\nwhen('./default',c).\n\tit('should set default on column').assertEqual(c.default,c.column.default).\n\tit('should return self').assertStrictEqual(c.sut,c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/columnSpec/new/whenGuid.js":"var when = require('a').when;\nvar c = {};\n\nwhen('./guid',c).\n\tit('sets type').assertDoesNotThrow(c.guid.verify).\n\tit('returns self').assertEqual(c.sut,c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/columnSpec/new/whenJson.js":"var when = require('a').when;\nvar c = {};\n\nwhen('./json',c).\n\tit('sets type').assertDoesNotThrow(c.json.verify).\n\tit('returns self').assertEqual(c.sut,c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/columnSpec/new/whenNumeric.js":"var when = require('a').when;\nvar c = {};\n\nwhen('./numeric',c).\n\tit('sets type').assertDoesNotThrow(c.numeric.verify).\n\tit('returns self').assertEqual(c.sut,c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/columnSpec/new/whenSerializable.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c).\n\tit('should set serializable on column').assertEqual(c.serializable,c.column.serializable).\n\tit('should return self').assertStrictEqual(c.sut,c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/columnSpec/new/whenString.js":"var when = require('a').when;\nvar c = {};\n\nwhen('./string',c).\n\tit('sets type').assertDoesNotThrow(c.string.verify).\n\tit('returns self').assertEqual(c.sut,c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/string/encodeCore.js":"var newPara = require('../../query/newParameterized');\nvar\tstringIsSafe = require('./stringIsSafe');\nvar purify = require('./purify');\n\nfunction _new(value,column) {\n\t\tvalue = purify(value);\n\t\tif (value == null)\n\t\t\treturn newPara('' + column.dbNull + '');\n\t\tif(stringIsSafe(value))\n\t\t\treturn newPara('' + value + '');\n\t\treturn newPara('?', [value]);\n}\n\nmodule.exports = _new;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/column/stringSpec/whenNew.js":"var when = require('a').when;\nvar c  = {};\n\nwhen('./new',c)\n\t.it('should set purify').assertEqual(c.purify, c.column.purify)\n\t.it('should set encode on column').assertEqual(c.encode,c.column.encode)\n\t.it('should set decode on column').assertEqual(c.decode,c.column.decode)\n\t.it('should set iEq alias for iEqual').assertEqual(c.column.iEqual, c.column.iEq)","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/beginCommandSpec/req.js":"var a = require('a');\nvar mock = a.mock;\nvar requireMock = a.requireMock;\n\nfunction act(c){\n\tc.mock = mock;\t\n\tc.command = {};\n\tc.newParameterized = requireMock('../query/newParameterized');\n\tc.newParameterized.expect('BEGIN').return(c.command);\n\n\tc.sut = require('../beginCommand');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/beginCommandSpec/whenReq.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return command').assertEqual(c.command, c.sut)\n\t.it('should set endEdit to empty func').assertDoesNotThrow(c.sut.endEdit)\n\t.it('should set matches to empty func').assertDoesNotThrow(c.sut.matches)\n\t\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/commitCommandSpec/req.js":"var a = require('a');\nvar mock = a.mock;\nvar requireMock = a.requireMock;\n\nfunction act(c){\n\tc.mock = mock;\t\n\tc.command = {};\n\tc.newParameterized = requireMock('../query/newParameterized');\n\tc.newParameterized.expect('COMMIT').return(c.command);\n\n\tc.sut = require('../commitCommand');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/commitCommandSpec/whenReq.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return command').assertEqual(c.command, c.sut)\n\t.it('should set endEdit to empty func').assertDoesNotThrow(c.sut.endEdit)\n\t.it('should set matches to empty func').assertDoesNotThrow(c.sut.matches)\n\t\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/compressChangesSpec/compressAdvanced.js":"\nvar a  = require('a');\nvar mock = a.mock;\n\nfunction act(c){\t\n\tc.requireMock = a.requireMock;\n\tc.newParameterized = c.requireMock('../query/newParameterized');\n\tc.getSessionSingleton = c.requireMock('../getSessionSingleton');\n\tc.getSessionSingleton.expect('multipleStatements').return(true);\n\t\n\tc.q1 = {};\n\tc.q2 = {};\n\tc.q3 = {};\n\tc.queries = [c.q1, c.q3, c.q2 ];\n\t\n\n\tc.sql1 = '<sql1>';\n\tc.q1.sql = mock();\n\tc.q1.sql.expect().return(c.sql1);\n\tc.q1.parameters = [];\n\n\tc.sql2 = '<sql2>';\n\tc.q2.sql = mock();\n\tc.q2.sql.expect().return(c.sql2);\n\tc.q2.parameters = [];\n\n\t\n\tc.sql3 = '<sql3>';\n\tc.parameter3 = {};\n\tc.q3.sql = mock();\n\tc.q3.sql.expect().return(c.sql3);\n\tc.q3.parameters = [c.parameter3];\n\n\tc.expected = c.queries;\n\n\tc.returned = require('../compressChanges')(c.queries);\n}\n\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/compressChangesSpec/compressEmpty.js":"var a  = require('a');\nvar mock = a.mock;\n\nfunction act(c){\t\t\n\tc.requireMock = a.requireMock;\n\tc.newParameterized = c.requireMock('../query/newParameterized');\n\tc.getSessionSingleton = c.requireMock('../getSessionSingleton');\n\tc.getSessionSingleton.expect('multipleStatements').return(true);\n\t\n\tc.queries = [];\n\t\n\tc.expected = c.queries;\n\n\tc.returned = require('../compressChanges')(c.queries);\n}\n\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/compressChangesSpec/compress.js":"var a  = require('a');\nvar mock = a.mock;\nvar requireMock  = a.requireMock;\n\nfunction act(c){\t\t\n\tc.requireMock = a.requireMock;\n\tc.newParameterized = c.requireMock('../query/newParameterized');\n\tc.getSessionSingleton = c.requireMock('../getSessionSingleton');\n\tc.getSessionSingleton.expect('multipleStatements').return(true);\n\n\tc.q1 = {};\n\tc.q2 = {};\n\tc.q3 = {};\n\tc.queries = [c.q1, c.q2, c.q3 ];\n\t\n\n\tc.sql1 = '<sql1>';\n\tc.q1.sql = mock();\n\tc.q1.sql.expect().return(c.sql1);\n\tc.q1.parameters = [];\n\n\tc.sql2 = '<sql2>';\n\tc.q2.sql = mock();\n\tc.q2.sql.expect().return(c.sql2);\n\tc.q2.parameters = [];\n\n\t\n\tc.sql3 = '<sql3>';\n\tc.parameter3 = {};\n\tc.q3.sql = mock();\n\tc.q3.sql.expect().return(c.sql3);\n\tc.q3.parameters = [c.parameter3];\n\n\tc.compositeSql = '<sql1>;<sql2>';\n\tc.compositeQuery = {};\n\t\n\tc.newParameterized.expect(c.compositeSql).return(c.compositeQuery);\n\n\tc.expected = [c.compositeQuery, c.q3];\n\n\tc.returned = require('../compressChanges')(c.queries);\n}\n\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/compressChangesSpec/compressMultipleStatementsFalse.js":"var a  = require('a');\nvar mock = a.mock;\nvar requireMock  = a.requireMock;\n\nfunction act(c){\t\t\n\tc.requireMock = a.requireMock;\n\tc.newParameterized = c.requireMock('../query/newParameterized');\n\tc.getSessionSingleton = c.requireMock('../getSessionSingleton');\n\tc.getSessionSingleton.expect('multipleStatements').return(false);\n\t\n\tc.queries = [c.q1, c.q2];\n\tc.expected = [c.q1, c.q2];\n\n\tc.returned = require('../compressChanges')(c.queries);\n}\n\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/compressChangesSpec/compressSimple.js":"var a  = require('a');\nvar mock = a.mock;\n\nfunction act(c){\t\t\n\tc.requireMock = a.requireMock;\n\tc.newParameterized = c.requireMock('../query/newParameterized');\n\tc.getSessionSingleton = c.requireMock('../getSessionSingleton');\n\tc.getSessionSingleton.expect('multipleStatements').return(true);\n\t\t\t\n\tc.q1 = {};\n\tc.queries = [c.q1];\n\t\n\n\tc.sql1 = '<sql1>';\n\tc.q1.sql = mock();\n\tc.q1.sql.expect().return(c.sql1);\n\tc.q1.parameters = [];\n\n\tc.expected = [c.q1];\n\n\tc.returned = require('../compressChanges')(c.queries);\n}\n\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/compressChangesSpec/whenCompressAdvanced.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return compressed').assertDeepEqual(c.expected, c.returned)\n;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/compressChangesSpec/whenCompressEmpty.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return compressed').assertDeepEqual(c.expected, c.returned)\n;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/compressChangesSpec/whenCompress.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return compressed').assertDeepEqual(c.expected, c.returned)\n;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/compressChangesSpec/whenCompressMultipleStatementsFalse.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return uncompressed').assertDeepEqual(c.expected, c.returned)","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/compressChangesSpec/whenCompressSimple.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return compressed').assertDeepEqual(c.expected, c.returned)\n;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/getChangeSetSpec/get.js":"var a = require('a');\nvar expectRequire = a.expectRequire;\n\nfunction act(c){\n\tc.changeSet = {};\n\tc.getSessionSingleton = a.requireMock('../getSessionSingleton');\n\tc.getSessionSingleton.expect('changes').return(c.changeSet);\n\n\tc.returned = require('../getChangeSet')();\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/getChangeSetSpec/whenGet.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return changeSet').assertEqual(c.changeSet, c.returned)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/lastCommandMatchesSpec/req.js":"var a = require('a');\nvar requireMock = a.requireMock;\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.getChangeSet = requireMock('./getChangeSet');\n\n\tc.sut = require('../lastCommandMatches');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/negotiateEndEditSpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\n\tc.sut = require('../negotiateEndEdit');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/newDeleteCommandSpec/when_new.js":"var when = require('a').when;\nvar c = {};\n\nwhen('./new',c)\n\t.it('should add sub commands').assertDoesNotThrow(c.nextDeleteCommand.verify)\n\t.it('should push singleCommand to queries').assertDoesNotThrow(c.queries.push.verify)\n\t.it('returns queries').assertEqual(c.queries,c.returned)","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/newInsertCommandCoreSpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return insertCommand').assertEqual(c.expected, c.returned)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/newInsertCommandSpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('endEdit points at sut.sql').assertEqual(c.sut.sql, c.sut.endEdit)\n\t.it('should set parameters').assertEqual(c.parameters, c.sut.parameters)\n\t.it('should set sql').assertEqual(c.sql, c.sut.sql())\t\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/newRowSpec/req.js":"var a = require('a');\nvar mock = a.mock;\nvar requireMock = a.requireMock;\n\nfunction act(c){\n\tc.decodeDbRow = requireMock('../resultToRows/decodeDbRow');\n\n\tc.row = {};\n\tc.mock = mock;\t\n\tc.table = {};\n\n\tc.id = 1;\n\tc.primaryColumn = {};\n\tc.primaryColumn.alias = 'pkAlias';\t\n\n\tc.id2 = 'two';\n\tc.primaryColumn2 = {};\n\tc.primaryColumn2.alias = 'pkAlias2';\t\n\n\tc.primaryColumns = [c.primaryColumn, c.primaryColumn2];\n\tc.table._primaryColumns = c.primaryColumns;\n\n\tc.column = {};\n\tc.column.alias = 'alias';\t\n\tc.defaultValue = 'def';\t\n\tc.column.default = c.defaultValue;\n\t\n\tc.column2 = {};\n\tc.column2.alias = 'alias2';\t\n\n\tc.columns = [c.column, c.primaryColumn, c.column2, c.primaryColumn2];\n\tc.table._columns = c.columns;\n\n\tc.rowDto = {};\n\tc.rowDto.alias = c.defaultValue;\n\tc.rowDto.alias2 = null;\n\tc.rowDto.pkAlias = c.id;\n\tc.rowDto.pkAlias2 = c.id2;\n\n\tc.sut = require('../newRow');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/newUpdateCommandCoreSpec/req.js":"var a = require('a');\nvar mock = a.mock;\nvar requireMock = a.requireMock;\n\nfunction act(c){\n\tc.columnList = {};\n\n\tc.mock = mock;\t\n\tc.table = {};\n\tc.tableName = 'theTable';\n\tc.table._dbName = c.tableName;\n\n\tc.row = {};\n\tc.value1 = 'value 1';\n\tc.encodedValue1 = {};\n\tc.alias1 = 'alias 1';\n\tc.row[c.alias1] = c.value1;\n\n\tc.value2 = 'value 2';\n\tc.encodedValue2 = {};\n\tc.alias2 = 'alias 2';\n\tc.row[c.alias2] = c.value2;\n\n\tc.pkValue1 = 'pkvalue 1';\n\tc.encodedPk1 = {};\n\tc.pkAlias1 = 'pkalias 1';\n\tc.row[c.pkAlias1] = c.pkValue1;\n\n\tc.pkValue2 = 'pkvalue 2';\n\tc.encodedPk2 = {};\n\tc.pkAlias2 = 'pkalias 2';\n\tc.row[c.pkAlias2] = c.pkValue2;\n\n\tc.column1 = {};\n\tc.columnName1 = 'colName1';\n\tc.column1._dbName = c.columnName1;\n\tc.column1.alias = c.alias1;\n\tc.column1.encode = c.mock();\n\tc.column1.encode.expect(c.value1).return(c.encodedValue1);\n\n\tc.column2 = {};\n\tc.columnName2 = 'colName2';\n\tc.column2._dbName = c.columnName2;\n\tc.column2.alias = c.alias2;\n\tc.column2.encode = c.mock();\n\tc.column2.encode.expect(c.value2).return(c.encodedValue2);\n\n\tc.pkColumn1 = {};\n\tc.pkColumnName1 = 'pk1';\n\tc.pkColumn1._dbName = c.pkColumnName1;\n\tc.pkColumn1.alias = c.pkAlias1;\n\tc.pkColumn1.encode = c.mock();\n\tc.pkColumn1.encode.expect(c.pkValue1).return(c.encodedPk1);\n\n\tc.pkColumn2 = {};\n\tc.pkColumnName2 = 'pk2';\n\tc.pkColumn2._dbName = c.pkColumnName2;\n\tc.pkColumn2.alias = c.pkAlias2;\n\tc.pkColumn2.encode = c.mock();\n\tc.pkColumn2.encode.expect(c.pkValue2).return(c.encodedPk2);\n\n\tc.table._primaryColumns = [c.pkColumn1, c.pkColumn2];\n\n\tc.columnList[c.alias1] = c.column1;\n\tc.columnList[c.alias2] = c.column2;\n\n\tc.part0 = {};\n\tc.newParameterized = requireMock('../query/newParameterized');\n\tc.newParameterized.expect(\"UPDATE theTable SET\").return(c.part0);\n\n\tc.part1 = {};\n\tc.part0.append = c.mock();\n\tc.part0.append.expect(\" colName1=\").return(c.part1);\n\n\tc.part2 = {};\n\tc.part1.append = c.mock();\n\tc.part1.append.expect(c.encodedValue1).return(c.part2);\n\n\tc.part3 = {};\n\tc.part2.append = c.mock();\n\tc.part2.append.expect(\",colName2=\").return(c.part3);\n\n\tc.part4 = {};\n\tc.part3.append = c.mock();\n\tc.part3.append.expect(c.encodedValue2).return(c.part4);\n\n\tc.part5 = {};\n\tc.part4.append = c.mock();\n\tc.part4.append.expect(\" WHERE pk1=\").return(c.part5);\n\n\tc.part6 = {};\n\tc.part5.append = c.mock();\n\tc.part5.append.expect(c.encodedPk1).return(c.part6);\n\n\tc.part7 = {};\n\tc.part6.append = c.mock();\n\tc.part6.append.expect(\" AND pk2=\").return(c.part7);\n\n\tc.part8 = {};\n\tc.part7.append = c.mock();\n\tc.part7.append.expect(c.encodedPk2).return(c.part8);\n\n\tc.expected = {};\n\tc.part8.append = c.mock();\n\tc.part8.append.expect(\" AND fooColumn='fooDiscr' AND barColumn='barDiscr'\").return(c.expected);\n\n\tc.sut = require('../newUpdateCommandCore');\t\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/newUpdateCommandSpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should set column on ColumnList with alias').assertEqual(c.column, c.columnList[c.alias])\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/pushCommandSpec/push.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.getChangeSet = a.requireMock('./getChangeSet');\n\tc.notifyDirty = a.requireMock('../notifyDirty');\n\t\n\tc.changeSet = {};\n\tc.command = {};\n\tc.changeSet.push = c.mock();\n\tc.changeSet.push.expect(c.command);\n\tc.getChangeSet.expect().return(c.changeSet);\n\n\tc.notifyDirty.expect();\n\n\trequire('../pushCommand')(c.command);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/pushCommandSpec/whenPush.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should notify dirty').assertDoesNotThrow(c.notifyDirty.verify)\n\t.it('should push command to changeSet').assertDoesNotThrow(c.changeSet.push.verify)","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/rollbackCommandSpec/req.js":"var a = require('a');\nvar mock = a.mock;\nvar requireMock = a.requireMock;\n\nfunction act(c){\n\tc.mock = mock;\t\n\tc.command = {};\n\tc.newParameterized = requireMock('../query/newParameterized');\n\tc.newParameterized.expect('ROLLBACK').return(c.command);\n\n\tc.sut = require('../rollbackCommand');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commands/rollbackCommandSpec/whenReq.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return command').assertEqual(c.command, c.sut)\n\t.it('should set endEdit to empty func').assertDoesNotThrow(c.sut.endEdit)\n\t.it('should set matches to empty func').assertDoesNotThrow(c.sut.matches)\n\t\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/commitSpec/req/whenExecute.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should push commitCommand').assertDoesNotThrow(c.pushCommand.verify)\n\t.it('should execute changes').assertEqual(c.expected, c.returned)\n;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/createJSONReadStreamNativeSpec/create/whenWrite.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n    .it('should push JSON to stream array').assertDoesNotThrow(c.transformer.push.verify)\n    .it('should invoke callbacks').assertDoesNotThrow(c.cb.verify)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/createJSONReadStreamNativeSpec/create/write.js":"var a = require('a');\n\nfunction act(c) {\n    c.mock = a.mock;\n    c.requireMock = a.requireMock;\n    c.expectRequire = a.expectRequire;\n    c.then = a.then;\n\n    c.transformer.push = c.mock();\n    c.chunk = {\n        result: {\n        }\n    };\n    c.chunk2 = {\n        result: {\n        }\n    };\n    c.enc = {};\n    c.cb = c.mock();\n    c.cb.expect().repeat(3);\n\n    c.transformer.push.expect('[');\n    c.transformer.push.expect(c.chunk.result);\n    c.transformer.push.expect(',' + c.chunk2.result);\n    c.transformer.push.expect(']');\n\n    c.transformer._transform(c.chunk, c.enc, c.cb);\n    c.transformer._transform(c.chunk2, c.enc, c.cb);\n    c.transformer._flush(c.cb);\n}\n\nmodule.exports = act;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/createReadStreamNativeSpec/create/whenWrite.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n    .it('should push JSON to stream array').assertDoesNotThrow(c.transformer.push.verify)\n    .it('should invoke callbacks').assertDoesNotThrow(c.cb.verify)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/createReadStreamNativeSpec/create/write.js":"var a = require('a');\n\nfunction act(c) {\n    c.mock = a.mock;\n    c.requireMock = a.requireMock;\n    c.expectRequire = a.expectRequire;\n    c.then = a.then;\n\n    c.transformer.push = c.mock();\n    c.expectedObject1 = {\n        a: 1,\n        b: 2\n    };\n    c.expectedObject2 = {\n        a: 11,\n        b: 22\n    };\n    c.chunk = {\n        result: JSON.stringify(c.expectedObject1)\n    };\n    c.chunk2 = {\n        result: JSON.stringify(c.expectedObject2)\n    };\n    c.enc = {};\n    c.cb = c.mock();\n    c.cb.expect().repeat(2);\n\n    c.transformer.push.expect(c.expectedObject1);\n    c.transformer.push.expect(c.expectedObject2);\n\n    c.transformer._transform(c.chunk, c.enc, c.cb);\n    c.transformer._transform(c.chunk2, c.enc, c.cb);\n}\n\nmodule.exports = act;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/deleteSpec/req/whenDelete.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n    .it('should return emptyPromise').assertEqual(c.emptyPromise, c.returned)\n    .it('should push deleteCommands').assertDoesNotThrow(c.pushCommand.verify)\n    \n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/domainCache/getCacheSpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.requireMock = a.requireMock;\n\t\n\tc.newCache = a.requireMock('../newCache');\n\tc.id = 'id';\n\n\tc.getSessionSingleton = c.requireMock('../getSessionSingleton');\n\tc.setSessionSingleton = c.requireMock('../setSessionSingleton');\n\t\n\n\tc.sut = require('../getCache');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/encodeDbSpecificSpec/req/encodeSpecific.js":"function act(c){\n\tc.expected = {};\n\tc.value = {};\n\t\t\n\tc.encodeBoolean = c.mock();\n\tc.getSessionSingleton.expect('encodeBoolean').return(c.encodeBoolean);\n\tc.encodeBoolean.expect(c.value).return(c.expected);\n\tc.getSessionSingleton.expect(c.encodeBoolean);\n\tc.returned = c.sut('Boolean', c.value)\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/encodeDbSpecificSpec/req/encodeStandard.js":"function act(c){\n\tc.value = {};\n\t\t\n\tc.getSessionSingleton.expect('encodeBoolean').return();\n\tc.returned = c.sut('Boolean', c.value)\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/encodeDbSpecificSpec/req/whenEncodeSpecific.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return encoded value for db').assertEqual(c.expected, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/encodeDbSpecificSpec/req/whenEncodeStandard.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return value unchanged').assertEqual(c.value, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/executeQueries/executeChangesSpec/req.js":"\nvar a  = require('a');\nvar mock = a.mock;\nvar requireMock  = a.requireMock;\n\n\nfunction act(c){\t\t\n\tc.mock = mock;\n\tc.executeQuery = requireMock('./executeQuery');\n\tc.newPromise = requireMock('../promise');\n\n\tc.sut = require('../executeChanges');\n}\n\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/executeQueries/executeQueriesCoreSpec/whenExecute.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c).\n\tit('should return results').assertDeepEqual(c.expected,c.returned);\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/executeQueries/executeQuerySpec/whenExecute.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c).\n\tit('should return promise').assertEqual(c.expected,c.returned);\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/executeQueries/resolveExecuteQuerySpec/whenExecute.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should run query against client').assertDoesNotThrow(c.dbClient.executeQuery.verify)","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/executeQueriesSpec/hasParams/whenExecute.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should invoke executeQueriesCore').assertEqual(c.executeQueriesCoreResult, c.queryResult)\n\t.it('should return expected promise').assertEqual(c.expected,c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/executeQueriesSpec/multipleStatementsNotAllowed/whenExecute.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should invoke executeQueriesCore').assertEqual(c.executeQueriesCoreResult, c.queryResult)\n\t.it('should return expected promise').assertEqual(c.expected,c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/executeQueriesSpec/noChanges/whenExecute.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should invoke executeQueriesCore').assertEqual(c.executeQueriesCoreResult, c.queryResult)\n\t.it('should return expected promise').assertEqual(c.expected,c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/executeQueriesSpec/noParams/whenExecute.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should invoke executeQueriesCore').assertEqual(c.executeQueriesCoreResult, c.queryResult)\n\t.it('should return expected promise').assertEqual(c.expected,c.returned)\n\t;\n\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/extractDeleteStrategySpec/hasStrategy/extract.js":"function act(c){\n\t\n\tc.strategy = {};\n\tc.returned = c.sut(c.strategy);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/extractDeleteStrategySpec/hasStrategy/whenExtract.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return strategy').assertEqual(c.strategy, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/extractDeleteStrategySpec/noStrategy/whenExtract.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return empty strategy').assertEqual(c.emptyStrategy, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/getManySpec/new/getExclusive.js":"function act(c) {\n    c.newSelectQuery.expect([], c.table, c.filter, c.span, c.dbName, c.emptyInnerJoin, undefined, true).return(c.queries);\n\n    return c.sut.exclusive(c.table, c.initialFilter, c.strategy).then(function(ret) {\n        c.returned = ret;\n    });\n\n}\n\nmodule.exports = act;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/getManySpec/new/get.js":"function act(c) {\n    c.newSelectQuery.expect([], c.table, c.filter, c.span, c.dbName, c.emptyInnerJoin, undefined, undefined).return(c.queries);\n\n    return c.sut(c.table, c.initialFilter, c.strategy).then(function(ret) {\n        c.returned = ret;\n    });\n\n}\n\nmodule.exports = act;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/getManySpec/new/whenGetExclusive.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c).then(function(it) {\n\tit('should return rows').assertEqual(c.rows,c.returned);\t\n});","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/getManySpec/new/when_get.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c).then(function(it) {\n\tit('should return rows').assertEqual(c.rows,c.returned);\t\n});","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/getRelativesCoreSpec/hasContext/whenGet.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should expand relation').assertDoesNotThrow(c.queryContext.expand.verify)\n\t.it('should negotiate expand inverse').assertDoesNotThrow(c.negotiateExpandInverse.verify)\t\n\t.it('returns rows').assertEqual(c.rows, c.returned)","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/getRelativesCoreSpec/noContext/whenGet.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should not get related rows').assertOk(c.didNotCrash)\n;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/hasManySpec/hasMany/getRelatedTable.js":"function act(c){\t\n\tc.expected = {};\n\tc.newRelatedTable.expect([c.manyRelation]).return(c.expected);\n\tc.returned = c.parentTable.child;\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/hasManySpec/hasMany/whenGetRelatedTable.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c).\n\tit('should return child Table').assertEqual(c.expected,c.returned);\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/hasOneSpec/hasOne/whenGetRelatedTable.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c).\n\tit('should return child Table').assertEqual(c.expected,c.returned);\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/insertSpec/req/whenInsert.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should push insertCommand').assertDoesNotThrow(c.pushCommand.verify)\n\t.it('should return row').assertEqual(c.row, c.returned)\t\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/joinRelation/getRelativesSpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\tc.expected = {};\n\n\tc.legToQuery = c.requireMock('./joinLegToQuery');\t\n\tc.getRelativesCore = c.requireMock('../getRelativesCore');\n\n\tc.getRelativesCore.bind = c.mock();\n\tc.getRelativesCore.bind.expect(null, c.legToQuery).return(c.expected);\t\n\n\tc.sut = require('../getRelatives');\t\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/joinRelation/getRelativesSpec/whenReq.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return bound getRelativesCore').assertEqual(c.expected, c.sut)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/joinRelation/joinLegToQuerySpec/req.js":"var a = require('a');\nvar requireMock = a.requireMock;\nvar mock = a.mock;\n\nmodule.exports = function(c) {\n\tc.mock = mock;\n\tc.newShallowJoinSql = requireMock('../query/addSubQueries/newShallowJoinSql');\n\n\tc.newQuery = requireMock('../newQuery');\n\tc.sut = require('../joinLegToQuery');\n}\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/joinSpec/req/joinUnknownColumn.js":"function act(c) {\t\n\tc.joinRelation = {};\n\n\ttry {\n\t\tc.sut(c.parentTable, c.childTable).by('foo','someColumn').by('bar').as('child');\t\t\n\t}\n\tcatch (e) {\n\t\tc.thrownMessage = e.message;\n\t}\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/joinSpec/req/whenJoin.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n    .it('should return joinRelation').assertEqual(c.joinRelation, c.returned)\n    .it('should add joinRelation to relations').assertEqual(c.joinRelation, c.parentTable._relations.child)\n    .it('should set leftAlias on relation').assertEqual('child', c.joinRelation.leftAlias)","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/joinSpec/req/whenJoinUnknownColumn.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n    .it('should throw with unknown column name').assertEqual('Unknown column: someColumn', c.thrownMessage)","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/logSpec/req/registerLogger.js":"function act(c){\n\tc.logger = c.mock();\n\tc.sut.registerLogger(c.logger);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/logSpec/req/whenLog.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should not do anything').assertOk(true);\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/negotiateExpandInverseSpec/isHasRelation/negotiate.js":"function act(c){\t\t\n\tc.joinRelation = {};\n\tc.queryContext = {};\n\tc.child.queryContext = c.queryContext;\n\tc.relation.joinRelation = c.joinRelation;\n\n\tc.child.queryContext.expand = c.mock();\n\tc.child.queryContext.expand.expect(c.joinRelation);\n\n\tc.negotiate();\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/negotiateExpandInverseSpec/isHasRelation/negotiateNoChildren.js":"function act(c){\t\t\n\tc.joinRelation = {};\n\tc.relation.joinRelation = c.joinRelation;\n\tc.children = [];\n\tc.negotiate();\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/negotiateExpandInverseSpec/isHasRelation/whenNegotiate.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should expand inverse relation').assertDoesNotThrow(c.queryContext.expand.verify)\n\t\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/negotiateExpandInverseSpec/isHasRelation/whenNegotiateNoChildren.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should not crash').assertOk(true)\n\t\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/negotiateExpandInverseSpec/isJoinRelation/whenNegotiate.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should not crash').assertOk(true)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newCacheSpec/new/getAll.js":"var parentRow = {};\nfunction act(c){\n\t\n\tc.returned = c.sut.getAll();\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newCacheSpec/new/tryGet.js":"var parentRow = {};\nfunction act(c){\n\t\n\tc.returned = c.sut.tryGet([1,2]);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newCacheSpec/new/tryRemoveCached.js":"var parentRow = {};\nfunction act(c){\n\t\n\tc.returned = c.sut.tryGet([1,2]);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newCacheSpec/new/whenAdd.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return value').assertEqual(c.result, c.returned)\n\t.it('should emit added').assertDoesNotThrow(c.emitAdded.verify)\t\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newCacheSpec/new/whenGetAll.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return empty array').assertDeepEqual([], c.returned)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newCacheSpec/new/whenTryGet.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return null').assertStrictEqual(null, c.returned)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newCacheSpec/new/whenTryRemoveCached.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return null').assertStrictEqual(null, c.returned)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newCacheSpec/new/whenTryRemove.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return null').assertStrictEqual(null, c.returned)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newCascadeDeleteStrategySpec/req/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should add sub strategies').assertDoesNotThrow(c.newNextCascadeDeleteStrategy.verify)\n\t.it('should return strategy').assertEqual(c.strategy, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newDomainCacheSpec/new/subscribeAdded.js":"function act(c){\n\tc.stubCache();\n\n\tc.cb = {};\n\tc.cache.subscribeAdded = c.mock();\n\tc.cache.subscribeAdded.expect(c.cb);\n\n\tc.sut.subscribeAdded(c.cb);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newDomainCacheSpec/new/subscribeRemoved.js":"function act(c){\n\tc.stubCache();\n\n\tc.cb = {};\n\tc.cache.subscribeRemoved = c.mock();\n\tc.cache.subscribeRemoved.expect(c.cb);\n\n\tc.sut.subscribeRemoved(c.cb);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newDomainCacheSpec/new/whenAdd.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should add to cache').assertDoesNotThrow(c.cache.tryAdd.verify)\n\t.it('should return cached').assertEqual(c.expected, c.returned)\n\t\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newDomainCacheSpec/new/whenGetAll.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return from cache').assertEqual(c.expected, c.returned)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newDomainCacheSpec/new/whenRemove.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should remove from cache').assertDoesNotThrow(c.cache.tryRemove.verify)\n\t\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newDomainCacheSpec/new/whenSubscribeAdded.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should subscribe to added').assertDoesNotThrow(c.cache.subscribeAdded.verify)\t\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newDomainCacheSpec/new/whenSubscribeRemoved.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should subscribe to removed').assertDoesNotThrow(c.cache.subscribeRemoved.verify)\t\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newDomainCacheSpec/new/whenTryGet.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return from cache').assertEqual(c.expected, c.returned)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newGetRelatedSpec/expanded/whenGet.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n    .it('should return related row').assertEqual(c.expected, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newJoinRelationSpec/new/expand.js":"function act(c) {\n\tc.parentRow = {};\n\tc.parentRow.expand = c.mock();\n\tc.alias = {};\n\tc.sut.leftAlias = c.alias;\n\tc.parentRow.expand.expect(c.alias);\n\tc.sut.expand(c.parentRow);\n} \n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newJoinRelationSpec/new/toGetRelated.js":"function act(c){\n\tc.parent = {};\n\tc.expected = {};\n\tc.newGetRelated.expect(c.parent, c.sut).return(c.expected);\n\tc.returned = c.sut.toGetRelated(c.parent);\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newJoinRelationSpec/new/toLeg.js":"var newLeg;\nvar leg = {};\nvar sut;\n\nfunction act(c){\n\tnewLeg = c.newLeg;\n\tsut = c.sut;\t\n\tnewLeg.expect(sut).return(leg);\n\tc.leg = leg;\n\tc.returned = sut.toLeg();\n}\n\nact.base = '../new'\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newJoinRelationSpec/new/whenAccept.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c).\n\tit('should visit join').assertDoesNotThrow(c.visitor.visitJoin.verify);\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newJoinRelationSpec/new/whenExpand.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should expand parent').assertDoesNotThrow(c.parentRow.expand.verify)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newJoinRelationSpec/new/whenGetRelatives.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n.it('should return relatives').assertEqual(c.expected, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newJoinRelationSpec/new/whenToGetRelated.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n.it('should return toGetRelated').assertEqual(c.expected, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newJoinRelationSpec/new/whenToLeg.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c).\n\tit('should return leg').assertEqual(c.leg,c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newManyRelationSpec/new/getFromCache.js":"var parentRow = {};\n\nfunction act(c){\t\n\tc.cachedResult = {};\n\tc.expected = {};\n\tc.resultToPromise.expect(c.cachedResult).return(c.expected);\n\tc.cache.tryGet.expect(parentRow).return(c.cachedResult);\n\tc.returned = c.sut.getFromCache(parentRow);\n}\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newManyRelationSpec/new/getFromDb.js":"var parentRow = {};\n\nfunction act(c){\t\n\tc.result = 'res';\n\n\tc.foreignKeyFilter = {};\n\tc.newForeignKeyFilter.expect(c.joinRelation, parentRow).return(c.foreignKeyFilter);\n\n\tc.expected = {};\n\tc.childTable.getMany = c.mock();\n\tc.childTable.getMany.expect(c.foreignKeyFilter).return(c.expected);\n\n\tc.returned = c.sut.getFromDb(parentRow);\n}\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newManyRelationSpec/new/whenAccept.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n.it('should visitMany').assertDoesNotThrow(c.visitor.visitMany.verify);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newManyRelationSpec/new/whenExpand.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should expand parent').assertDoesNotThrow(c.parentRow.expand.verify)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newManyRelationSpec/new/whenGetFromCache.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return cached result').assertEqual(c.expected, c.returned)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newManyRelationSpec/new/whenGetFromDb.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n    .it('should return result from db').assertEqual(c.expected, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newManyRelationSpec/new/whenGetRelatives.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return result').assertEqual(c.expected, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newManyRelationSpec/new/whenToGetRelated.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return getRelated').assertEqual(c.expected, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newManyRelationSpec/new/whenToLeg.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c).\n\tit('should return leg').assertEqual(c.leg,c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newOneRelationSpec/new/whenAccept.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n.it('should visitOne').assertDoesNotThrow(c.visitor.visitOne.verify);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newOneRelationSpec/new/whenExpand.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should expand parent').assertDoesNotThrow(c.parentRow.expand.verify)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newOneRelationSpec/new/whenGetFromCache.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return cached result').assertEqual(c.expected, c.returned)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newOneRelationSpec/new/whenGetFromDb.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n    .it('should return result from db').assertEqual(c.expected, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newOneRelationSpec/new/whenGetRelatives.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return result').assertEqual(c.expected, c.returned)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newOneRelationSpec/new/whenToGetRelated.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return getRelated').assertEqual(c.expected, c.returned)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newOneRelationSpec/new/whenToLeg.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c).\n\tit('should return leg').assertEqual(c.leg,c.returned);","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newRelatedTableSpec/new/getRelatedTables.js":"function act(c){\n\tc.childTable = 'childT';\n\tc.childTable2 = 'childT2';\n\t\n\tc.newRelatedTable = c.requireMock('./newRelatedTable');\t\n\n\tc.newRelatedTable.expect([c.relation, c.relation2, c.childRelation]).return(c.childTable);\t\n\tc.newRelatedTable.expect([c.relation, c.relation2, c.childRelation2]).return(c.childTable2);\t\n\t\n\tc.returnedChild = c.sut.child;\n\tc.returnedChild2 = c.sut.child2;\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newRelatedTableSpec/new/whenGetRelatedTables.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return child table').assertEqual(c.childTable, c.returnedChild)\n\t.it('should return child table2').assertEqual(c.childTable2, c.returnedChild2)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newRowCacheSpec/new/whenAdd.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should add to domainCache').assertDoesNotThrow(c.domainCache.tryAdd.verify)\n\t.it('should return row').assertEqual(c.expected, c.returned)\t\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newRowCacheSpec/new/whenRemove.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should remove from domainCache').assertDoesNotThrow(c.domainCache.tryRemove.verify)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/newRowCacheSpec/new/whenTryGet.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return from domainCache').assertEqual(c.expected, c.returned)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/oneRelation/getRelativesSpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\tc.expected = {};\n\n\tc.legToQuery = c.requireMock('../query/addSubQueries/manyLegToQuery');\t\n\tc.getRelativesCore = c.requireMock('../getRelativesCore');\n\n\tc.getRelativesCore.bind = c.mock();\n\tc.getRelativesCore.bind.expect(null, c.legToQuery).return(c.expected);\t\n\n\tc.sut = require('../getRelatives');\t\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/oneRelation/getRelativesSpec/whenReq.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return bound getRelativesCore').assertEqual(c.expected, c.sut)\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/popChangesSpec/empty/pop.js":"function act(c){\n\tc.changeSet = [];\n\tc.getChangeSet.expect().return(c.changeSet);\n\tc.returned = c.sut();\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/popChangesSpec/empty/whenPop.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return changeSet').assertEqual(c.changeSet, c.returned)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/popChangesSpec/notEmpty/popWithoutEndEdit.js":"function act(c){\n\tc.firstCommand = {};\n\tc.lastCommand = {};\n\tc.changeSet = [c.firstCommand, c.lastCommand];\n\tc.expected = {};\n\n\tc.getChangeSet.expect().return(c.changeSet);\n\tc.compressChanges.expect(c.changeSet).return(c.expected);\n\t\n\tc.returned = c.sut();\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/popChangesSpec/notEmpty/whenPop.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should end edit last Command').assertDoesNotThrow(c.lastCommand.endEdit.verify)\n\t.it('should return compressed changeSet').assertEqual(c.expected, c.returned)\n\t.it('should set clear changeSet').assertDeepEqual(0, c.changeSet.length)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/popChangesSpec/notEmpty/whenPopWithoutEndEdit.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n\t.it('should return compressed changeSet').assertEqual(c.expected, c.returned)\n\t.it('should clear changeSet').assertDeepEqual(0, c.changeSet.length)\n\t;\n","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/addSubQueries/negotiateLimitFilter.js":"var newJoinCore = require('./newShallowJoinSqlCore');\n\nfunction negotiateLimitFilter(filter,limit,rightTable,leftColumns,rightColumns,leftAlias,rightAlias) {\n\tif (!limit)\t\n\t\treturn filter;\n\tvar sql = 'exists (' + rightTable._dbName + ' ' +  rightAlias + ' ON (';\n\tsql += newJoinCore(rightTable,leftColumns,rightColumns,leftAlias,rightAlias) + ')';\n\treturn sql;\n}\n\nmodule.exports = negotiateLimitFilter;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/addSubQueries/oneLegToQuery.js":"var newShallowJoinSql = require('./newShallowJoinSql');\nvar addSubQueries = require('../addSubQueries');\nvar newParameterized = require('../newParameterized');\n\nvar emptyFilter;\n\nfunction oneLegToQuery(queries, rightAlias,leg,legNo,filter, innerJoin, limitQuery) {\t\n\tvar leftAlias = rightAlias + '_' + legNo;\n\tvar span = leg.span;\n\tvar rightTable = leg.table;\n\tvar rightColumns = rightTable._primaryColumns;\n\tvar leftColumns = leg.columns;\t \n\t \n\tvar shallowJoin  = newShallowJoinSql(rightTable,leftColumns,rightColumns,leftAlias,rightAlias,limitQuery);\n\tinnerJoin = shallowJoin.append(innerJoin);\t\n\treturn addSubQueries(queries, span.table,filter,span,leftAlias,innerJoin);\n}\n\nmodule.exports = oneLegToQuery;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/extractFilterSpec/req.js":"var requireMock = require('a').requireMock;\n\nfunction act(c){\t\n\tc.emptyFilter = requireMock('../../emptyFilter');\n\tc.sut = require('../extractFilter');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/extractLimitSpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\t\n\tc.span = {};\n\n\tc.sut = require('../extractLimit');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/extractOrderBySpec/req.js":"var a = require('a');\n\nfunction act(c){\n\tc.mock = a.mock;\n\tc.requireMock = a.requireMock;\n\tc.expectRequire = a.expectRequire;\n\tc.then = a.then;\n\tc.table = {};\n\tc.alias = 'alias';\n\tc.sut = require('../extractOrderBy');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/extractSqlSpec/req.js":"function act(c){\t\n\tc.sut = require('../extractSql');\n}\n\nmodule.exports = act;","/home/travis/build/npmtest/node-npmtest-rdb/node_modules/rdb/table/query/newSingleQuerySpec/whenNew.js":"var when = require('a').when;\nvar c = {};\n\nwhen(c)\n    .it('should set queryContext').assertEqual(c.queryContext, c.sut.queryContext)\n    .it('should set parameters to concated parameters').assertDeepEqual(c.parameters, c.sut.parameters);\n"}